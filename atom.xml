<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老墙根下，躲雨</title>
  
  <subtitle>A raindrop is one sea, one rainbow.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zenvv.com/"/>
  <updated>2018-04-08T06:50:08.000Z</updated>
  <id>http://zenvv.com/</id>
  
  <author>
    <name>Peter Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebRTC实时通信 (2) - SDP</title>
    <link href="http://zenvv.com/2018/01/29/webrtc-sdp/"/>
    <id>http://zenvv.com/2018/01/29/webrtc-sdp/</id>
    <published>2018-01-29T05:59:05.000Z</published>
    <updated>2018-04-08T06:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="1-SDP介绍"><a href="#1-SDP介绍" class="headerlink" title="1. SDP介绍"></a>1. SDP介绍</h3><h4 id="m-audio-video-application"><a href="#m-audio-video-application" class="headerlink" title="*. m=audio/video/application"></a>*. m=audio/video/application</h4><p>媒体行: 最基本的媒体类型标识,其中m=application可用于创建sctp数据通道。</p><p>sdp中必须至少存在一个<code>m=..</code>， 同一种类型的媒体可以同时存在多个<code>m=..</code>.</p><h4 id="a-a-sendrecv-sendonly-recvonly"><a href="#a-a-sendrecv-sendonly-recvonly" class="headerlink" title="a. a=sendrecv/sendonly/recvonly"></a>a. a=sendrecv/sendonly/recvonly</h4><p>offer/answer的数据传输属性的匹配方式如下:</p><table><thead><tr><th>offer(A)</th><th>answer(B)</th><th>说明</th></tr></thead><tbody><tr><td>sendrecv</td><td>sendrecv</td><td>可互相发送媒体数据</td></tr><tr><td>sendrecv</td><td>sendonly/recvonly</td><td>-</td></tr><tr><td>sendonly</td><td>recvonly</td><td>-</td></tr><tr><td>recvonly</td><td>sendonly</td><td>-</td></tr><tr><td>inactive</td><td>inactive</td><td>-</td></tr></tbody></table><h4 id="b-a-rtpmap"><a href="#b-a-rtpmap" class="headerlink" title="b. a=rtpmap"></a>b. a=rtpmap</h4><p>标识RTP数据(payload), 可以用于区分音视频编码类型/RTP数据类型(如正常数据包，重传包，FEC包等)</p><h4 id="c-a-rtcp-fb"><a href="#c-a-rtcp-fb" class="headerlink" title="c. a=rtcp-fb"></a>c. a=rtcp-fb</h4><p>标识RTP数据(payload)所支持的RTCP类型，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=rtcp-fb:* nack         =&gt; 所有rtp数据均支持重传(*表示所有payload的RTP数据)</span><br><span class="line">a=rtcp-fb:100 nack pli     =&gt; payload为100编码的RTP数据支持PLI请求</span><br><span class="line">a=rtcp-fb:96 ccm fir       =&gt; payload为96编码的RTP数据支持CCM和FIR请求</span><br><span class="line">a=rtcp-fb:96 goog-remb     =&gt; payload为96编码的RTP数据支持google REMB。</span><br></pre></td></tr></table></figure><p>注意:   </p><ul><li>在最新版本的firefox中并未支持NACK数据重传。  </li><li>PLI/FIR对于H264编码具有同等作用。  </li><li>REMB在Firefox与Chrome中实现基本一致，但对于Multi-stream模式有区别(后续将详细解释)。</li></ul><h4 id="d-a-ice-ufrag-ice-pwd"><a href="#d-a-ice-ufrag-ice-pwd" class="headerlink" title="d. a=ice-ufrag/ice-pwd"></a>d. a=ice-ufrag/ice-pwd</h4><p>ice-ufrag用于标识stun消息是否合法，ice-pwd用于stun数据体的加/解密。</p><h4 id="e-a-fingerprint"><a href="#e-a-fingerprint" class="headerlink" title="e. a=fingerprint"></a>e. a=fingerprint</h4><p>用于对媒体数据(audio/video/data)的加解密。</p><h4 id="f-a-mid"><a href="#f-a-mid" class="headerlink" title="f. a=mid"></a>f. a=mid</h4><p>媒体数据标识ID: 如果使用<code>a=group:BUNDLE</code>属性，a=mid值必须与其匹配。</p><p>a=mid必须被用在具体的媒体行’m=’里面。</p><h4 id="g-a-extmap"><a href="#g-a-extmap" class="headerlink" title="g. a=extmap"></a>g. a=extmap</h4><p>RTP媒体数据(audio/video)的扩展头标识。回复Answer中的该项值必须是Offer的子集。</p><h4 id="h-a-rtcp-mux"><a href="#h-a-rtcp-mux" class="headerlink" title="h. a=rtcp-mux"></a>h. a=rtcp-mux</h4><p>启用rtcp-mux复合包，即一个RTCP包中有多个类型数据(如RR/SR/PLI/CNAME)，复合包中必须包含一个CNAME类型数据。</p><h4 id="i-a-fmtp"><a href="#i-a-fmtp" class="headerlink" title="i. a=fmtp"></a>i. a=fmtp</h4><p>媒体数据属性，如编解码参数/RTP打包模式等。<br>fmtp子属性<code>apt=</code>指的是该RTP的重传包具有不同的payload值。</p><h4 id="j-a-msid"><a href="#j-a-msid" class="headerlink" title="j. a=msid"></a>j. a=msid</h4><p>用于标识媒体流的streamID和trackID。</p><p>最新标准中推荐的格式为(firefox): <code>a=msid:{stream_id} {track_id}</code></p><p>之前标准中所使用的格式为(chrome):<br><code>a=ssrc:1424320061 msid:stream_id track_id</code></p><h3 id="2-Chrome-SDP"><a href="#2-Chrome-SDP" class="headerlink" title="2. Chrome SDP"></a>2. Chrome SDP</h3><p>SDP具有Offer和Answer两种模式, 两种模式格式基本类似当含义却不同:</p><ul><li>Offer是向对方列举自身设备所允许的能力。  </li><li>Answer是从对方Offer中选择自身也支持的若干种能力，然后通知对方。</li></ul><h4 id="1-SDP-Offer"><a href="#1-SDP-Offer" class="headerlink" title="1). SDP Offer"></a>1). SDP Offer</h4><p>以视频和数据这两个媒体类型为例, 如下所示描述当前设备所具备的接收视频的能力:   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">v=<span class="number">0</span></span><br><span class="line">o=- <span class="number">2313687692229239915</span> <span class="number">3</span> IN IP4 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">s=-</span><br><span class="line">t=<span class="number">0</span> <span class="number">0</span></span><br><span class="line">a=group:BUNDLE video data</span><br><span class="line">a=msid-semantic: WMS</span><br><span class="line"></span><br><span class="line">m=video <span class="number">52510</span> UDP/TLS/RTP/SAVPF <span class="number">96</span> <span class="number">97</span> <span class="number">98</span> <span class="number">99</span> <span class="number">100</span> <span class="number">101</span> <span class="number">102</span> <span class="number">124</span> <span class="number">127</span> <span class="number">123</span> <span class="number">125</span> <span class="number">107</span> <span class="number">108</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=rtcp:<span class="number">9</span> IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:dLaN</span><br><span class="line">a=ice-pwd:gRWPwtQj8OYQl0TNPsXjXzZ8</span><br><span class="line">a=ice-options:trickle</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> <span class="number">7</span>C:<span class="number">68</span>:A9:F6:<span class="number">9</span>C:CE:<span class="number">45</span>:<span class="number">47</span>:CA:<span class="number">42</span>:F2:<span class="number">7</span>A:<span class="number">98</span>:<span class="number">48</span>:<span class="number">7F</span>:<span class="number">65</span>:<span class="number">3F</span>:<span class="number">06</span>:<span class="number">1</span>C:<span class="number">65</span>:<span class="number">8</span>E:B8:AF:<span class="number">82</span>:<span class="number">3</span>A:<span class="number">5F</span>:E1:EF:DB:<span class="number">38</span>:<span class="number">26</span>:C1</span><br><span class="line">a=setup:actpass</span><br><span class="line"></span><br><span class="line">a=mid:video</span><br><span class="line">a=extmap:<span class="number">2</span> urn:ietf:params:rtp-hdrext:toffset</span><br><span class="line">a=extmap:<span class="number">3</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/abs-send-time</span></span><br><span class="line">a=extmap:<span class="number">4</span> urn:<span class="number">3</span>gpp:video-orientation</span><br><span class="line">a=extmap:<span class="number">5</span> http:<span class="comment">//www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01</span></span><br><span class="line">a=extmap:<span class="number">6</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/playout-delay</span></span><br><span class="line">a=extmap:<span class="number">7</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/video-content-type</span></span><br><span class="line">a=extmap:<span class="number">8</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/video-timing</span></span><br><span class="line">a=recvonly</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtcp-rsize</span><br><span class="line">a=rtpmap:<span class="number">96</span> VP8/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">96</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> transport-cc</span><br><span class="line">a=rtpmap:<span class="number">97</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">97</span> apt=<span class="number">96</span></span><br><span class="line">a=rtpmap:<span class="number">98</span> VP9/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">98</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> transport-cc</span><br><span class="line">a=rtpmap:<span class="number">99</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">99</span> apt=<span class="number">98</span></span><br><span class="line">a=rtpmap:<span class="number">100</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">100</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> transport-cc</span><br><span class="line">a=fmtp:<span class="number">100</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">64001f</span></span><br><span class="line">a=rtpmap:<span class="number">101</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">101</span> apt=<span class="number">100</span></span><br><span class="line">a=rtpmap:<span class="number">102</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">102</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> transport-cc</span><br><span class="line">a=fmtp:<span class="number">102</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">42e01</span>f</span><br><span class="line">a=rtpmap:<span class="number">124</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">124</span> apt=<span class="number">102</span></span><br><span class="line">a=rtpmap:<span class="number">127</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">127</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> transport-cc</span><br><span class="line">a=fmtp:<span class="number">127</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">42001f</span></span><br><span class="line">a=rtpmap:<span class="number">123</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">123</span> apt=<span class="number">127</span></span><br><span class="line">a=rtpmap:<span class="number">125</span> red/<span class="number">90000</span></span><br><span class="line">a=rtpmap:<span class="number">107</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">107</span> apt=<span class="number">125</span></span><br><span class="line">a=rtpmap:<span class="number">108</span> ulpfec/<span class="number">90000</span></span><br><span class="line"></span><br><span class="line">...&lt;&lt;webrtc_video_sending_sdp&gt;&gt;...</span><br><span class="line"></span><br><span class="line">m=application <span class="number">62968</span> DTLS/SCTP <span class="number">5000</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:dLaN</span><br><span class="line">a=ice-pwd:gRWPwtQj8OYQl0TNPsXjXzZ8</span><br><span class="line">a=ice-options:trickle</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> <span class="number">7</span>C:<span class="number">68</span>:A9:F6:<span class="number">9</span>C:CE:<span class="number">45</span>:<span class="number">47</span>:CA:<span class="number">42</span>:F2:<span class="number">7</span>A:<span class="number">98</span>:<span class="number">48</span>:<span class="number">7F</span>:<span class="number">65</span>:<span class="number">3F</span>:<span class="number">06</span>:<span class="number">1</span>C:<span class="number">65</span>:<span class="number">8</span>E:B8:AF:<span class="number">82</span>:<span class="number">3</span>A:<span class="number">5F</span>:E1:EF:DB:<span class="number">38</span>:<span class="number">26</span>:C1</span><br><span class="line">a=setup:actpass</span><br><span class="line">a=mid:data</span><br><span class="line">a=sctpmap:<span class="number">5000</span> webrtc-datachannel <span class="number">1024</span></span><br></pre></td></tr></table></figure><ul><li><code>m=video</code>是video的基本描述信息; <code>a-mid</code>是具体视频参数相关信息，用于实际视频的接收和发送</li><li><code>m=application</code>是application的基本描述信息; <code>a=mid</code>是具体数据通道相关信息,用于传递带外数据</li></ul><p>如果需要发送视频, 则在此处<code>webrtc_video_sending_sdp</code>添加发送视频的基本信息: 在调用addStream API添加发送媒体流后，createOffer将会自动生成，格式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=ssrc-group:FID <span class="number">1424320061</span> <span class="number">772564596</span></span><br><span class="line">a=ssrc:<span class="number">1424320061</span> cname:+T5LKYkAJtmH1euA</span><br><span class="line">a=ssrc:<span class="number">1424320061</span> msid:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a <span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br><span class="line">a=ssrc:<span class="number">1424320061</span> mslabel:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a</span><br><span class="line">a=ssrc:<span class="number">1424320061</span> label:<span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br><span class="line">a=ssrc:<span class="number">772564596</span> cname:+T5LKYkAJtmH1euA</span><br><span class="line">a=ssrc:<span class="number">772564596</span> msid:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a <span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br><span class="line">a=ssrc:<span class="number">772564596</span> mslabel:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a</span><br><span class="line">a=ssrc:<span class="number">772564596</span> label:<span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br></pre></td></tr></table></figure><p>上述SDP片段表示将要发送视频的基本信息如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">仅发送一路视频，视频的基本信息参照a=rtpmap/a=rtcp-fb属性。</span><br><span class="line">cname为+T5LKYkAJtmH1euA(用于RTCP中)</span><br><span class="line">streamId和streamLabel是afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a, </span><br><span class="line">trackId和trackLabel是<span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7, </span><br><span class="line">发送的主RTP数据包ssrc是<span class="number">1424320061</span>，</span><br><span class="line">重传(NACK)RTP数据包的ssrc是<span class="number">772564596</span>，</span><br></pre></td></tr></table></figure><p>如果存在多组<code>a=ssrc-group:FID</code>相关数据(生成多个本地流并调用addStream添加进去)，则意味着将同时发送多路视频。</p><h4 id="2-SDP-Answer"><a href="#2-SDP-Answer" class="headerlink" title="2). SDP Answer"></a>2). SDP Answer</h4><p>从前部分Offer的示例中，根据当前设备能力和喜好选择所接收的能力列表(以H264为例)，回复的Answer如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">v=<span class="number">0</span></span><br><span class="line">o=- <span class="number">909859953</span> <span class="number">2</span> IN IP4 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">s=-</span><br><span class="line">t=<span class="number">0</span> <span class="number">0</span></span><br><span class="line">a=group:BUNDLE video data</span><br><span class="line">a=msid-semantic:WMS</span><br><span class="line"></span><br><span class="line">m=video <span class="number">1</span> UDP/TLS/RTP/SAVPF <span class="number">100</span> <span class="number">101</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=rtcp:<span class="number">1</span> IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:YyTaBDA/vFKmKipltm8SSnv4/Cg6IQoh<span class="number">-1</span></span><br><span class="line">a=ice-pwd:OdFkQMmoppx2pAYPCWdbCsYA</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> CC:<span class="number">0F</span>:BE:B4:<span class="number">1B</span>:<span class="number">5</span>E:A5:<span class="number">72</span>:B2:<span class="number">49</span>:<span class="number">80</span>:<span class="number">03</span>:<span class="number">54</span>:<span class="number">88</span>:<span class="number">27</span>:<span class="number">42</span>:<span class="number">84</span>:<span class="number">83</span>:<span class="number">6</span>C:F1:<span class="number">8</span>C:C9:<span class="number">23</span>:B3:<span class="number">6</span>C:<span class="number">98</span>:<span class="number">67</span>:<span class="number">87</span>:D8:AF:<span class="number">9</span>C:F4</span><br><span class="line">a=setup:passive</span><br><span class="line">a=mid:video</span><br><span class="line">a=sendrecv</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtpmap:<span class="number">100</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> goog-remb</span><br><span class="line">a=fmtp:<span class="number">100</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">42e01</span>f</span><br><span class="line">a=rtpmap:<span class="number">101</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">101</span> apt=<span class="number">100</span></span><br><span class="line">a=fmtp:<span class="number">100</span> x-google-start-bitrate=<span class="number">300</span></span><br><span class="line">a=fmtp:<span class="number">100</span> x-google-min-bitrate=<span class="number">80</span></span><br><span class="line">a=fmtp:<span class="number">100</span> x-google-max-bitrate=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">...&lt;&lt;webrtc_video_sending_sdp&gt;&gt;...</span><br><span class="line"></span><br><span class="line">m=application <span class="number">9</span> DTLS/SCTP <span class="number">5000</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:YyTaBDA/vFKmKipltm8SSnv4/Cg6IQoh<span class="number">-1</span></span><br><span class="line">a=ice-pwd:OdFkQMmoppx2pAYPCWdbCsYA</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> CC:<span class="number">0F</span>:BE:B4:<span class="number">1B</span>:<span class="number">5</span>E:A5:<span class="number">72</span>:B2:<span class="number">49</span>:<span class="number">80</span>:<span class="number">03</span>:<span class="number">54</span>:<span class="number">88</span>:<span class="number">27</span>:<span class="number">42</span>:<span class="number">84</span>:<span class="number">83</span>:<span class="number">6</span>C:F1:<span class="number">8</span>C:C9:<span class="number">23</span>:B3:<span class="number">6</span>C:<span class="number">98</span>:<span class="number">67</span>:<span class="number">87</span>:D8:AF:<span class="number">9</span>C:F4</span><br><span class="line">a=setup:passive</span><br><span class="line">a=mid:data</span><br><span class="line">a=sctpmap:<span class="number">5000</span> webrtc-datachannel <span class="number">1024</span></span><br></pre></td></tr></table></figure><p>如果当前设备也需要发送视频, 则在此处<code>webrtc_video_sending_sdp</code>添加发送视频的基本信息(调用addStream API添加视频后将会自动生成)，如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=ssrc-group:FID <span class="number">3405199308</span> <span class="number">3405199309</span></span><br><span class="line">a=ssrc:<span class="number">3405199308</span> cname:+T5LKYkAJtmH1eBB</span><br><span class="line">a=ssrc:<span class="number">3405199308</span> msid:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid <span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br><span class="line">a=ssrc:<span class="number">3405199308</span> mslabel:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid</span><br><span class="line">a=ssrc:<span class="number">3405199308</span> label:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> cname:+T5LKYkAJtmH1eBB</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> msid:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid <span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> mslabel:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> label:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br></pre></td></tr></table></figure><p>至此双方的Offer和Answer协商完毕，随后在stun连接成功后将发送/接收视频数据。</p><h4 id="c-注意事项"><a href="#c-注意事项" class="headerlink" title="c. 注意事项"></a>c. 注意事项</h4><p>在Chrome中如果同时发送多路视频，目前存在两种方式：</p><ul><li><p>多路视频方式(Multi-stream)  </p><ul><li>通过获取多个本地视频流并添加到RTCPeerConenction中(addStream)，createOffer将会自动在同一个<code>m=video</code>和<code>a=mid</code>下生成相应的<code>a=ssrc-group:FID</code>子项.  </li><li>获取多个视频流具有如下要求: 后续视频流宽高不能大于第一路视频流，并且第一路视频流是其它路视频流的整数倍(宽和高)。<br>也即是说,其它路视频流实际是第一路视频流的下采样子流。</li></ul></li><li><p>视频联播方式(Simulcast)<br>  最新版本Chrome支持Simulcast, 基本语法与多路视频流类似，具体方式如下:</p><ul><li>只需要调用一次addStream添加第一个视频流,</li><li>发送多路视频(N路)，则需在同一个<code>m=video</code>和<code>a=mid</code>下额外添加(N-1)个<code>a=ssrc-group:FID</code>子项（API不支持需手动修改SDP）,</li><li>添加一些simulcast辅助属性(参照下例),并调用setLocalDescription生效</li><li><p>多路视频中其它视频流的宽高与第一路视频流的关系，与Multi-stream一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=ssrc-group:FID 111 112</span><br><span class="line">...</span><br><span class="line">a=ssrc-group:FID 211 212</span><br><span class="line">...</span><br><span class="line">a=ssrc-group:SIM 111 211</span><br><span class="line">a=x-google-flag:conference</span><br></pre></td></tr></table></figure><p>注意：Simulcast仅支持VP8编码，对于VP9/H264将被自动降为一路视频(firefox类似)。</p></li></ul></li></ul><h3 id="3-Firefox-SDP"><a href="#3-Firefox-SDP" class="headerlink" title="3. Firefox SDP"></a>3. Firefox SDP</h3><h4 id="1-SDP-Offer-1"><a href="#1-SDP-Offer-1" class="headerlink" title="1). SDP Offer"></a>1). SDP Offer</h4><p>只发送一路视频且支持接收一路视频的示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">v=0</span><br><span class="line">o=mozilla...THIS_IS_SDPARTA-57.0.2 8160053667584719276 1 IN IP4 0.0.0.0</span><br><span class="line">s=-</span><br><span class="line">t=0 0</span><br><span class="line">a=sendrecv</span><br><span class="line">a=fingerprint:sha-256 2E:25:88:57:24:8E:54:31:94:59:FA:25:7E:0A:37:D8:48:B7:92:0E:C4:13:0F:AD:68:31:83:08:0A:01:CE:9B</span><br><span class="line">a=group:BUNDLE sdparta_0 sdparta_1</span><br><span class="line">a=ice-options:trickle</span><br><span class="line">a=msid-semantic:WMS *</span><br><span class="line"></span><br><span class="line">m=video 62739 UDP/TLS/RTP/SAVPF 126 121 120 97</span><br><span class="line">c=IN IP4 0.0.0.0</span><br><span class="line">a=sendrecv</span><br><span class="line">a=extmap:1 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time</span><br><span class="line">a=extmap:2 urn:ietf:params:rtp-hdrext:toffset</span><br><span class="line">a=fmtp:126 profile-level-id=42e01f;level-asymmetry-allowed=1;packetization-mode=1</span><br><span class="line">a=fmtp:97 profile-level-id=42e01f;level-asymmetry-allowed=1</span><br><span class="line">a=fmtp:121 max-fs=12288;max-fr=60</span><br><span class="line">a=fmtp:120 max-fs=12288;max-fr=60</span><br><span class="line">a=ice-pwd:588d6957e8e15f85dbdbb853825240c3</span><br><span class="line">a=ice-ufrag:419b2f0d</span><br><span class="line">a=mid:sdparta_0</span><br><span class="line">a=msid:&#123;454102ee-59c8-476d-b1e7-5428bb17a318&#125; &#123;b657b0be-8b2a-4321-8770-2526e16991ea&#125;</span><br><span class="line">a=rtcp-fb:126 nack</span><br><span class="line">a=rtcp-fb:126 nack pli</span><br><span class="line">a=rtcp-fb:126 ccm fir</span><br><span class="line">a=rtcp-fb:126 goog-remb</span><br><span class="line">a=rtcp-fb:121 nack</span><br><span class="line">a=rtcp-fb:121 nack pli</span><br><span class="line">a=rtcp-fb:121 ccm fir</span><br><span class="line">a=rtcp-fb:121 goog-remb</span><br><span class="line">a=rtcp-fb:120 nack</span><br><span class="line">a=rtcp-fb:120 nack pli</span><br><span class="line">a=rtcp-fb:120 ccm fir</span><br><span class="line">a=rtcp-fb:120 goog-remb</span><br><span class="line">a=rtcp-fb:97 nack</span><br><span class="line">a=rtcp-fb:97 nack pli</span><br><span class="line">a=rtcp-fb:97 ccm fir</span><br><span class="line">a=rtcp-fb:97 goog-remb</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtpmap:126 H264/90000</span><br><span class="line">a=rtpmap:121 VP9/90000</span><br><span class="line">a=rtpmap:120 VP8/90000</span><br><span class="line">a=rtpmap:97 H264/90000</span><br><span class="line">a=setup:actpass</span><br><span class="line">a=ssrc:2639986493 cname:&#123;dc684271-f581-421e-aaed-2a2fb69b2e27&#125;</span><br><span class="line"></span><br><span class="line">m=application 62739 DTLS/SCTP 5000</span><br><span class="line">c=IN IP4 0.0.0.0</span><br><span class="line">a=sendrecv</span><br><span class="line">a=ice-pwd:588d6957e8e15f85dbdbb853825240c3</span><br><span class="line">a=ice-ufrag:419b2f0d</span><br><span class="line">a=mid:sdparta_1</span><br><span class="line">a=sctpmap:5000 webrtc-datachannel 256</span><br><span class="line">a=setup:actpass</span><br><span class="line">a=max-message-size:1073741823</span><br></pre></td></tr></table></figure><p>从该sdp中可以知道如下信息:   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cname为dc684271-f581-421e-aaed-2a2fb69b2e27.</span><br><span class="line">支持的视频编码为H264/VP9/VP8，通过rtpmap payload区分,</span><br><span class="line">发送视频RTP数据ssrc为2639986493，</span><br><span class="line">发送视频streamId为454102ee-59c8-476d-b1e7-5428bb17a318,</span><br><span class="line">发送视频trackId为b657b0be-8b2a-4321-8770-2526e16991ea,</span><br></pre></td></tr></table></figure><h4 id="2-SDP-Answer-1"><a href="#2-SDP-Answer-1" class="headerlink" title="2). SDP Answer"></a>2). SDP Answer</h4><p>只接收一路且不发送视频(选择H264编码)的Answer格式如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">v=<span class="number">0</span></span><br><span class="line">o=- <span class="number">909859953</span> <span class="number">2</span> IN IP4 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">s=-</span><br><span class="line">t=<span class="number">0</span> <span class="number">0</span></span><br><span class="line">a=sendrecv</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> B6:<span class="number">51</span>:<span class="number">99</span>:A3:<span class="number">14</span>:B9:E5:AC:<span class="number">98</span>:<span class="number">9</span>C:D1:<span class="number">2</span>C:B5:<span class="number">96</span>:<span class="number">18</span>:FA:<span class="number">01</span>:<span class="number">4</span>A:C0:<span class="number">12</span>:<span class="number">39</span>:<span class="number">32</span>:EB:D9:AC:CB:<span class="number">0</span>D:<span class="number">16</span>:<span class="number">5F</span>:<span class="number">09</span>:<span class="number">3F</span>:EF</span><br><span class="line">a=group:BUNDLE sdparta_0 sdparta_1</span><br><span class="line">a=msid-semantic:WMS</span><br><span class="line"></span><br><span class="line">m=video <span class="number">1</span> UDP/TLS/RTP/SAVPF <span class="number">126</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=fmtp:<span class="number">126</span> profile-level-id=<span class="number">42e01</span>f;level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span></span><br><span class="line">a=ice-pwd:Mxm8W16Cojz6ViZ1xriFr0fE</span><br><span class="line">a=ice-ufrag:jvhy0bTdQQ7XxaxxFCpIIh/<span class="number">6</span>QKwSv7qL<span class="number">-0</span></span><br><span class="line">a=mid:sdparta_0</span><br><span class="line">a=rtcp:<span class="number">1</span> IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=rtcp-fb:<span class="number">126</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">126</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">126</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">126</span> goog-remb</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtpmap:<span class="number">126</span> H264/<span class="number">90000</span></span><br><span class="line">a=setup:passive</span><br><span class="line"></span><br><span class="line">m=application <span class="number">9</span> DTLS/SCTP <span class="number">5000</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=sendrecv</span><br><span class="line">a=ice-pwd:Mxm8W16Cojz6ViZ1xriFr0fE</span><br><span class="line">a=ice-ufrag:jvhy0bTdQQ7XxaxxFCpIIh/<span class="number">6</span>QKwSv7qL<span class="number">-0</span></span><br><span class="line">a=mid:sdparta_1</span><br><span class="line">a=sctpmap:<span class="number">5000</span> webrtc-datachannel <span class="number">256</span></span><br><span class="line">a=setup:passive</span><br></pre></td></tr></table></figure><p>如果当前接收一路视频且需要发送一路视频，则需要添加发送信息(格式与offer类似)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=msid:&#123;54b40235-260b-4f6b-96cf-e72940e4ea9d_streamid&#125; &#123;54b40235-260b-4f6b-96cf-e72940e4ea9d_trackid&#125; </span><br><span class="line">...</span><br><span class="line">a=ssrc:1287668962 cname:&#123;+T5LKYkAJtmH1eBB&#125;</span><br></pre></td></tr></table></figure><h4 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3). 注意事项"></a>3). 注意事项</h4><p>如果同时发送多路视频，Firefox也存在两种方式：</p><ul><li><p>多路视频方式(Multi-stream)</p><ul><li>Firefox将会添加新的<code>m=video</code>和<code>a=mid</code>并在其中添加<code>a=ssrc:...</code>子项。</li><li>其它与Chrome中类似。</li></ul></li><li><p>视频联播方式(Simulcast)<br>  Firefox支持使用API(rid)设置Simulcast属性，只支持VP8编码。<br>  通过rid属性标识多组流(rtp扩展头也将带有这个属性).</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var videoSender = RTCPeerConnection.getSenders()[0];</span><br><span class="line">videoSender.setParameters(&#123;encodings: [</span><br><span class="line">&#123; rid: &quot;r0&quot;, active: true, priority: &quot;low&quot; &#125;,</span><br><span class="line">&#123; rid: &quot;r1&quot;, active: true, priority: &quot;high&quot; &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">&gt;&gt;offer格式</span><br><span class="line">a=rid:r0 send</span><br><span class="line">a=rid:r1 send</span><br><span class="line">a=simulcast: send rid=r0;r1</span><br><span class="line"></span><br><span class="line">&gt;&gt;answer格式:</span><br><span class="line">a=rid:r0 recv</span><br><span class="line">a=rid:r1 recv</span><br><span class="line">a=simulcast: recv rid=r0;r1</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;1-SDP介绍&quot;&gt;&lt;a href=&quot;#1-SDP介绍&quot; class=&quot;headerlink&quot; title=&quot;1. SDP介绍&quot;&gt;&lt;/a&gt;1. SDP介绍&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebRTC实时通信 (1) - 架构</title>
    <link href="http://zenvv.com/2018/01/28/webrtc-arch/"/>
    <id>http://zenvv.com/2018/01/28/webrtc-arch/</id>
    <published>2018-01-28T12:01:16.000Z</published>
    <updated>2018-04-08T06:50:13.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>实时通信，最常见例子是个人电话，可以称之为Peer模式。而在企业组织等群体性的通信中(同时多人参与通信)，电话会议是更加有效的一种交流方式，这种模式叫做Server模式。</p><p>无论是Peer或是Server模式，信令传递通道(Signal)都是不可缺少，用于建立数据通道。在WebRTC实时通信这个范畴中，Peer和Server模式的主要不同在于的数据通道的不同。</p><h3 id="1-信令通道"><a href="#1-信令通道" class="headerlink" title="1. 信令通道"></a>1. 信令通道</h3><figure class="highlight plain"><figcaption><span>|Peer-A| <-> |Signal Server| <-> |Peer-B| ```</-></-></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">节点A与B之间需要相互传递一系列信息，才能建立通信，基本流程如下:</span><br><span class="line"></span><br><span class="line">首先, 用户A和B需要到Signal Server注册自己的地址等信息，以便Signal Server随时找到自己。  </span><br><span class="line">其次，用户A需要与B通信，将该请求通过Signal Server发送到B;B决定是否接受该请求。  </span><br><span class="line">最后，信令通道建立成功。</span><br><span class="line"></span><br><span class="line">针对webrtc通信，信令通道除了一些日常的用户行为管理功能之外，还需要传递SDP offer/answer/ICE candidate等数据。</span><br><span class="line"></span><br><span class="line">目前Signal通道采用最流行的协议是SIP协议, 不仅能够满足WebRTC的所有基本需求，而且能够非常好的兼容第三方产品(这对企业应用尤为的重要)。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2. 对等模式</span><br><span class="line"></span><br><span class="line">```|Peer-A| &lt;-&gt;  ..data.. &lt;-&gt; |Peer-B|</span><br></pre></td></tr></table></figure><p>信令通道主要用来传递SDP信息(offer/answer/ICE candidate)以及用户的管理功能。</p><p>当STUN/TURN连接成功后，WebRTC模块将开始建立数据通道用于音视频等数据的传输。</p><p>为了与其他产品的互联，WebRTC信令通道大多采取sip协议。</p><p>附注： Chrome代码中提供的示例是通过HTTP协议作为信令通道的。</p><h3 id="3-中心模式"><a href="#3-中心模式" class="headerlink" title="3. 中心模式"></a>3. 中心模式</h3><p><code>|Peer-A| &lt;-&gt; |data server| &lt;-&gt; |Peer-B|</code></p><p>当用户同时与多个用户进行通信时，Peer模式有其巨大的局限性：需要同时建立多个不同的WebRTC实例。故而在实际的产品中是以中心模式为主的，此类开源产品主要有Kurento/Janus.</p><h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4. 解决方案"></a>4. 解决方案</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;实时通信，最常见例子是个人电话，可以称之为Peer模式。而在企业组织等群体性的通信中(同时多人参与通信)，电话会议是更加有效的一种交流方式，这种模式叫做Server模式。&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebRTC实时通信 (0) - 浏览器</title>
    <link href="http://zenvv.com/2018/01/28/webrtc-browser/"/>
    <id>http://zenvv.com/2018/01/28/webrtc-browser/</id>
    <published>2018-01-28T11:18:42.000Z</published>
    <updated>2018-04-08T06:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="1-WebRTC"><a href="#1-WebRTC" class="headerlink" title="1. WebRTC"></a>1. WebRTC</h3><p>在2011年之前，实时音视频的开发具有非常大的门槛，全球仅有很少的几家公司拥有这种技术。随着互联网的发展及其实时音视频需求的增大，一种更为简易的开发方式便顺势而出 - WebRTC。</p><p>WebRTC(Web Real-Time Communications)是基于Web的一种实时通信技术平台，即在浏览器节点间进行彼此音频，视频和消息等数据的交互。</p><p>WebRTC通过Web方式对音视频应用进行开发，大大简化了开发难度并进一步推动了音视频应用的普及。</p><p>当前,几家主流的浏览器均已经支持WebRTC技术，如Microsoft Edge/Apple Safari-11/Google Chrome/Mozilla Firefox等。<br>其中，Edge和Safari距离实际使用仍然存在较大的差距，这里将仅叙述具有代表性的Chrome和Firefox。</p><h3 id="2-音视频特性"><a href="#2-音视频特性" class="headerlink" title="2. 音视频特性"></a>2. 音视频特性</h3><p>对基本audio/video特性的支持如下。</p><table><thead><tr><th>Browser</th><th>Audio</th><th>Video</th><th>Video Simulcast</th><th>Video MultiStream</th></tr></thead><tbody><tr><td>Chrome</td><td>opus/DTMF</td><td>H264/VP8</td><td>VP8-only</td><td>H264/VP8</td></tr><tr><td>Firefox</td><td>opus/DTMF</td><td>H264/VP8</td><td>VP8-only</td><td>H264/VP8</td></tr></tbody></table><p>对RTCP特性支持如下:</p><table><thead><tr><th>Browser</th><th>RTCP PLI</th><th>RTCP NACK</th><th>RTCP REMB</th><th>ulpfec</th></tr></thead><tbody><tr><td>Chrome</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>Firefox</td><td>yes</td><td>no</td><td>yes</td><td>yes</td></tr></tbody></table><h3 id="3-API介绍"><a href="#3-API介绍" class="headerlink" title="3. API介绍"></a>3. API介绍</h3><h5 id="1-getUserMedia"><a href="#1-getUserMedia" class="headerlink" title="1). getUserMedia"></a>1). getUserMedia</h5><p>支持webrtc的浏览器都有类似Navigator.getUserMedia这样的API, 用于获取当前系统的设备资源，如Speaker/Micphone/Camera/DesktopSharing等.</p><p>最新标准中已经废弃使用navigator.getUserMedia，推荐navigator.mediaDevices.getUserMedia.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">navigator.getUserMedia = navigator.getUserMedia ||</span><br><span class="line">                         navigator.webkitGetUserMedia ||  <span class="comment">// chrome</span></span><br><span class="line">                         navigator.mozGetUserMedia;       <span class="comment">// firefox</span></span><br><span class="line"><span class="keyword">if</span> (navigator.getUserMedia) &#123;</span><br><span class="line"><span class="keyword">var</span> constraints = &#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: &#123; <span class="attr">width</span>: <span class="number">1280</span>, <span class="attr">height</span>: <span class="number">720</span> &#125; &#125;; </span><br><span class="line">   navigator.getUserMedia(constraints&#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">'video-element-id'</span>);</span><br><span class="line">         video.srcObject = stream;</span><br><span class="line">         video.onloadedmetadata = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">           video.play();</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"The following error occurred: "</span> + err.name);</span><br><span class="line">      &#125;</span><br><span class="line">   );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"getUserMedia not supported"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-RTCPeerConnection"><a href="#2-RTCPeerConnection" class="headerlink" title="2). RTCPeerConnection"></a>2). RTCPeerConnection</h5><p>RTCPeerConnection是Webrtc最基本的API接口，用于管理媒体属性，并与远程节点建立数据连接。<br>RTCPeerConnection基本的媒体单位是MediaStream(最新标准中推荐使用MediaTrack).</p><p>在媒体数据连接之外，RTCPeerConnection还支持在相同的连接上管理创建数据通道(createDataChannel),用于传输一些带外数据（如媒体控制数据）.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RTCPeerConnection():</span><br><span class="line">addIceCandidate()</span><br><span class="line">addStream()</span><br><span class="line">addTrack()</span><br><span class="line">createDataChannel() </span><br><span class="line">createOffer()</span><br><span class="line">setLocalDescription()</span><br><span class="line">setRemoteDescription()</span><br><span class="line">onAddStream()</span><br><span class="line">getSenders()</span><br></pre></td></tr></table></figure><h3 id="4-API使用示例"><a href="#4-API使用示例" class="headerlink" title="4. API使用示例"></a>4. API使用示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A发送视频，B观看视频.</span><br><span class="line">A和B注册建立signal通道(能够彼此互相通信)。</span><br><span class="line">A创建RTCPeerConnection对象(A-pc).</span><br><span class="line">B创建RTCPeerConnection对象(B-pc).</span><br></pre></td></tr></table></figure><h5 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1). 准备阶段"></a>1). 准备阶段</h5><p>Step1: A发送视频</p><blockquote><p>调用getUserMedia获取本地视频流添加到A-pc中(addStream)。<br>调用createOffer()生成A-sdp-offer.<br>调用setLocalDescription设置A-sdp-offer.<br>通过signal通道将A-sdp-offer发送给B.</p></blockquote><p>Step2: B观看视频<br>&gt;<br>调用createOffer()生成B-sdp-offer.<br>调用setLocalDescription设置B-sdp-offer.<br>通过signal通道将B-sdp-offer发送给A.  </p><h5 id="2-交互阶段"><a href="#2-交互阶段" class="headerlink" title="2). 交互阶段"></a>2). 交互阶段</h5><p>&gt;<br>A调用setRemoteDescription()设置收到的B-sdp-offer.<br>B调用setRemoteDescription()设置收到的A-sdp-offer.<br>随后A与B交互彼此的SDP ICE candidate数据直到ice stun/turn连接成功。<br>   (调用addIceCandidate()处理ICE sdp消息).<br>ICE连接成功后B将会收到onAddStream事件 - 远程stream建立成功.</p><h5 id="3-媒体数据互通"><a href="#3-媒体数据互通" class="headerlink" title="3). 媒体数据互通"></a>3). 媒体数据互通</h5><p>&gt;<br>A发送视频数据，B接收视频数据并解码</p><h3 id="5-现状"><a href="#5-现状" class="headerlink" title="5. 现状"></a>5. 现状</h3><p>目前，WebRTC的标准仍在持续改进中，各个厂商的浏览器对其支持的力度也不尽相同。其中，Chrome对最新标准API的支持较为迟缓，Firefox比较积极但不够稳定成熟。</p><p>总体上，开放的API接口对基本功能的支持已经覆盖，但是对更精细的控制不足以及也缺少相应的文档说明，故而在实际使用中需要研究浏览器代码逻辑和修改SDP属性来达到某些具体的需求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;1-WebRTC&quot;&gt;&lt;a href=&quot;#1-WebRTC&quot; class=&quot;headerlink&quot; title=&quot;1. WebRTC&quot;&gt;&lt;/a&gt;1. WebRTC&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tomcat-cyclic</title>
    <link href="http://zenvv.com/2016/07/04/tomcat-cyclic/"/>
    <id>http://zenvv.com/2016/07/04/tomcat-cyclic/</id>
    <published>2016-07-04T07:46:02.000Z</published>
    <updated>2018-01-28T02:20:56.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>tomcat启动加载web容器过程中产生异常(非必现情况)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Unable to complete the scan for annotations for web application [/website] due to a StackOverflowError. Possible root causes include a too low setting for -Xss and illegal cyclic inheritance dependencies. The class hierarchy being processed was [org.bouncycastle.asn1.ASN1EncodableVector-&gt;org.bouncycastle.asn1.DEREncodableVector-&gt;org.bouncycastle.asn1.ASN1EncodableVector]</span><br></pre></td></tr></table></figure><p>log提示中可能存在两个原因:<br>1) -Xss过小导致栈溢出<br>2) 错误的循环依赖  </p><p>若通过调整-Xss参数进行测试, 发现大多数情况下都可以正常启动.<br>但根源却不在于-Xss参数, 另外tomcat8官方文档中已经明确说明-Xss已经desperated, 其值可以根据实际运行自动调整.</p><p>即是说该问题并非是由于-Xss过小导致溢出, 而是由于illegal cyclic inheritance dependencies.</p><p>通常, 这是由于pom.xml的jar包依赖树中, 可能存在如下情况之一:<br>1) 依赖同一个jar包的多个版本库<br>2) 存在循环依赖.  </p><p>具体, 通过mvn dependency:tree检测当前项目的依赖情况, 在存在上述情况的包引入中添加exclude语句, 去掉重复的jar包, 即可从根本上解决问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;tomcat启动加载web容器过程中产生异常(非必现情况)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg-usage</title>
    <link href="http://zenvv.com/2016/07/04/ffmpeg-usage/"/>
    <id>http://zenvv.com/2016/07/04/ffmpeg-usage/</id>
    <published>2016-07-04T07:46:00.000Z</published>
    <updated>2018-01-28T02:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="ffmpeg常用命令参数"><a href="#ffmpeg常用命令参数" class="headerlink" title="ffmpeg常用命令参数"></a>ffmpeg常用命令参数</h1><h2 id="devices"><a href="#devices" class="headerlink" title="devices"></a>devices</h2><p>show system devices/codecs/..</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -devices  </span><br><span class="line">ffmpeg -devices true -f dshow -i dummy  </span><br><span class="line">ffmpeg -encoders  </span><br><span class="line">ffmpeg -decoders</span><br><span class="line"></span><br><span class="line"># read audio/video data from device  </span><br><span class="line">ffmpeg -f dshow -i video=&quot;Integrated Camera&quot; -f dshow -i audio=&quot;..&quot;  </span><br><span class="line">ffmpeg -f video4linux2 -i /dev/video0</span><br></pre></td></tr></table></figure><h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>video encoder</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c:v libx264 -v profile baseline -s 640x480 -b:v 512k -g 12</span><br></pre></td></tr></table></figure><p>-c:v:                      codec of video<br>-b:v bitrate:              bitrate of video(-b)<br>-s size:                  frame size(WxH)<br>-r rate:                frame rate(HZ, e.g. 90000)<br>-g size:                 gop size(default 12)<br>-aspect aspect:            aspect ratio (4:3, 16:9 or 1.3333, 1.7777)<br>-v profile baseline:      codec profile<br>-keyint_min <int>:        minimum interval between IDR-frames(default 25)<br>-force_key_frames timestamps:  force key frames at timestamps, e.g. -force_key_frames 0,2,4,6,8<br>-vn:                    diasbale video</int></p><p>if issues happen as below:<br>1). “ffmpeg Past duration 0.999992 too large”<br>due to uncertain framerates, fix it by setting -filter:v fps=(your framerate).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-filter:v fps=20</span><br></pre></td></tr></table></figure></p><p>2). “[video input] too full or near too full”<br>This is because h264 encoder requires yuv420 input<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-pix_fmt yuv420p</span><br></pre></td></tr></table></figure></p><h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c:a aac -ar 44100 -ac 1 -ab 64k -strict -2 -f flv rtmp://localhost/hls/test</span><br></pre></td></tr></table></figure><p>-c:a codec:              codec of audio<br>-b:a bitrate:            audio bitrate(-ab)<br>-ar rate:                audio sampling rate(HZ, default 0)<br>-ac channels:            audio channels(default 0)<br>-f fmt:                    force format<br>-an:                    disable audio</p><h2 id="outputs"><a href="#outputs" class="headerlink" title="outputs"></a>outputs</h2><p>duplicate outputs. One to file, second to nginx-rtmp.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input1 -i input2 </span><br><span class="line">-acodec … -vcodec … output1 </span><br><span class="line">-acodec … -vcodec … output2 </span><br><span class="line">-acodec … -vcodec … output3</span><br><span class="line">    </span><br><span class="line">ffmpeg -i input </span><br><span class="line">-s 1280x720 -acodec … -vcodec … output1 </span><br><span class="line">-s 640x480  -acodec … -vcodec … output2 </span><br><span class="line">-s 320x240  -acodec … -vcodec … output3</span><br></pre></td></tr></table></figure></p><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><p>ffmpeg examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i test.mp4 -c copy -f flv rtmp://localhost/hls/test0  </span><br><span class="line">ffmpeg -re -i test.mp4 </span><br><span class="line">-pix_fmt yuv420p -c:v libx264 -vprofile baseline </span><br><span class="line">-c:a aac -ar 44100 -ac 1 -strict -2 </span><br><span class="line">-f flv rtmp://localhost/hls/test1 </span><br><span class="line">ffmpeg -f dshow -i video=&quot;Integrated Camera&quot; -f dshow -i audio=&quot;Audio&quot; </span><br><span class="line">    -pix_fmt yuv420p -c:v libx264 -vprofile baseline -s 640x480 -b:v 512k -filter:v fps=20 -g 10 </span><br><span class="line">-c:a aac -ar 44100 -ac 1 -b:a 64k -strict -2 </span><br><span class="line">-f flv rtmp://localhost/hls/test2</span><br></pre></td></tr></table></figure></p><p>ffplay examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffplay -fflags nobuffer rtmp://localhost/hls/mystream -loglevel verbose  </span><br><span class="line">ffplay -live_start_index -1 hls://localhost/app/mystream.m3u8</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;ffmpeg常用命令参数&quot;&gt;&lt;a href=&quot;#ffmpeg常用命令参数&quot; class=&quot;headerlink&quot; title=&quot;ffmpeg常用命令参数&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jenkins工具</title>
    <link href="http://zenvv.com/2016/06/05/jenkins-by-talk/"/>
    <id>http://zenvv.com/2016/06/05/jenkins-by-talk/</id>
    <published>2016-06-05T03:21:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天介绍一个强大的工具 - jenkins, 其本身是一种CI&amp;CD平台, 具有设计合理简洁等优点.  </p><p>jenkins具有的几个基本特点:</p><p>a. 既有内建账户管理模式, 也支持ldap系统.<br>b. 支持多种操作系统: linux/windows/…<br>c. 支持多种内建脚本语言: grovvy/python/shell/bat.<br>d. 支持单机模式, master/slave模式和cluster模式.<br>e. 拥有丰富的扩展插件.  </p><p>除了其本职功能之外, jenkins容易将传统的后台模式转为前台可视化, 方面用户的使用.<br>可以适用于如下几种应用场景中:   </p><p>a. 普通调度任务, 如周期性和触发任务<br>b. 制造业的自动化调度任务<br>c. 各种系统及服务的状态监控  </p><p>采用docker方式安装使用jenkins非常简单, 如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins</span><br><span class="line">docker run -d -it -p 8080:8080 -e JAVA_OPTS=&quot;-Duser.timezone=Asia/Shanghai&quot; jenkins</span><br></pre></td></tr></table></figure></p><p>然后即可以通过浏览器访问<code>http://ip:8080/</code>进行登录使用.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;今天介绍一个强大的工具 - jenkins, 其本身是一种CI&amp;amp;CD平台, 具有设计合理简洁等优点.  &lt;/p&gt;
&lt;p&gt;jenkins具有的几个基本特点:&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx的core模块</title>
    <link href="http://zenvv.com/2016/05/28/nginx-core/"/>
    <id>http://zenvv.com/2016/05/28/nginx-core/</id>
    <published>2016-05-28T07:42:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>ngx_http_core_module提供了nginx最基本的功能, 包括一些内置变量和配置文件中的基本指令.</p><h4 id="1-常见内置变量"><a href="#1-常见内置变量" class="headerlink" title="1. 常见内置变量"></a>1. 常见内置变量</h4><p>1) uri相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$uri: 当前请求uri  </span><br><span class="line">$document_uri: 同$uri  </span><br><span class="line">$request_uri: 原始完整请求URI(带参数)   </span><br><span class="line">$scheme: 请求scheme, “http” or “https”  </span><br><span class="line">$https: 如果处于ssl模式则值为“on”, 否则为空  </span><br><span class="line">$host: 请求的server地址, 具体见下面的描述  </span><br><span class="line">$cookie_name: cookie名</span><br></pre></td></tr></table></figure></p><p>其中, nginx rewrite模块是基于内置变量$request_uri进行处理的.</p><p>2) remote请求相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$remote_addr: 客户端地址  </span><br><span class="line">$remote_port: 客户端端口  </span><br><span class="line">$remote_user: Basic认证中的用户名     </span><br><span class="line">$request: 原始完整请求URI  </span><br><span class="line">$request_body: request body</span><br><span class="line">$is_args: 如果有参数值为&quot;?&quot;, 否则为空  </span><br><span class="line">$args: 请求uri中的参数(?后的部分)  </span><br><span class="line">$query_string: 同$args</span><br></pre></td></tr></table></figure></p><p>3) server相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$server_addr: 接收请求的server地址  </span><br><span class="line">$server_name: 接收请求的server名字    </span><br><span class="line">$server_port: 接收请求的server端口    </span><br><span class="line">$server_protocol: 请求协议, “HTTP/1.0”, “HTTP/1.1”, 或 “HTTP/2.0”</span><br></pre></td></tr></table></figure></p><p>4) 其它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$hostname: nginx主机名      </span><br><span class="line">$limit_rate: 限速   </span><br><span class="line">$nginx_version: nginx版本</span><br></pre></td></tr></table></figure></p><h4 id="2-host与-http-host"><a href="#2-host与-http-host" class="headerlink" title="2. $host与$http_host"></a>2. $host与$http_host</h4><p>$http_host是对应http请求头的Host完整值.<br>$host是可能是以下几种情形中的一种(按顺序处理):<br>　　a. http请求url中的host name,<br>　　b. http请求header中的Host部分值(除去port),<br>　　c. 处理该请求server{}中的server_name.</p><h4 id="3-location指令"><a href="#3-location指令" class="headerlink" title="3. location指令"></a>3. location指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>可以被用在server/location等指令语句中.<br>location有两种匹配模式: prefix匹配(location uri)或者正则匹配.<br>nginx首先处理prefix匹配(无论配置文件中的顺序), 然后进行正则匹配.  </p><p>匹配规则的含义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;:  前缀部分匹配  </span><br><span class="line">“=”: 精确完整匹配, 成功则停止其它匹配处理   </span><br><span class="line">&quot;~&quot;: 大小写敏感匹配  </span><br><span class="line">&quot;~*&quot;: 大小写无关匹配  </span><br><span class="line">&quot;^~&quot;: 最长大小写敏感匹配, 匹配成功则不检查其它正则.</span><br></pre></td></tr></table></figure></p><p>“location @..”是定义一个命名location, 通常用于请求重定向.</p><h4 id="4-error-page指令"><a href="#4-error-page指令" class="headerlink" title="4. error_page指令"></a>4. error_page指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page code ... [=[response]] uri;</span><br></pre></td></tr></table></figure><p>可以被用在http/server/location/if等指令语句中.</p><p>使用内部请求处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_page 404             /404.html;</span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line">error_page 404 =200        /empty.gif;</span><br><span class="line">error_page 404 =           /404.php;</span><br></pre></td></tr></table></figure></p><p>使用重定向进行处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_page 403             http://example.com/forbidden.html;</span><br><span class="line">error_page 404 =301        http://example.com/notfound.html;</span><br></pre></td></tr></table></figure></p><p>使用命名location进行处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    error_page 404 = @fallback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location @fallback &#123;</span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;ngx_http_core_module提供了nginx最基本的功能, 包括一些内置变量和配置文件中的基本指令.&lt;/p&gt;
&lt;h4 id=&quot;1-常见内置变量&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://zenvv.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx的rewrite模块</title>
    <link href="http://zenvv.com/2016/05/26/nginx-rewrite/"/>
    <id>http://zenvv.com/2016/05/26/nginx-rewrite/</id>
    <published>2016-05-26T06:50:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>ngx_http_rewrite_module是通过对内置变量$request_uri进行正则处理, 改写用户请求的uri, 包括多条常用的指令如break/if/return/rewrite等.</p><h5 id="1-break指令"><a href="#1-break指令" class="headerlink" title="1. break指令"></a>1. break指令</h5><p>停止当前request_uri的后续rewrite规则处理.<br>可以在server/location/if等指令中使用.</p><h5 id="2-if指令"><a href="#2-if指令" class="headerlink" title="2. if指令"></a>2. if指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (condition) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">condition:</span><br><span class="line">a. 变量名: 空字符串或&quot;0&quot;则为false, 否则为true</span><br><span class="line">    b. 字符串变量比较:  “=”和“!=” </span><br><span class="line">    c. 正则匹配: </span><br><span class="line">    “~”(“!~”)        - 大小写敏感字符串比较</span><br><span class="line">        “~*”(“!~*”)      - 大小写无关字符串比较</span><br><span class="line">        “-f”(“!-f”)      - 检测文件是否存在</span><br><span class="line">        “-d”(“!-d”)      - 检测文件夹是否存在</span><br><span class="line">        “-e”(“!-e”)      - 检测文件/文件夹/符号连接是否存在</span><br><span class="line">        “-x”(“!-x”)      - 检测文件是否可执行</span><br></pre></td></tr></table></figure><p>可以在server/location等指令中使用.</p><h5 id="3-return指令"><a href="#3-return指令" class="headerlink" title="3. return指令"></a>3. return指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return code [text];</span><br><span class="line">return code URL;</span><br><span class="line">return URL;</span><br></pre></td></tr></table></figure><p>停止后续所有处理返回code给client端, 注意return 444将关闭连接不返回任何数据.<br>可以在server/location/if等指令中使用.</p><p>通过return将http重定向到https, 有两种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># server_name is customed by user in server.</span><br><span class="line">return    301 https://$server_name$request_uri;</span><br><span class="line"># http_host is a embedded variable in nginx.</span><br><span class="line">return    301 https://$http_host$request_uri;</span><br></pre></td></tr></table></figure></p><h5 id="4-rewrite指令"><a href="#4-rewrite指令" class="headerlink" title="4. rewrite指令"></a>4. rewrite指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure><p>可以在server/location/if等指令中使用.<br>rewrite按照在配置文件中出现的顺序进行处理, 具体行为由flag决定.<br>但是如果某个replacement值由<a href="http://(https://)开头" target="_blank" rel="noopener">http://(https://)开头</a>, 则停止处理返回给client.  </p><p>四种flag作用:<br>last: 停止当前rewirte模块后续规则处理.<br>　　将修改后的url重新按照location规则进行匹配处理.<br>　　即是说(rewrite .. last)在location{}中可能被循环处理, 而在server{}中不会.<br>　　循环次数超过10次则停止处理并返回500错误.<br>break: 与上面的break指令一样.<br>redirect: 返回一个临时302重定向.<br>permanent: 返回一个永久301重定向.  </p><p>例如给请求url添加前缀prefix:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ^~ / &#123;</span><br><span class="line">        if ($request_uri !~ ^/prefix) &#123;</span><br><span class="line">            rewrite ^(.*)$ /prefix/$1 break;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-rewrite-log指令"><a href="#5-rewrite-log指令" class="headerlink" title="5. rewrite_log指令"></a>5. rewrite_log指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite_log on | off;</span><br></pre></td></tr></table></figure><p>可以在http/server/location/if等指令中使用.<br>启动rewrite log(写到文件error_log), 日志级别为notice.  </p><h5 id="6-set指令"><a href="#6-set指令" class="headerlink" title="6. set指令"></a>6. set指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set $variable value;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;ngx_http_rewrite_module是通过对内置变量$request_uri进行正则处理, 改写用户请求的uri, 包括多条常用的指令如break/if/retur
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://zenvv.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>视频编码的颜色空间</title>
    <link href="http://zenvv.com/2016/05/24/video-colorspace/"/>
    <id>http://zenvv.com/2016/05/24/video-colorspace/</id>
    <published>2016-05-24T00:18:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>简单来说，视频编解码即是对构成图像的颜色进行处理，减少表达颜色效果所需要的比特数。<br>颜色效果是由颜色空间(colorspace)来表达，在视频编解码中常用的有两种: RGB和YUV。</p><h3 id="1-RGB和YUV"><a href="#1-RGB和YUV" class="headerlink" title="1. RGB和YUV"></a>1. RGB和YUV</h3><p>RGB即三基色(红绿蓝)，是日常生活中使用的一种表达方式。<br>三种基色的地位基本平等，在计算机里也基本由同样bit数来表达(当然也存在类似RGB565的)。  </p><p>而YUV是根据人眼视觉系统的特性而定义的一种颜色空间。<br>其基本理论是：人眼对亮度信息比色度和饱和度更为敏感。<br>因而可以通过对亮度信息分配更多的bit并减少饱和度bit数，从整体上减少bit数而不减弱观看效果，起到压缩效果。</p><p>YUV常见的格式有: I420, YV12, NV12, NV21, 其像素排布如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I420:   (1Y) + (1/4U) + (1/4V), | Y...Y | U..U | V..V |</span><br><span class="line">YV12:   (1Y) + (1/4U) + (1/4V), | Y...Y | V..V | U..U |</span><br><span class="line">NV12:   (1Y) + (1/4U) + (1/4V), | Y...Y | UVUV.. |</span><br><span class="line">NV21:   (1Y) + (1/4U) + (1/4V), | Y...Y | VUVU.. |</span><br></pre></td></tr></table></figure><h3 id="2-YUV内存分布"><a href="#2-YUV内存分布" class="headerlink" title="2. YUV内存分布"></a>2. YUV内存分布</h3><p><img src="https://github.com/PeterXu/wiki-streaming/raw/master/trunk/res/colorspace_data.png" alt="YUV_DATA"></p><h3 id="3-YUV转换示例"><a href="#3-YUV转换示例" class="headerlink" title="3. YUV转换示例"></a>3. YUV转换示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># color convert</span><br><span class="line">void convert_nv21_to_i420(const char *src, char *dst, int stride, int height)</span><br><span class="line">&#123;</span><br><span class="line">    int ysize = stride * height;</span><br><span class="line">    int usize = ysize / 4;</span><br><span class="line"></span><br><span class="line">    char *udst = dst + ysize;</span><br><span class="line">    char *vdst = dst + ysize + usize;</span><br><span class="line"></span><br><span class="line">    const char *vusrc = src + ysize;</span><br><span class="line"></span><br><span class="line">    /* copy y color */</span><br><span class="line">    memcpy(dst, src, ysize);</span><br><span class="line"></span><br><span class="line">    /* copy u and v color */</span><br><span class="line">    for (int i=0; i &lt; usize; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        udst[i] = vusrc[i*2+1];</span><br><span class="line">        vdst[i] = vusrc[i*2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;简单来说，视频编解码即是对构成图像的颜色进行处理，减少表达颜色效果所需要的比特数。&lt;br&gt;颜色效果是由颜色空间(colorspace)来表达，在视频编解码中常用的有两种: R
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="media" scheme="http://zenvv.com/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>清晨的轻风</title>
    <link href="http://zenvv.com/2016/05/24/morning-breeze/"/>
    <id>http://zenvv.com/2016/05/24/morning-breeze/</id>
    <published>2016-05-23T21:40:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>— 早醒</p><p>窗外<br>第一趟列车<br>正急速驶过<br>打破短暂的宁静</p><p>带起<br>一线清风<br>懒懒地飘进<br>抚摸着手臂<br>丝丝凉意  </p><p>抬头<br>眯起天空<br>一丝白云<br>在缓缓移动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;— 早醒&lt;/p&gt;
&lt;p&gt;窗外&lt;br&gt;第一趟列车&lt;br&gt;正急速驶过&lt;br&gt;打破短暂的宁静&lt;/p&gt;
&lt;p&gt;带起&lt;br&gt;一线清风&lt;br&gt;懒懒地飘进&lt;br&gt;抚摸着手臂&lt;br&gt;丝丝凉意
      
    
    </summary>
    
      <category term="胡诌" scheme="http://zenvv.com/categories/%E8%83%A1%E8%AF%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>consul集群建立及使用方式</title>
    <link href="http://zenvv.com/2016/05/17/consul-cluster-config/"/>
    <id>http://zenvv.com/2016/05/17/consul-cluster-config/</id>
    <published>2016-05-17T07:04:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>consul是一种为分布式系统提供查询服务的系统, 既可以支持HTTP REST的方式提供服务, 也支持DNS接口与已有的dns服务集成.</p><p>为了维持consul的高可用性, 一般通过集群的方式对分布式系统提供服务, 集群创建方法如下.</p><h3 id="1-在各节点中启动consul-server"><a href="#1-在各节点中启动consul-server" class="headerlink" title="1. 在各节点中启动consul server"></a>1. 在各节点中启动consul server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">agent -bind NODE1_IP -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin -server -bootstrap-expect=2</span><br><span class="line">agent -bind NODE2_IP -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin -server -bootstrap-expect=2</span><br><span class="line">agent -bind NODE3_IP -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin -server -bootstrap-expect=2</span><br></pre></td></tr></table></figure><p>-client: 绑定的客户端地址(HTTP/DNS/RPC), 默认为127.0.0.1;<br>-data-dir: agent数据存放路径;<br>-config-dir: agent配置加载路径;<br>-ui: 启动内建web管理界面;<br>-dc: datacenter名称;<br>-rejoin: agent自动重新加入集群即使之前已主动退出<br>-server: agent运行模式;<br>-bootstrap-expect: datacenter中需求的最少server数目.  </p><h3 id="2-建立集群"><a href="#2-建立集群" class="headerlink" title="2. 建立集群"></a>2. 建立集群</h3><p>在其中一个节点中(例如在node1), 添加其余server节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consul join $&#123;NODE2_IP&#125; </span><br><span class="line">consul join $&#123;NODE3_IP&#125; </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="3-consul服务方式"><a href="#3-consul服务方式" class="headerlink" title="3. consul服务方式"></a>3. consul服务方式</h3><p>应用程序有以下几种方式使用consul集群服务, 具体如下<br>a. 直接连接集群中的任一个consul server;<br>b. 设置haproxy(+keepalived)代理consul集群, 通过haproxy提供服务;<br>c. 建立consul client然后连接client提供服务</p><h3 id="4-创建client"><a href="#4-创建client" class="headerlink" title="4. 创建client"></a>4. 创建client</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">agent -advertise $&#123;client_ip&#125; -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin</span><br><span class="line">consul join $&#123;NODE1_IP&#125;</span><br></pre></td></tr></table></figure><p>为防止单点故障, 每一个应用程序都可以建立属于自己的client服务.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;consul是一种为分布式系统提供查询服务的系统, 既可以支持HTTP REST的方式提供服务, 也支持DNS接口与已有的dns服务集成.&lt;/p&gt;
&lt;p&gt;为了维持consul
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>lsyncd+rsync文件同步</title>
    <link href="http://zenvv.com/2016/05/15/lsyncd-rsync-config/"/>
    <id>http://zenvv.com/2016/05/15/lsyncd-rsync-config/</id>
    <published>2016-05-15T03:02:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Lsyncd (Live Syncing Daemon), 用于实时将本地文件备份到远程目录, 集成了inotify/fsevents服务, 能够支持rsync/ssh多种数据同步方式.</p><p>这里将介绍lsyncd+rsync的基本使用.</p><h3 id="1-简单示例"><a href="#1-简单示例" class="headerlink" title="1. 简单示例"></a>1. 简单示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsyncd -rsync /home remotehost.org::share/</span><br></pre></td></tr></table></figure><p>监控本地目录/home的文件事件, 实时将其更新到远程rsync服务share模块的目的目录中.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsyncd -rsyncssh /home remotehost.org backup-home/</span><br></pre></td></tr></table></figure></p><p>监控本地目录/home的文件事件, 但通过ssh实时将其更新到远程目录backup-home中. (需要设置ssh为无密码登录).</p><h3 id="2-lsyncd-rsync模式"><a href="#2-lsyncd-rsync模式" class="headerlink" title="2. lsyncd+rsync模式"></a>2. lsyncd+rsync模式</h3><h4 id="0-基本数据流"><a href="#0-基本数据流" class="headerlink" title="0). 基本数据流"></a>0). 基本数据流</h4><p>a. 源节点: lsyncd服务端 + rsync客户端<br>b. 目的节点: rsyncd服务端</p><p>数据流方向: 将文件从源节点中备份到目的节点的存储空间中.</p><h4 id="1-源文件端"><a href="#1-源文件端" class="headerlink" title="1). 源文件端"></a>1). 源文件端</h4><h5 id="a-lsyncd服务配置文件"><a href="#a-lsyncd服务配置文件" class="headerlink" title="a. lsyncd服务配置文件"></a>a. lsyncd服务配置文件</h5><p>/etc/lsyncd/lsyncd.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">settings &#123;</span><br><span class="line">    logfile         = &quot;/var/log/lsyncd.log&quot;,</span><br><span class="line">    statusFile      = &quot;/var/run/lsyncd.status&quot;,</span><br><span class="line">    nodaemon        = false,</span><br><span class="line">    statusInterval  = 10,</span><br><span class="line">    inotifyMode     = &quot;CloseWrite&quot;,</span><br><span class="line">    maxProcesses    = 4,</span><br><span class="line">    maxDelays       = 4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sync &#123;</span><br><span class="line">    default.rsync,</span><br><span class="line">    source      = &quot;/tmp/src&quot;,</span><br><span class="line">    target      = &quot;rsync_user@192.168.10.10::rsync_mod&quot;,</span><br><span class="line">    -- init        = false,</span><br><span class="line">    delay       = 30,</span><br><span class="line">    exclude     = &#123; &quot;lost+found&quot;, &quot;.tmp&quot;, &quot;.*&quot; &#125;,</span><br><span class="line">    -- excludeFrom = &quot;/etc/rsync_exclude.lst&quot;,</span><br><span class="line">    delete      = &quot;running&quot;,</span><br><span class="line"></span><br><span class="line">    rsync       = &#123;</span><br><span class="line">        binary      = &quot;/usr/bin/rsync&quot;,</span><br><span class="line">        password_file = &quot;/etc/lsyncd/rsyncd.pass&quot;,</span><br><span class="line">        _extra = &#123;&quot;--temp-dir=/tmp/&quot;&#125;,</span><br><span class="line"></span><br><span class="line">        bwlimit     = 4096, -- kb/s</span><br><span class="line">        archive     = true,</span><br><span class="line">        compress    = true,</span><br><span class="line">        verbose     = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>stausFile: 定义状态文件, 记录已经处理的事件.<br>nodaemon=false: 表示启用守护模式，默认前端模式.<br>statusInterval: 将lsyncd的状态写入上面的statusFile的间隔，默认10秒.<br>inotifyMode: 指定inotify监控的事件，默认是CloseWrite.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Modify</span><br><span class="line">CloseWrite</span><br><span class="line">CloseWrite or Modify</span><br></pre></td></tr></table></figure></p><p>maxProcesses: 同步进程(如rsync/ssh)的最大个数.<br>maxDelays: 累计到多少监控的事件激活一次同步，即使sync中delay延迟时间还未到.  </p><p>sync同步参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default.rsync: 使用rsync进行备份(本地或远程);  </span><br><span class="line">default.direct: 使用cp/rm等命令进行本地备份;  </span><br><span class="line">default.rsyncssh: 同步到远程主机目录，rsync的ssh模式;</span><br></pre></td></tr></table></figure></p><p>source: 源目录，使用绝对路径;<br>target: 支持配置如下,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a) rsync远程目录同步(如remote_host::rsync_mod), 用于rsync模式    </span><br><span class="line">b) 本地目录同步(如/tmp/dest), 可用于direct和rsync模式  </span><br><span class="line">c) ssh远程目录同步(remote_host:/tmp/dest): 可用于rsync和rsyncssh模式</span><br></pre></td></tr></table></figure></p><p>init: 当init = false, 只同步进程启动以后发生改动事件的文件，原有目录即使有差异也不会同步; 默认是true(但不能显示设置init = true).<br>delay: 累计事件延迟时间默认15秒, 避免过于频繁的同步.</p><p>delete: 保持target与souce同步.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete=trueDefault. Lsyncd will delete on the target whatever is not in the source. At startup and what&apos;s being deleted during normal operation.</span><br><span class="line">delete=falseLsyncd will not delete any files on the target. Not on startup nor on normal operation. (Overwrites are possible though)</span><br><span class="line">delete=&apos;startup&apos;Lsyncd will delete files on the target when it starts up but not on normal operation.</span><br><span class="line">delete=&apos;running&apos;Lsyncd will not delete files on the target when it starts up but will delete those that are removed during normal operation.</span><br></pre></td></tr></table></figure></p><p>bwlimit: rsync同步限速(kb/s).<br>compress: 压缩传输默认为true.<br>perms: 默认保留文件权限.  </p><p>注意: lsyncd.conf可以有多个sync模块，独立配置互不影响。</p><h5 id="b-配置rsync密码"><a href="#b-配置rsync密码" class="headerlink" title="b. 配置rsync密码"></a>b. 配置rsync密码</h5><p>密码文件/etc/lsyncd/rsyncd.pass:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsyncd_password</span><br></pre></td></tr></table></figure></p><p>设置密码文件权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown root:root /etc/lsyncd/rsyncd.pass</span><br><span class="line">chmod 0400 /etc/lsyncd/rsyncd.pass</span><br></pre></td></tr></table></figure></p><h4 id="2-目的文件端"><a href="#2-目的文件端" class="headerlink" title="2). 目的文件端"></a>2). 目的文件端</h4><h5 id="a-rsyncd服务端"><a href="#a-rsyncd服务端" class="headerlink" title="a. rsyncd服务端"></a>a. rsyncd服务端</h5><p>配置文件/etc/rsyncd.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># sample rsyncd.conf configuration file</span><br><span class="line"></span><br><span class="line"># GLOBAL OPTIONS</span><br><span class="line">motd file=/etc/motd</span><br><span class="line">log file=/var/log/rsyncd</span><br><span class="line"># for pid file, do not use /var/run/rsync.pid if</span><br><span class="line"># you are going to run rsync out of the init.d script.</span><br><span class="line"># The init.d script does its own pid file handling,</span><br><span class="line"># so omit the &quot;pid file&quot; line completely in that case.</span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line">syslog facility=daemon</span><br><span class="line">#socket options=</span><br><span class="line"></span><br><span class="line"># MODULE OPTIONS</span><br><span class="line">[rsync_mod]</span><br><span class="line">comment = public archive</span><br><span class="line">path = /mnt/backup/data</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 4</span><br><span class="line">lock file = /var/lock/rsyncd</span><br><span class="line">read only = no</span><br><span class="line">hosts allow = 192.168.0.1/24</span><br><span class="line"></span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">auth users = rsync_user</span><br><span class="line">secrets file = /etc/rsyncd.scrt</span><br><span class="line">strict modes = yes</span><br><span class="line"></span><br><span class="line">timeout = 600</span><br><span class="line">#refuse options = checksum dry-run</span><br><span class="line">dont compress = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz *.png *.jpg *.jpeg *.gif</span><br></pre></td></tr></table></figure></p><h5 id="b-配置rsyncd密码"><a href="#b-配置rsyncd密码" class="headerlink" title="b. 配置rsyncd密码"></a>b. 配置rsyncd密码</h5><p>密码文件/etc/rsyncd.scrt:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync_user:rsyncd_password</span><br></pre></td></tr></table></figure></p><p>设置密码文件权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown root:root /etc/rsyncd.scrt</span><br><span class="line">chmod 0400 /etc/rsyncd.scrt</span><br></pre></td></tr></table></figure></p><h5 id="c-启动rsyncd服务"><a href="#c-启动rsyncd服务" class="headerlink" title="c. 启动rsyncd服务"></a>c. 启动rsyncd服务</h5><p>在ubuntu上默认rsyncd服务不能通过init.d/upstart启动, 需要修改配置文件/etc/default/rsync:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSYNC_ENABLE=false</span><br><span class="line">修改为</span><br><span class="line">RSYNC_ENABLE=true</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;Lsyncd (Live Syncing Daemon), 用于实时将本地文件备份到远程目录, 集成了inotify/fsevents服务, 能够支持rsync/ssh多种数
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>视频格式</title>
    <link href="http://zenvv.com/2016/05/12/video-format/"/>
    <id>http://zenvv.com/2016/05/12/video-format/</id>
    <published>2016-05-12T02:38:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>视频格式属于一般的通俗统称，具体来说，可以进一步分为视频容器格式和视频编码格式。</p><p>视频容器用于封装具体的视频编码数据，但是由于某些视频容器只针对某种特殊的视频编码.<br>故而一般将这两种混为一体而不加区分，如rmvb格式视频即表明该容器是rmvb, 视频编码也是rmvb. </p><p>而avi则可以支持多种视频格式，如h264/mpeg4/vc1等等, 这时avi只表示其封装格式.<br>如果需要播放该视频，则需要解析出其视频编码格式启动相应的视频解码器才能播放。</p><p>常见的视频容器格式有: rmvb, mkv, avi, mp4, ts, vob等。<br>常见的视频编码格式有: rmvb, vc1, h264, mpeg4, mpeg2等.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;视频格式属于一般的通俗统称，具体来说，可以进一步分为视频容器格式和视频编码格式。&lt;/p&gt;
&lt;p&gt;视频容器用于封装具体的视频编码数据，但是由于某些视频容器只针对某种特殊的视频编
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="media" scheme="http://zenvv.com/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>glusterfs文件同步</title>
    <link href="http://zenvv.com/2016/05/10/glusterfs3-by-talk/"/>
    <id>http://zenvv.com/2016/05/10/glusterfs3-by-talk/</id>
    <published>2016-05-10T09:49:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>rsync是一种常用的远程文件同步方法, 这里将就其几种常用方式及与glusterfs的配合使用, 作简单介绍.</p><h3 id="1-rsync"><a href="#1-rsync" class="headerlink" title="1. rsync"></a>1. rsync</h3><p>可以对节点间的数据作完全同步, 不能处理增量数据, 因此只能周期性的运行.</p><p>适合作小数据的同步或者大数据的离线同步. </p><h3 id="2-inotify-rsync"><a href="#2-inotify-rsync" class="headerlink" title="2. inotify + rsync"></a>2. inotify + rsync</h3><p>在rsync的基础上添加inotify服务, 监控内核文件事件处理增量数据服务. </p><p>该方案对增量处理没有容错能力, 只能处理inotify服务正常运行中的事件,<br>故而运行一段时间后, 则数据同步不完整.</p><p>可以辅助周期性的完全同步, 保证节点间的数据一致.</p><h3 id="3-lsyncd-rsync"><a href="#3-lsyncd-rsync" class="headerlink" title="3. lsyncd + rsync"></a>3. lsyncd + rsync</h3><p>使用lsyncd服务代替inotify服务, 在一定程度上保证其首次启动后的所有事件.<br>也即是除首次需要作数据完全同步之后, 后续由lsyncd保障数据增量服务(即使服务重启或网络中断也可以恢复).</p><p>与inotify类似的是, 需要监控内核文件事件, 通常只能处理节点的本地文件系统.</p><h3 id="4-glusterfs"><a href="#4-glusterfs" class="headerlink" title="4. glusterfs"></a>4. glusterfs</h3><p>glusterfs可以通过rsync从某个节点的本地文件系统获取数据, 方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -PavhS --xattrs --ignore-existing /data/remote_dir/ client:/mnt/gluster</span><br></pre></td></tr></table></figure></p><p>对于glusterfs这种分布式文件系统, 没有内核事件的支持, 导致没有办法使用inotify或lsyncd支持增量处理.</p><p>故而直接使用rsync这种方式, 只能周期性的运行完全同步对数据进行同步备份.</p><p>glusterfs通常作为大数据存储服务, 这种完全同步方式性能消耗大, 同步不及时.</p><p>在glusterfs3.x及以后版本, 原生支持一种异地备份服务 - geo-replication.<br>geo-replication是基于ssh和rsync工具实现的一套文件同步系统, 其中, ssh用于信息控制交互, rsync用于数据同步. 相关的具体命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gluster volume geo-replication &lt;master_volume&gt; config allow-network ::1,127.0.0.1</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; start|stop|status</span><br><span class="line"></span><br><span class="line"># local (system and gluster)</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; file:///path/to/dir</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; /path/to/dir</span><br><span class="line"></span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; gluster://localhost:volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; :volname</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># remote (system and gluster)</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; ssh://root@remote-host:/path/to/dir</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; root@remote-host:/path/to/dir</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; ssh://root@remote-host:gluster://localhost:volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; root@remote-host::volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; gluster://host:volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; host:volname</span><br><span class="line">gluster volume geo-replication dist_repl_vol slave::dist_repl_vol config use_tarssh false</span><br></pre></td></tr></table></figure><p>geo-replication支持如下几种同步方式<br>1). master gluster volume   -&gt;  slave local filesystem<br>这种方式比较简单, gluster内建文件事件, 处理增量数据发送到远程slave节点.</p><p>2). master gluster volume   -&gt;  slave gluster volume<br>glusterfs-glusterfs同步要求两个volume类型及参数一致.</p><h3 id="5-同步示例"><a href="#5-同步示例" class="headerlink" title="5. 同步示例"></a>5. 同步示例</h3><p>这里以distribute replica voluem(replica: 2, total: 4)为例.<br>卷名为dist_replica_vol, master节点node1/node2/node3/node4, 创建方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create dist_replica_vol replicat 2 node1:/data node2:/data node3:/data node4:/data</span><br></pre></td></tr></table></figure></p><p>slave节点分别为snode1/snode2/snode3/snode4, 卷名为dist_replica_vol, 创建方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create dist_replica_vol replicat 2 snode1:/data snode2:/data snode3:/data snode4:/data</span><br></pre></td></tr></table></figure></p><p>同步方式, 将master数据同步到slave节点上, 具体如下.</p><p>a. 请使用root用户进行同步, 其它用户潜在问题多.<br>b. 设置可以通过ssh root without-password方式从master访问slave.<br>对于ubuntu用户, 需要修改/etc/ssh/sshd_config:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin without-password</span><br><span class="line">改为</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure></p><p>在master端用root用户生成ssh public/private key, 然后将id_rsa.pub拷贝到slave上, 并将其内容添加到/root/.ssh/.authroity_keys中即可.</p><p>c. 在master端创建geo-replication<br>在该master卷dist_replica_vol中的任一节点上, 如在node1中创建geo-replication volume, 如此node1和node2成为geo-replication volume的active节点, node3/node4是passive节点, 而数据处理则全部在active节点中运行.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># create pem</span><br><span class="line">gluster system:: execute gsec_create</span><br><span class="line"></span><br><span class="line"># create geo-replication volume </span><br><span class="line">gluster volume geo-replication dist_repl_vol snode1::dist_repl_vol create push-pem [force]</span><br><span class="line"></span><br><span class="line"># do operations</span><br><span class="line">gluster volume geo-replication dist_repl_vol snode1::dist_repl_vol start|stop|pause|status</span><br></pre></td></tr></table></figure><p>d. 错误处理<br>如果出现key或者gsyncd错误, 在所有gluster节点中(本地和远程)运行以下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cp -f /root/.ssh/id_rsa /var/lib/glusterd/geo-replication/secret.pem</span><br><span class="line">cp -f /root/.ssh/id_rsa /var/lib/glusterd/geo-replication/tar_ssh.pem</span><br><span class="line"></span><br><span class="line">cp -f /root/.ssh/id_rsa.pub /var/lib/glusterd/geo-replication/secret.pem.pub</span><br><span class="line">cp -f /root/.ssh/id_rsa.pub /var/lib/glusterd/geo-replication/tar_ssh.pem.pub</span><br><span class="line"></span><br><span class="line">mkdir -p /nonexistent/</span><br><span class="line">ln -s /usr/lib/x86_64-linux-gnu/glusterfs/gsyncd /nonexistent/gsyncd</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;rsync是一种常用的远程文件同步方法, 这里将就其几种常用方式及与glusterfs的配合使用, 作简单介绍.&lt;/p&gt;
&lt;h3 id=&quot;1-rsync&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>docker杂谈</title>
    <link href="http://zenvv.com/2016/05/02/docker-by-talk/"/>
    <id>http://zenvv.com/2016/05/02/docker-by-talk/</id>
    <published>2016-05-02T02:45:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在云技术时代, 开发由前端(如h5/js/css)和后端技术(如python/jsp/php)等两部分组成, 这其中存在哪些变化呢? </p><p>明显看到这个开发链中没有相关的底层架构技术, 是因为这些不重要吗? 当然不是. </p><p>主要得益于架构技术的迅速发展, 如今已经形成一套成型的接口, 对于开发者而言, 只需调用这些接口(如REST), 即可对数据进行各种处理(而自行搭建难度系数太大).</p><p>在架构服务的发展中, 其中一个最基本的就是虚拟技术的发展, 代表产品如vmware/xen/kvm等, 这些构建了如今互联网架构格局的基础设施.</p><p>在云浪潮中, 许多颠覆性的技术得到迅速发展并成熟, 如aws/google cloud/openstack/docker等. </p><p>本文将就其中的docker技术谈谈自己的感想.</p><p>docker字面意思是码头工人, 主要任务是处理各种集装箱(container).</p><p>docker是一种建立在lxc基础上的上层容器技术, 与xen/kvm等相比, 更像一个增强的chroot.</p><h4 id="xen-kvm介绍"><a href="#xen-kvm介绍" class="headerlink" title="xen/kvm介绍"></a>xen/kvm介绍</h4><p>xen/kvm实现了真正意义上的虚拟化方案, 能够提供完全的物理隔离功能.<br>各个虚拟主机具有独立的内核和运行空间.</p><h4 id="chroot"><a href="#chroot" class="headerlink" title="chroot"></a>chroot</h4><p>通常情况下, 程序运行时的根目录即是OS的根目录(‘/‘).<br>chroot是什么? 全称是change root, 能够改变程序运行时的根目录. </p><h4 id="LXC是什么"><a href="#LXC是什么" class="headerlink" title="LXC是什么"></a>LXC是什么</h4><p>LXC全称linux containers, 是一种封装linux内核容器功能的用户空间接口. LXC通过API和工具可以方便地构建和管理系统或应用程序容器. </p><p>LXC使用的linux内核功能有:<br>a. 内核命名空间(ipc, uts, mount, pid, network and user)<br>b. 安全访问技术Apparmor和selinux配置<br>c. 沙箱Seccomp策略<br>d. chroots技术(使用pivot_root)<br>e. 内核容量<br>f. CGroups(control group)  </p><p>LXC容器可以被当作是chroot和那些完整虚拟机如xen/kvm的中间地带.<br>其目标是尽可能创建一个类似linux标准安装版无需独立内核的运行环境.</p><h4 id="docker又是什么"><a href="#docker又是什么" class="headerlink" title="docker又是什么"></a>docker又是什么</h4><p>你可以认为, docker是一个加强版的LXC.</p><p>docker是一个轻量级开源安全的应用容器引擎, 能够将应用程序及其依赖打包进行软件部署.</p><p>docker建立在aufs分层文件系统基础上, 能够运行在主机内核中并高效启动利用主机资源.</p><h5 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h5><p>运行在同一个主机上的容器共享相同的操作系统内核, 因而容器可以被迅速启动并高效利用系统内存. 在aufs分层文件系统基础上构建的应用镜像, 可以方便的分享文件,利用磁盘和镜像下载.</p><h5 id="开放"><a href="#开放" class="headerlink" title="开放"></a>开放</h5><p>docker容器基于开放标准, 很容易在linux/mac/windows等操作系统中运行.</p><h5 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h5><p>容器能够很好的隔离彼此间的应用程序, 并为应用程序添加一个额外保护层.<br>docker提供了内存/cpu等资源隔离, 并在沙盒中运行, 但是在安全性方面还不成熟.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;在云技术时代, 开发由前端(如h5/js/css)和后端技术(如python/jsp/php)等两部分组成, 这其中存在哪些变化呢? &lt;/p&gt;
&lt;p&gt;明显看到这个开发链中没有
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>分布式文件系统 - glusterfs</title>
    <link href="http://zenvv.com/2016/05/01/glusterfs2-by-talk/"/>
    <id>http://zenvv.com/2016/05/01/glusterfs2-by-talk/</id>
    <published>2016-05-01T02:26:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>分布式文件系统自身架构也可以分为集中式和分布式两种, 典型的gluster属于前者, ceph属于后者, 孰优孰劣暂不作评论, 这里将就gluster相关概念和使用方法作介绍.</p><h3 id="1-glusterfs简述"><a href="#1-glusterfs简述" class="headerlink" title="1. glusterfs简述"></a>1. glusterfs简述</h3><p>gluster是基于一致性hash算法的纯分布式架构的分布式文件系统.  </p><p>从服务架构上分析, 仅存在一种节点即数据服务节点, 无单点故障.<br>从系统功能上分析, 可以分成两类节点: client节点和数据服务节点.  </p><p>client节点并不存在于gluster的服务端架构中. 当应用程序需要存储服务时, 才会启动client节点为其提供服务. 实际进行各种存储调度算法逻辑, 以及保证数据的一致性和可靠性都是在client节点中进行处理. 每一个应用程序均可以拥有独立的client节点.</p><p>而服务节点是正常提供数据的被动数据存储服务, 当然也有一些内建的各种数据保障服务.  </p><p>可以看到, 对于gluster系统的升级, 通常需要同时升级服务端和客户端, 由于许多新功能和调度算法都是通过client进行实现的. 闲扯下, 21世纪初p2p技术大行天下的那几年, 对于同样的服务端(tracker), 各种p2p客户端(bt/emule/bitcomet)下载的效果大不相同.  </p><h3 id="2-glusterfs卷类型"><a href="#2-glusterfs卷类型" class="headerlink" title="2. glusterfs卷类型"></a>2. glusterfs卷类型</h3><p>在建立glusterfs服务之前, 就需要明确定义存储的需求.</p><p>如mac osx系统存储一样, glusterfs通过volume对存储进行管理, 每一个volume对应用程序都类似一个disk. 服务支持的volume类型也基本决定了gluster分布式系统的基本架构, 简单来讲决定了gluster中服务节点的数量. </p><p>gluster支持多种类型的volume, 常见如下所示:  </p><h4 id="a-distribute-volume"><a href="#a-distribute-volume" class="headerlink" title="a. distribute volume"></a>a. distribute volume</h4><p>分布卷是glusterfs最基本的卷类型, 最少需要两个节点.<br><code>$&gt; gluster volume create dist_volume node1:/mnt/brick1/dist1 node2:/mnt/brick1/dist1</code><br>根据文件hash值存储到不同节点的brick, 任一个节点失败都会导致数据丢失.</p><h4 id="b-replica-volume"><a href="#b-replica-volume" class="headerlink" title="b. replica volume"></a>b. replica volume</h4><p>复制卷类似于raid1, 最少需要两个节点<br><code>$&gt; gluster volume create replica_volume replica 2 node1:/mnt/brick1/replica1 node2:/mnt/brick1/replica1</code><br>将文件存储到所有节点的brick, 任一个节点失败都不影响数据服务.</p><h4 id="c-distribute-replica-volume"><a href="#c-distribute-replica-volume" class="headerlink" title="c. distribute replica volume"></a>c. distribute replica volume</h4><p>将两个或多个相同的复制卷组合在一起构成分布复制卷, 最少需要4个节点.</p><p>创建方式一: 在2)复制卷上再添加一组<br><code>$&gt; gluster volume add-brick replica_volume node3:/mnt/brick1/replica1 node4:/mnt/brick1/replica1</code><br>replica_volume从复制卷变成一个分布式复制卷.  </p><p>创建方式二: 全新创建<br><code>$&gt; gluster volume create distribute_replica_volume replica 2 node1:/mnt/brick1/replica1 node2:/mnt/brick1/replica1 node3:/mnt/brick1/replica1 node4:/mnt/brick1/replica1</code>   </p><p>注意, node1&amp;node2和node3&amp;node4分别是一个复制卷, 然后共同构建成一个分布卷. 在此例中最多可以容忍两个节点失败, 但只能是复制卷1中(node1&amp;node2)的任一个节点, 以及复制卷2(node3&amp;node4)中的任一个节点.</p><p>分布复制卷的存储逻辑是, 首先根据文件的hash值选中一个复制卷, 然后将数据拷贝到这个复制卷中所有节点的brick.</p><h4 id="d-disperse-volume"><a href="#d-disperse-volume" class="headerlink" title="d. disperse volume"></a>d. disperse volume</h4><p>离散卷是一种高级卷，通过rs码构建冗余数据保证数据的可靠性和一致性(类似raid5). 创建方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; gluster volume create disperse_volume disperse 5 redundancy 2  node1:/mnt/brick1/disp1 node2:/mnt/brick1/disp1 node3:/mnt/brick1/disp1 node4:/mnt/brick1/disp1 node5:/mnt/brick1/disp1</span><br></pre></td></tr></table></figure></p><p>disperse: 离散卷的数目<br>redundancy: 冗余卷的数目</p><p>这里的设置意味着根据5个卷中的任意3个卷可以计算得到所有的存储数据, 也即是说, 五个节点中可以容忍任意2个节点down. 具体设置的优化值请参照官方. 其数据存储逻辑是:　按照2/5冗余值, 从文件内容计算出新内容, 然后将结果存储到五个节点中.</p><h4 id="e-distribute-disperse-volume"><a href="#e-distribute-disperse-volume" class="headerlink" title="e. distribute disperse volume"></a>e. distribute disperse volume</h4><p>类似于分布复制卷, 将多个离散卷进行合并, 即可构成一个分布离散卷. </p><h3 id="3-glusterfs建立服务"><a href="#3-glusterfs建立服务" class="headerlink" title="3. glusterfs建立服务"></a>3. glusterfs建立服务</h3><p>glusterfs所有节点都是平等的, 因此可以简单的从其中任一个节点, 去建立一个完整的分布式网络服务, 如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; gluster peer probe host1</span><br><span class="line">$&gt; gluster peer probe host2</span><br><span class="line">$&gt; gluster peer probe host3</span><br><span class="line">$&gt; gluster peer probe host4</span><br><span class="line">$&gt; gluster peer probe host5</span><br><span class="line">$&gt; gluster peer status</span><br></pre></td></tr></table></figure></p><p>删除节点操作如下:<br><code>$&gt; gluster peer detach host5</code></p><h3 id="4-glusterfs管理优化"><a href="#4-glusterfs管理优化" class="headerlink" title="4. glusterfs管理优化"></a>4. glusterfs管理优化</h3><p>glusterfs卷管理操作命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$&gt;gluster volume start|stop|delete &lt;volname&gt;</span><br><span class="line">$&gt;gluster volume add-brick|remove-brick &lt;volname&gt; …</span><br><span class="line">$&gt;gluster volume rebalance &lt;volname&gt; start|stop|status</span><br><span class="line">$&gt;gluster volume heal &lt;volname&gt; [full|info..]</span><br><span class="line">$&gt;gluster volume get &lt;volname&gt; all</span><br><span class="line">$&gt;gluster volume set &lt;volname&gt; key value</span><br><span class="line">$&gt;gluster volume log rotate &lt;volname&gt;</span><br><span class="line">$&gt;gluster volume top &lt;volname&gt; …</span><br><span class="line">$&gt;gluster volume status all|&lt;volname&gt; …</span><br><span class="line">$&gt;gluster volume replace-brick &lt;volname&gt; commit force</span><br><span class="line">$&gt;gluster volume shared profile start|info|stop</span><br><span class="line">$&gt;gluster volume profile start|info|stop</span><br></pre></td></tr></table></figure></p><p>优化属性(针对小文件)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Specifies the number of network connections to be handled simultaneously by the client processes </span><br><span class="line">gluster volume set &lt;volname&gt; client.event-threads 4</span><br><span class="line"></span><br><span class="line"># Specifies the number of network connections to be handled simultaneously by the server processes </span><br><span class="line">gluster volume set &lt;volname&gt; server.event-threads 4</span><br><span class="line"></span><br><span class="line">gluster volume set &lt;volname&gt; cluster.lookup-optimize on</span><br><span class="line"></span><br><span class="line"># Specifies whether proactive self-healing on replicated volumes is activated.</span><br><span class="line">gluster volume set &lt;volname&gt; cluster.self-heal-daemon on|off</span><br><span class="line">gluster volume set &lt;volname&gt; performance.readdir-ahead on|off</span><br></pre></td></tr></table></figure></p><p>控制访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth.allow *|ip|hostname</span><br><span class="line">auth.reject none|ip|hostname</span><br></pre></td></tr></table></figure></p><p>其它属性设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cluster.min-free-disk</span><br><span class="line">cluster.weighted-rebalance</span><br><span class="line"></span><br><span class="line">performance.cache-size</span><br><span class="line">performance.cache-min-file-size</span><br><span class="line">performance.cache-max-file-size</span><br><span class="line"></span><br><span class="line">performance.write-behind: off</span><br><span class="line">server.allow-insecure: on</span><br><span class="line">cluster.server-quorum-type: server</span><br><span class="line">cluster.quorum-type: auto</span><br><span class="line">network.remote-dio: enable</span><br><span class="line">cluster.eager-lock: enable</span><br><span class="line">performance.stat-prefetch: off</span><br><span class="line">performance.io-cache: off</span><br><span class="line">performance.read-ahead: off</span><br><span class="line">performance.quick-read: off</span><br></pre></td></tr></table></figure></p><h3 id="5-glusterfs应用服务"><a href="#5-glusterfs应用服务" class="headerlink" title="5. glusterfs应用服务"></a>5. glusterfs应用服务</h3><p>通过以上方式成功建立了glusterfs分布式文件服务. 具体使用还需要在应用程序节点上, 通过gluster client建立虚拟磁盘节点(如使用gluster mount), 随后应用程序即可通过类似访问本地磁盘的方式对gluster磁盘进行数据读取.<br>故而, 各个节点应用程序都可以通过gluster文件系统, 方便地进行数据共享服务.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;分布式文件系统自身架构也可以分为集中式和分布式两种, 典型的gluster属于前者, ceph属于后者, 孰优孰劣暂不作评论, 这里将就gluster相关概念和使用方法作介绍
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title> 数据存储</title>
    <link href="http://zenvv.com/2016/04/29/gluster-by-talk/"/>
    <id>http://zenvv.com/2016/04/29/gluster-by-talk/</id>
    <published>2016-04-29T14:51:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在云互联网时代, 数据存储依然是最基础的平台之一, 那么云时代的存储有些什么变化呢?   </p><h3 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1. 数据存储"></a>1. 数据存储</h3><p>所谓数据存储, 即是应用程序产生的数据, 能够从某处进行正常的读取操作.<br>传统方式是将所有数据存放在某以集中式存储设备上, 通过协议(如nas)在多个应用程序之间进行数据共享读取.<br>虽说集中式存储有着高额的价格, 但能够提供简洁稳定可靠高效的服务, 并在各种应用中得到验证.  </p><p>从各种渠道, 我们能获取到对集中式存储重大缺点的归结, 集中于可扩展性差和不菲的价格.<br>但是少年们, 对于中小特别是创业型公司来说, 几个T的集中式存储空间, 真的限制了公司未来的扩展性? 搭建一套分布式云存储真的价格低廉了?<br>个人认为, 云分布式存储, 应该称为云分布式大数据存储较为恰当, 更适合大数据公司.<br>搭建一套分布式云存储并不便宜, 从设备到研发及运维人员都需要一定的成本(facebook/google均定制设备以降低各种成本). 对大数据公司来说, 批量部署分布式系统则将成本大大降低.</p><p>言归正题, 本文将只讨论分布式系统gluster的一些相关技术问题.<br>方便叙述简单, 这里狭义的将分布式云定义为无单点故障的一种架构系统.</p><h3 id="2-集中式存储"><a href="#2-集中式存储" class="headerlink" title="2. 集中式存储"></a>2. 集中式存储</h3><p>采取集中存储方式的架构, 由于存储是个单点, 只能实现不完备的分布式应用程序.<br>若要实现完备的分布式应用程序, 则有以下几种方式:  </p><ol><li>需要多个集中式存储, 且各个存储之间实现实时数据共享.</li><li>需要多个集中式存储, 需要应用程序自身拥有分布式特性.</li></ol><p>第一种, 在传统大型应用中也存在不少, 成本高昂.<br>第二种, 要求各应用程序支持分布式特性, 在近几年涌现的各种服务软件中得到极大的支持, 如各种nosql服务. 从原理上分析, 最简单的实现即在各个服务实例之间进行数据同步保持一致性. </p><h3 id="3-分布式存储"><a href="#3-分布式存储" class="headerlink" title="3. 分布式存储"></a>3. 分布式存储</h3><p>集中式存储的第二种方式虽然得到了极大的发展, 但我们无法兼容利用已有的各种服务.<br>如此, 我们急需统一并提供一致的存储接口来支持各种服务, 这中需求由来已久, 并非云时代的产物.<br>其所催发的各种分布式文件系统(Distributed File System)也早先云时代之前应运而生, 但却在大数据的云时代大放光彩.</p><p>当前存在很多成熟的DFS框架, 主流的如moosefs, glusterfs, fastdfs(国内刚开始在chinaunix论坛上首发),tfs(taobao dfs),和大红大紫的openstack swift和ceph.</p><p>已有不少资料对这几种系统做过比较, 下一篇将对glusterfs进行基本的叙述.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;在云互联网时代, 数据存储依然是最基础的平台之一, 那么云时代的存储有些什么变化呢?   &lt;/p&gt;
&lt;h3 id=&quot;1-数据存储&quot;&gt;&lt;a href=&quot;#1-数据存储&quot; cla
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx+tomcat完美支持HTTPS</title>
    <link href="http://zenvv.com/2016/04/26/nginx-proxy-https-tomcat/"/>
    <id>http://zenvv.com/2016/04/26/nginx-proxy-https-tomcat/</id>
    <published>2016-04-26T14:07:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>之前几篇文章简单描述了nginx和tomcat的一些配置，可以满足一些常规需求。<br>随着互联网安全隐患的频繁发生，现如今安全性已经是一项基本需求，而https则是最基础平台之一。</p><p>在nginx中启用ssl非常简单，只需要几句简单的配置和证书即可。当nginx和tomcat配合使用，其中nginx作为反向代理前端时，该如何实现https呢？</p><p>第一种方法，即在nginx和tomcat中使用同样的证书，打开https功能。<br>nginx接受到用户请求进行解密进行处理，加密请求发送到tomcat；<br>tomcat节点接受到请求解密进行处理，对响应数据进行加密转发回到ningx；<br>最后，nginx需要解密tomcat的响应数据，再重新加密转发给客户端。</p><p>可以看到，整个过程非常复杂，并且tomcat和nginx节点均需要加密解密多次。</p><p>第二种方法，只需要在nginx前端启用ssl, nginx与后台tomcat之间的通信走http/1.0明文。<br>nginx接受用户请求进行解密处理，发送明文请求到tomcat;<br>tomcat对请求明文进行处理，返回响应数据的明文给ningx;<br>最后nginx对tomcat的响应数据加密转发到用户。</p><p>需要注意在第二种方法中，默认tomcat返回的响应明文中的url link全部是http地址。<br>也即是说，用户的第一次请求(逻辑上的首次http get)可以正常返回，随后根据在该返回内容中的访问link都被拒绝，由于这些link（由相对地址转化而来，原本就是绝对url地址除外）都是http而不是https。</p><p>对于这个问题，需要从两方面配置解决，首先在nginx前端代理请求到tomcat时需要附带上用户请求的协议名字schema（http或https）, 配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">    proxy_set_header Cookie $http_cookie;</span><br><span class="line">    proxy_pass http://tomcat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>X-Forwarded-Proto即是在http header请求中添加用户真实协议，而不是代理协议http.</p><p>其次在tomcat中需要显示使用http head中该字段x-forwarded-proto, 配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">   remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">   remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">   protocolHeader=&quot;x-forwarded-proto&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>tomcat的mod_remoteip模块将会根据protocolHeader字段和protocolHeaderHttpsValue值作如下逻辑判断：<br>如果protocolHeader对应字段的值与protocolHeaderHttpsValue(默认是https,可以设置)一致且是https，则root url是<a href="https://ip" target="_blank" rel="noopener">https://ip</a>;<br>否则采用<a href="http://ip作为root" target="_blank" rel="noopener">http://ip作为root</a> url,不论用户真实请求的协议.  </p><p>这样，nginx和tomcat搭配的https请求就可以工作了，但这仅仅适用于nginx和tomcat均处于内网中。</p><p>在数据中心中，前端nginx一般位于DMZ区域拥有公网IP地址，而tomcat可能位于局域网中只有内网地址。这时我们会发现以上配置不起作用。<br>由于tomcat默认机制中需要判断代理服务器的IP地址，如果该IP地址是内网网段，则启用以上逻辑否则无效，而转而使用默认规则http处理。</p><p>为了解决这个问题，需要将代理IP(例如a.b.c.d)添加到tomcat的允许区域中，可进行如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">   remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">   remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">   protocolHeader=&quot;x-forwarded-proto&quot;</span><br><span class="line">   internalProxies=&quot;a\.b\.c\.d&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>internalProxies将会覆盖tomcat的默认内网网段设置，这时通过公网ip可以正常访问https，但在内部直接连接tomcat则只能获取到首页内容，类似上面访问nginx的情形。<br>internalProxies支持正则表达式，可以在将nginx代理公网ip和内网网段全部添加进去即可，如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">internalProxies=&quot;a\.b\.c\.d,10\.*,192\.168\.*&quot;</span><br></pre></td></tr></table></figure></p><p>既然tomcat已经在数据中心内网中，可以有更简单的设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">   remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">   remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">   protocolHeader=&quot;.*&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>如此，完美解决nginx + tomcat + https的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;之前几篇文章简单描述了nginx和tomcat的一些配置，可以满足一些常规需求。&lt;br&gt;随着互联网安全隐患的频繁发生，现如今安全性已经是一项基本需求，而https则是最基础平
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="http://zenvv.com/tags/nginx/"/>
    
      <category term="tomcat" scheme="http://zenvv.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>keepalived建立HA系统的几种模式</title>
    <link href="http://zenvv.com/2016/04/25/keepalived-by-talk/"/>
    <id>http://zenvv.com/2016/04/25/keepalived-by-talk/</id>
    <published>2016-04-24T17:13:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>keepalived是基于虚拟IP通过组播通信建立的一种软件HA系统, 简单有效得到广泛的应用. </p><p>通常有master/backup和backup/backup两种模式, 基本配置构成如下:<br>a). global_defs: 定义全局属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">      test@example.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from admin@example.com</span><br><span class="line">   smtp_server mail.example.com</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>b). vrrp_script: 检查应用程序状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_app &#123;</span><br><span class="line">    script &quot;&lt;/dev/tcp/127.0.0.1/80&quot; # connects and exits</span><br><span class="line">    #script &quot;/etc/keepalived/check_app.sh&quot;</span><br><span class="line">    #script &quot;killall -0 nginx&quot;</span><br><span class="line">    interval 3                      # check every 3 seconds</span><br><span class="line">    weight -2                       # default prio: -2 if fails</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>c). vrrp_instance: 服务相关配置如下.  </p><h4 id="1-master-backup模式"><a href="#1-master-backup模式" class="headerlink" title="1. master-backup模式"></a>1. master-backup模式</h4><h5 id="节点1设置"><a href="#节点1设置" class="headerlink" title="节点1设置"></a>节点1设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER            </span><br><span class="line">    garp_master_delay 3</span><br><span class="line"></span><br><span class="line">    interface eth0          # 设置虚拟ip的iface</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0# 监控iface, 可以不是eth0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_router_id 81# route id</span><br><span class="line">    priority 100            # 节点优先级</span><br><span class="line">    advert_int 2# keepalived节点之间通信间隔</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass pass123# keepalived密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.1/24# 要设置的虚拟ip</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>state: 标识该节点的初始状态 - MASTER或BACKUP.<br>garp_master_delay: 在切换到master状态后，延迟进行gratuitous ARP请求.<br>track_script的chk_app检测应用程序, 若失败则节点优先级降低(具体值在chk_app的weight中设置).</p><h5 id="节点2设置"><a href="#节点2设置" class="headerlink" title="节点2设置"></a>节点2设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP            </span><br><span class="line">    #nopreempt# 非抢占模式</span><br><span class="line">    garp_master_delay 3</span><br><span class="line"></span><br><span class="line">    interface eth0          # 设置虚拟ip的iface</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0# 监控iface, 可以不是eth0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_router_id 81# 必须与master中一样</span><br><span class="line">    priority 99             # 比master中小, 需要保证master权限降低时比这个值小</span><br><span class="line">    advert_int 2# keepalived节点之间通信间隔</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass pass123# keepalived密码, 必须与master中一样 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.1/24# 要设置的虚拟ip, 必须与master中一样</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在master-backup模式中,<br>a) 正常情况下, 节点1成为master并设置虚拟IP(vip).<br>b) 节点1检测错误(chk_app)或keepalived失败, 节点2将接管master角色.<br>c) 当节点1恢复正常时, 将重新抢占成为master.  </p><h4 id="2-backup-backup模式"><a href="#2-backup-backup模式" class="headerlink" title="2. backup-backup模式"></a>2. backup-backup模式</h4><p>所有Backup配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP            </span><br><span class="line">    garp_master_delay 3</span><br><span class="line"></span><br><span class="line">    interface eth0          # 设置虚拟ip的iface</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0# 监控iface, 可以不是eth0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_router_id 83# 必须与master中一样</span><br><span class="line">    #nopreempt</span><br><span class="line">    priority 99             </span><br><span class="line">    advert_int 2# keepalived节点之间通信间隔</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass pass123# keepalived密码, 必须与master中一样 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.1/24# 要设置的虚拟ip, 必须与master中一样</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在backup-backup模式中节点行为如下:<br>a) 假设节点1首先启动, 节点1则成为master并设置vip;<br>b) 如果节点1失败,节点2将自动接管成为master;<br>c) 当节点1恢复时不会抢占master, 除非节点2失败.</p><h4 id="3-nopreempt属性"><a href="#3-nopreempt属性" class="headerlink" title="3. nopreempt属性"></a>3. nopreempt属性</h4><p>在某些情形下, keepalived的自动切换可能导致Brain-Split: 即两个节点都成为master并设置虚拟IP地址.  </p><p>对此, keepalived提供了nopreempt属性, 允许低优先级节点作为master. 该属性只在backup节点中设置有效, 具体如下:</p><p>1) master-backup模式<br>若backup设置nopreempt, 当节点1失败时节点2不会抢占master, 切换方法:<br>a) 手动干预, 如关闭节点1的keepalived程序;<br>b) 自动切换, 在节点1检测脚本中添加逻辑: 若检测失败自动关闭keepalived.</p><p>2) backup-backup模式<br>若backup设置nopreempt, 也需要手动干预或者在检测脚本中自动关闭keepalived.  </p><p>通过关闭无效节点的keepalived服务, 可以有效避免Brain-Split; 但是, 需要手动处理才能恢复失败节点.</p><hr><p>一般情况下, 不设置nopreempt的backup-backup模式即可以满足大多数需求.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;keepalived是基于虚拟IP通过组播通信建立的一种软件HA系统, 简单有效得到广泛的应用. &lt;/p&gt;
&lt;p&gt;通常有master/backup和backup/backup
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>DNS服务器dnsmasq</title>
    <link href="http://zenvv.com/2016/04/19/dnsmasq-by-talk/"/>
    <id>http://zenvv.com/2016/04/19/dnsmasq-by-talk/</id>
    <published>2016-04-18T16:41:00.000Z</published>
    <updated>2017-02-07T09:53:01.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在构建数据中心网络时, 建立一个独立的dns服务是必不可少的.</p><p>dns服务器有很多种, 如bind9/skydns等, 但是bind9显得笨重难以配置维护, skydns是不错的软件, 在多种分布式系统中被使用, 如google的k8s.</p><p>这里介绍另一种简洁的dns服务软件 - dnsmasq, 配置简单如下所示.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#listen-address=..</span><br><span class="line">expand-hosts</span><br><span class="line">domain=example.com</span><br><span class="line">cache-size=300</span><br><span class="line">#no-resolv</span><br><span class="line">domain-needed</span><br><span class="line"></span><br><span class="line"># for other servers(consul)</span><br><span class="line">server=/consul./127.0.0.1#8600</span><br><span class="line"></span><br><span class="line"># for common domain</span><br><span class="line">address=/ntp.io/10.10.10.9</span><br><span class="line">address=/dns.io/10.10.10.10</span><br></pre></td></tr></table></figure><p>listen-address默认不配置时则在所有ip地址监听.<br>expand-hosts和domain搭配使用, 自动将/etc/hosts中的名字扩展到example.com.<br>no-resolv不使用/etc/resolv.conf对域名解析.<br>domain-needed不转发没有格式的域名.<br>server=..用于某些域名转发到其它dns server, 在这个例子中将所有以.consul为后缀的域名, 转发到127.0.0.1:8600的dns服务器进行解析.<br>address=..用于定义本地网络的dns域名解析.  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;在构建数据中心网络时, 建立一个独立的dns服务是必不可少的.&lt;/p&gt;
&lt;p&gt;dns服务器有很多种, 如bind9/skydns等, 但是bind9显得笨重难以配置维护, s
      
    
    </summary>
    
      <category term="技术" scheme="http://zenvv.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
