<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[WebRTC实时通信 (2) - SDP]]></title>
      <url>http://zenvv.com/2018/01/29/webrtc-sdp/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="1-SDP介绍"><a href="#1-SDP介绍" class="headerlink" title="1. SDP介绍"></a>1. SDP介绍</h3><h4 id="m-audio-video-application"><a href="#m-audio-video-application" class="headerlink" title="*. m=audio/video/application"></a>*. m=audio/video/application</h4><p>媒体行: 最基本的媒体类型标识,其中m=application可用于创建sctp数据通道。</p>
<p>sdp中必须至少存在一个<code>m=..</code>， 同一种类型的媒体可以同时存在多个<code>m=..</code>.</p>
<h4 id="a-a-sendrecv-sendonly-recvonly"><a href="#a-a-sendrecv-sendonly-recvonly" class="headerlink" title="a. a=sendrecv/sendonly/recvonly"></a>a. a=sendrecv/sendonly/recvonly</h4><p>offer/answer的数据传输属性的匹配方式如下:</p>
<table>
<thead>
<tr>
<th>offer(A)</th>
<th>answer(B)</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>sendrecv</td>
<td>sendrecv</td>
<td>可互相发送媒体数据</td>
</tr>
<tr>
<td>sendrecv</td>
<td>sendonly/recvonly</td>
<td>-</td>
</tr>
<tr>
<td>sendonly</td>
<td>recvonly</td>
<td>-</td>
</tr>
<tr>
<td>recvonly</td>
<td>sendonly</td>
<td>-</td>
</tr>
<tr>
<td>inactive</td>
<td>inactive</td>
<td>-</td>
</tr>
</tbody>
</table>
<h4 id="b-a-rtpmap"><a href="#b-a-rtpmap" class="headerlink" title="b. a=rtpmap"></a>b. a=rtpmap</h4><p>标识RTP数据(payload), 可以用于区分音视频编码类型/RTP数据类型(如正常数据包，重传包，FEC包等)</p>
<h4 id="c-a-rtcp-fb"><a href="#c-a-rtcp-fb" class="headerlink" title="c. a=rtcp-fb"></a>c. a=rtcp-fb</h4><p>标识RTP数据(payload)所支持的RTCP类型，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=rtcp-fb:* nack    	     =&gt; 所有rtp数据均支持重传(*表示所有payload的RTP数据)</span><br><span class="line">a=rtcp-fb:100 nack pli     =&gt; payload为100编码的RTP数据支持PLI请求</span><br><span class="line">a=rtcp-fb:96 ccm fir       =&gt; payload为96编码的RTP数据支持CCM和FIR请求</span><br><span class="line">a=rtcp-fb:96 goog-remb     =&gt; payload为96编码的RTP数据支持google REMB。</span><br></pre></td></tr></table></figure>
<p>注意:   </p>
<ul>
<li>在最新版本的firefox中并未支持NACK数据重传。  </li>
<li>PLI/FIR对于H264编码具有同等作用。  </li>
<li>REMB在Firefox与Chrome中实现基本一致，但对于Multi-stream模式有区别(后续将详细解释)。</li>
</ul>
<h4 id="d-a-ice-ufrag-ice-pwd"><a href="#d-a-ice-ufrag-ice-pwd" class="headerlink" title="d. a=ice-ufrag/ice-pwd"></a>d. a=ice-ufrag/ice-pwd</h4><p>ice-ufrag用于标识stun消息是否合法，ice-pwd用于stun数据体的加/解密。</p>
<h4 id="e-a-fingerprint"><a href="#e-a-fingerprint" class="headerlink" title="e. a=fingerprint"></a>e. a=fingerprint</h4><p>用于对媒体数据(audio/video/data)的加解密。</p>
<h4 id="f-a-mid"><a href="#f-a-mid" class="headerlink" title="f. a=mid"></a>f. a=mid</h4><p>媒体数据标识ID: 如果使用<code>a=group:BUNDLE</code>属性，a=mid值必须与其匹配。</p>
<p>a=mid必须被用在具体的媒体行’m=’里面。</p>
<h4 id="g-a-extmap"><a href="#g-a-extmap" class="headerlink" title="g. a=extmap"></a>g. a=extmap</h4><p>RTP媒体数据(audio/video)的扩展头标识。回复Answer中的该项值必须是Offer的子集。</p>
<h4 id="h-a-rtcp-mux"><a href="#h-a-rtcp-mux" class="headerlink" title="h. a=rtcp-mux"></a>h. a=rtcp-mux</h4><p>启用rtcp-mux复合包，即一个RTCP包中有多个类型数据(如RR/SR/PLI/CNAME)，复合包中必须包含一个CNAME类型数据。</p>
<h4 id="i-a-fmtp"><a href="#i-a-fmtp" class="headerlink" title="i. a=fmtp"></a>i. a=fmtp</h4><p>媒体数据属性，如编解码参数/RTP打包模式等。<br>fmtp子属性<code>apt=</code>指的是该RTP的重传包具有不同的payload值。</p>
<h4 id="j-a-msid"><a href="#j-a-msid" class="headerlink" title="j. a=msid"></a>j. a=msid</h4><p>用于标识媒体流的streamID和trackID。</p>
<p>最新标准中推荐的格式为(firefox): <code>a=msid:{stream_id} {track_id}</code></p>
<p>之前标准中所使用的格式为(chrome):<br><code>a=ssrc:1424320061 msid:stream_id track_id</code></p>
<h3 id="2-Chrome-SDP"><a href="#2-Chrome-SDP" class="headerlink" title="2. Chrome SDP"></a>2. Chrome SDP</h3><p>SDP具有Offer和Answer两种模式, 两种模式格式基本类似当含义却不同:</p>
<ul>
<li>Offer是向对方列举自身设备所允许的能力。  </li>
<li>Answer是从对方Offer中选择自身也支持的若干种能力，然后通知对方。</li>
</ul>
<h4 id="1-SDP-Offer"><a href="#1-SDP-Offer" class="headerlink" title="1). SDP Offer"></a>1). SDP Offer</h4><p>以视频和数据这两个媒体类型为例, 如下所示描述当前设备所具备的接收视频的能力:   </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">v=<span class="number">0</span></span><br><span class="line">o=- <span class="number">2313687692229239915</span> <span class="number">3</span> IN IP4 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">s=-</span><br><span class="line">t=<span class="number">0</span> <span class="number">0</span></span><br><span class="line">a=group:BUNDLE video data</span><br><span class="line">a=msid-semantic: WMS</span><br><span class="line"></span><br><span class="line">m=video <span class="number">52510</span> UDP/TLS/RTP/SAVPF <span class="number">96</span> <span class="number">97</span> <span class="number">98</span> <span class="number">99</span> <span class="number">100</span> <span class="number">101</span> <span class="number">102</span> <span class="number">124</span> <span class="number">127</span> <span class="number">123</span> <span class="number">125</span> <span class="number">107</span> <span class="number">108</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=rtcp:<span class="number">9</span> IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:dLaN</span><br><span class="line">a=ice-pwd:gRWPwtQj8OYQl0TNPsXjXzZ8</span><br><span class="line">a=ice-options:trickle</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> <span class="number">7</span>C:<span class="number">68</span>:A9:F6:<span class="number">9</span>C:CE:<span class="number">45</span>:<span class="number">47</span>:CA:<span class="number">42</span>:F2:<span class="number">7</span>A:<span class="number">98</span>:<span class="number">48</span>:<span class="number">7F</span>:<span class="number">65</span>:<span class="number">3F</span>:<span class="number">06</span>:<span class="number">1</span>C:<span class="number">65</span>:<span class="number">8</span>E:B8:AF:<span class="number">82</span>:<span class="number">3</span>A:<span class="number">5F</span>:E1:EF:DB:<span class="number">38</span>:<span class="number">26</span>:C1</span><br><span class="line">a=setup:actpass</span><br><span class="line"></span><br><span class="line">a=mid:video</span><br><span class="line">a=extmap:<span class="number">2</span> urn:ietf:params:rtp-hdrext:toffset</span><br><span class="line">a=extmap:<span class="number">3</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/abs-send-time</span></span><br><span class="line">a=extmap:<span class="number">4</span> urn:<span class="number">3</span>gpp:video-orientation</span><br><span class="line">a=extmap:<span class="number">5</span> http:<span class="comment">//www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01</span></span><br><span class="line">a=extmap:<span class="number">6</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/playout-delay</span></span><br><span class="line">a=extmap:<span class="number">7</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/video-content-type</span></span><br><span class="line">a=extmap:<span class="number">8</span> http:<span class="comment">//www.webrtc.org/experiments/rtp-hdrext/video-timing</span></span><br><span class="line">a=recvonly</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtcp-rsize</span><br><span class="line">a=rtpmap:<span class="number">96</span> VP8/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">96</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">96</span> transport-cc</span><br><span class="line">a=rtpmap:<span class="number">97</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">97</span> apt=<span class="number">96</span></span><br><span class="line">a=rtpmap:<span class="number">98</span> VP9/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">98</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">98</span> transport-cc</span><br><span class="line">a=rtpmap:<span class="number">99</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">99</span> apt=<span class="number">98</span></span><br><span class="line">a=rtpmap:<span class="number">100</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">100</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> transport-cc</span><br><span class="line">a=fmtp:<span class="number">100</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">64001f</span></span><br><span class="line">a=rtpmap:<span class="number">101</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">101</span> apt=<span class="number">100</span></span><br><span class="line">a=rtpmap:<span class="number">102</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">102</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">102</span> transport-cc</span><br><span class="line">a=fmtp:<span class="number">102</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">42e01</span>f</span><br><span class="line">a=rtpmap:<span class="number">124</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">124</span> apt=<span class="number">102</span></span><br><span class="line">a=rtpmap:<span class="number">127</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">127</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> goog-remb</span><br><span class="line">a=rtcp-fb:<span class="number">127</span> transport-cc</span><br><span class="line">a=fmtp:<span class="number">127</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">42001f</span></span><br><span class="line">a=rtpmap:<span class="number">123</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">123</span> apt=<span class="number">127</span></span><br><span class="line">a=rtpmap:<span class="number">125</span> red/<span class="number">90000</span></span><br><span class="line">a=rtpmap:<span class="number">107</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">107</span> apt=<span class="number">125</span></span><br><span class="line">a=rtpmap:<span class="number">108</span> ulpfec/<span class="number">90000</span></span><br><span class="line"></span><br><span class="line">...&lt;&lt;webrtc_video_sending_sdp&gt;&gt;...</span><br><span class="line"></span><br><span class="line">m=application <span class="number">62968</span> DTLS/SCTP <span class="number">5000</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:dLaN</span><br><span class="line">a=ice-pwd:gRWPwtQj8OYQl0TNPsXjXzZ8</span><br><span class="line">a=ice-options:trickle</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> <span class="number">7</span>C:<span class="number">68</span>:A9:F6:<span class="number">9</span>C:CE:<span class="number">45</span>:<span class="number">47</span>:CA:<span class="number">42</span>:F2:<span class="number">7</span>A:<span class="number">98</span>:<span class="number">48</span>:<span class="number">7F</span>:<span class="number">65</span>:<span class="number">3F</span>:<span class="number">06</span>:<span class="number">1</span>C:<span class="number">65</span>:<span class="number">8</span>E:B8:AF:<span class="number">82</span>:<span class="number">3</span>A:<span class="number">5F</span>:E1:EF:DB:<span class="number">38</span>:<span class="number">26</span>:C1</span><br><span class="line">a=setup:actpass</span><br><span class="line">a=mid:data</span><br><span class="line">a=sctpmap:<span class="number">5000</span> webrtc-datachannel <span class="number">1024</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>m=video</code>是video的基本描述信息; <code>a-mid</code>是具体视频参数相关信息，用于实际视频的接收和发送</li>
<li><code>m=application</code>是application的基本描述信息; <code>a=mid</code>是具体数据通道相关信息,用于传递带外数据</li>
</ul>
<p>如果需要发送视频, 则在此处<code>webrtc_video_sending_sdp</code>添加发送视频的基本信息: 在调用addStream API添加发送媒体流后，createOffer将会自动生成，格式如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=ssrc-group:FID <span class="number">1424320061</span> <span class="number">772564596</span></span><br><span class="line">a=ssrc:<span class="number">1424320061</span> cname:+T5LKYkAJtmH1euA</span><br><span class="line">a=ssrc:<span class="number">1424320061</span> msid:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a <span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br><span class="line">a=ssrc:<span class="number">1424320061</span> mslabel:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a</span><br><span class="line">a=ssrc:<span class="number">1424320061</span> label:<span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br><span class="line">a=ssrc:<span class="number">772564596</span> cname:+T5LKYkAJtmH1euA</span><br><span class="line">a=ssrc:<span class="number">772564596</span> msid:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a <span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br><span class="line">a=ssrc:<span class="number">772564596</span> mslabel:afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a</span><br><span class="line">a=ssrc:<span class="number">772564596</span> label:<span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7</span><br></pre></td></tr></table></figure>
<p>上述SDP片段表示将要发送视频的基本信息如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">仅发送一路视频，视频的基本信息参照a=rtpmap/a=rtcp-fb属性。</span><br><span class="line">cname为+T5LKYkAJtmH1euA(用于RTCP中)</span><br><span class="line">streamId和streamLabel是afef2129-baba<span class="number">-431</span>e-aa45-be0986777c1a, </span><br><span class="line">trackId和trackLabel是<span class="number">3</span>ad04812-b787<span class="number">-4f</span>60<span class="number">-804e-1665</span>a03e12a7, </span><br><span class="line">发送的主RTP数据包ssrc是<span class="number">1424320061</span>，</span><br><span class="line">重传(NACK)RTP数据包的ssrc是<span class="number">772564596</span>，</span><br></pre></td></tr></table></figure>
<p>如果存在多组<code>a=ssrc-group:FID</code>相关数据(生成多个本地流并调用addStream添加进去)，则意味着将同时发送多路视频。</p>
<h4 id="2-SDP-Answer"><a href="#2-SDP-Answer" class="headerlink" title="2). SDP Answer"></a>2). SDP Answer</h4><p>从前部分Offer的示例中，根据当前设备能力和喜好选择所接收的能力列表(以H264为例)，回复的Answer如下</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">v=<span class="number">0</span></span><br><span class="line">o=- <span class="number">909859953</span> <span class="number">2</span> IN IP4 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">s=-</span><br><span class="line">t=<span class="number">0</span> <span class="number">0</span></span><br><span class="line">a=group:BUNDLE video data</span><br><span class="line">a=msid-semantic:WMS</span><br><span class="line"></span><br><span class="line">m=video <span class="number">1</span> UDP/TLS/RTP/SAVPF <span class="number">100</span> <span class="number">101</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=rtcp:<span class="number">1</span> IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:YyTaBDA/vFKmKipltm8SSnv4/Cg6IQoh<span class="number">-1</span></span><br><span class="line">a=ice-pwd:OdFkQMmoppx2pAYPCWdbCsYA</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> CC:<span class="number">0F</span>:BE:B4:<span class="number">1B</span>:<span class="number">5</span>E:A5:<span class="number">72</span>:B2:<span class="number">49</span>:<span class="number">80</span>:<span class="number">03</span>:<span class="number">54</span>:<span class="number">88</span>:<span class="number">27</span>:<span class="number">42</span>:<span class="number">84</span>:<span class="number">83</span>:<span class="number">6</span>C:F1:<span class="number">8</span>C:C9:<span class="number">23</span>:B3:<span class="number">6</span>C:<span class="number">98</span>:<span class="number">67</span>:<span class="number">87</span>:D8:AF:<span class="number">9</span>C:F4</span><br><span class="line">a=setup:passive</span><br><span class="line">a=mid:video</span><br><span class="line">a=sendrecv</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtpmap:<span class="number">100</span> H264/<span class="number">90000</span></span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">100</span> goog-remb</span><br><span class="line">a=fmtp:<span class="number">100</span> level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span>;profile-level-id=<span class="number">42e01</span>f</span><br><span class="line">a=rtpmap:<span class="number">101</span> rtx/<span class="number">90000</span></span><br><span class="line">a=fmtp:<span class="number">101</span> apt=<span class="number">100</span></span><br><span class="line">a=fmtp:<span class="number">100</span> x-google-start-bitrate=<span class="number">300</span></span><br><span class="line">a=fmtp:<span class="number">100</span> x-google-min-bitrate=<span class="number">80</span></span><br><span class="line">a=fmtp:<span class="number">100</span> x-google-max-bitrate=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">...&lt;&lt;webrtc_video_sending_sdp&gt;&gt;...</span><br><span class="line"></span><br><span class="line">m=application <span class="number">9</span> DTLS/SCTP <span class="number">5000</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=ice-ufrag:YyTaBDA/vFKmKipltm8SSnv4/Cg6IQoh<span class="number">-1</span></span><br><span class="line">a=ice-pwd:OdFkQMmoppx2pAYPCWdbCsYA</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> CC:<span class="number">0F</span>:BE:B4:<span class="number">1B</span>:<span class="number">5</span>E:A5:<span class="number">72</span>:B2:<span class="number">49</span>:<span class="number">80</span>:<span class="number">03</span>:<span class="number">54</span>:<span class="number">88</span>:<span class="number">27</span>:<span class="number">42</span>:<span class="number">84</span>:<span class="number">83</span>:<span class="number">6</span>C:F1:<span class="number">8</span>C:C9:<span class="number">23</span>:B3:<span class="number">6</span>C:<span class="number">98</span>:<span class="number">67</span>:<span class="number">87</span>:D8:AF:<span class="number">9</span>C:F4</span><br><span class="line">a=setup:passive</span><br><span class="line">a=mid:data</span><br><span class="line">a=sctpmap:<span class="number">5000</span> webrtc-datachannel <span class="number">1024</span></span><br></pre></td></tr></table></figure>
<p>如果当前设备也需要发送视频, 则在此处<code>webrtc_video_sending_sdp</code>添加发送视频的基本信息(调用addStream API添加视频后将会自动生成)，如下所示</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=ssrc-group:FID <span class="number">3405199308</span> <span class="number">3405199309</span></span><br><span class="line">a=ssrc:<span class="number">3405199308</span> cname:+T5LKYkAJtmH1eBB</span><br><span class="line">a=ssrc:<span class="number">3405199308</span> msid:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid <span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br><span class="line">a=ssrc:<span class="number">3405199308</span> mslabel:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid</span><br><span class="line">a=ssrc:<span class="number">3405199308</span> label:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> cname:+T5LKYkAJtmH1eBB</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> msid:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid <span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> mslabel:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_streamid</span><br><span class="line">a=ssrc:<span class="number">3405199309</span> label:<span class="number">54b</span>40235<span class="number">-260b</span><span class="number">-4f</span>6b<span class="number">-96</span>cf-e72940e4ea9d_trackid</span><br></pre></td></tr></table></figure>
<p>至此双方的Offer和Answer协商完毕，随后在stun连接成功后将发送/接收视频数据。</p>
<h4 id="c-注意事项"><a href="#c-注意事项" class="headerlink" title="c. 注意事项"></a>c. 注意事项</h4><p>在Chrome中如果同时发送多路视频，目前存在两种方式：</p>
<ul>
<li><p>多路视频方式(Multi-stream)  </p>
<ul>
<li>通过获取多个本地视频流并添加到RTCPeerConenction中(addStream)，createOffer将会自动在同一个<code>m=video</code>和<code>a=mid</code>下生成相应的<code>a=ssrc-group:FID</code>子项.  </li>
<li>获取多个视频流具有如下要求: 后续视频流宽高不能大于第一路视频流，并且第一路视频流是其它路视频流的整数倍(宽和高)。<br>也即是说,其它路视频流实际是第一路视频流的下采样子流。</li>
</ul>
</li>
<li><p>视频联播方式(Simulcast)<br>  最新版本Chrome支持Simulcast, 基本语法与多路视频流类似，具体方式如下:</p>
<ul>
<li>只需要调用一次addStream添加第一个视频流,</li>
<li>发送多路视频(N路)，则需在同一个<code>m=video</code>和<code>a=mid</code>下额外添加(N-1)个<code>a=ssrc-group:FID</code>子项（API不支持需手动修改SDP）,</li>
<li>添加一些simulcast辅助属性(参照下例),并调用setLocalDescription生效</li>
<li><p>多路视频中其它视频流的宽高与第一路视频流的关系，与Multi-stream一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=ssrc-group:FID 111 112</span><br><span class="line">...</span><br><span class="line">a=ssrc-group:FID 211 212</span><br><span class="line">...</span><br><span class="line">a=ssrc-group:SIM 111 211</span><br><span class="line">a=x-google-flag:conference</span><br></pre></td></tr></table></figure>
<p>注意：Simulcast仅支持VP8编码，对于VP9/H264将被自动降为一路视频(firefox类似)。</p>
</li>
</ul>
</li>
</ul>
<h3 id="3-Firefox-SDP"><a href="#3-Firefox-SDP" class="headerlink" title="3. Firefox SDP"></a>3. Firefox SDP</h3><h4 id="1-SDP-Offer-1"><a href="#1-SDP-Offer-1" class="headerlink" title="1). SDP Offer"></a>1). SDP Offer</h4><p>只发送一路视频且支持接收一路视频的示例如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">v=0</span><br><span class="line">o=mozilla...THIS_IS_SDPARTA-57.0.2 8160053667584719276 1 IN IP4 0.0.0.0</span><br><span class="line">s=-</span><br><span class="line">t=0 0</span><br><span class="line">a=sendrecv</span><br><span class="line">a=fingerprint:sha-256 2E:25:88:57:24:8E:54:31:94:59:FA:25:7E:0A:37:D8:48:B7:92:0E:C4:13:0F:AD:68:31:83:08:0A:01:CE:9B</span><br><span class="line">a=group:BUNDLE sdparta_0 sdparta_1</span><br><span class="line">a=ice-options:trickle</span><br><span class="line">a=msid-semantic:WMS *</span><br><span class="line"></span><br><span class="line">m=video 62739 UDP/TLS/RTP/SAVPF 126 121 120 97</span><br><span class="line">c=IN IP4 0.0.0.0</span><br><span class="line">a=sendrecv</span><br><span class="line">a=extmap:1 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time</span><br><span class="line">a=extmap:2 urn:ietf:params:rtp-hdrext:toffset</span><br><span class="line">a=fmtp:126 profile-level-id=42e01f;level-asymmetry-allowed=1;packetization-mode=1</span><br><span class="line">a=fmtp:97 profile-level-id=42e01f;level-asymmetry-allowed=1</span><br><span class="line">a=fmtp:121 max-fs=12288;max-fr=60</span><br><span class="line">a=fmtp:120 max-fs=12288;max-fr=60</span><br><span class="line">a=ice-pwd:588d6957e8e15f85dbdbb853825240c3</span><br><span class="line">a=ice-ufrag:419b2f0d</span><br><span class="line">a=mid:sdparta_0</span><br><span class="line">a=msid:&#123;454102ee-59c8-476d-b1e7-5428bb17a318&#125; &#123;b657b0be-8b2a-4321-8770-2526e16991ea&#125;</span><br><span class="line">a=rtcp-fb:126 nack</span><br><span class="line">a=rtcp-fb:126 nack pli</span><br><span class="line">a=rtcp-fb:126 ccm fir</span><br><span class="line">a=rtcp-fb:126 goog-remb</span><br><span class="line">a=rtcp-fb:121 nack</span><br><span class="line">a=rtcp-fb:121 nack pli</span><br><span class="line">a=rtcp-fb:121 ccm fir</span><br><span class="line">a=rtcp-fb:121 goog-remb</span><br><span class="line">a=rtcp-fb:120 nack</span><br><span class="line">a=rtcp-fb:120 nack pli</span><br><span class="line">a=rtcp-fb:120 ccm fir</span><br><span class="line">a=rtcp-fb:120 goog-remb</span><br><span class="line">a=rtcp-fb:97 nack</span><br><span class="line">a=rtcp-fb:97 nack pli</span><br><span class="line">a=rtcp-fb:97 ccm fir</span><br><span class="line">a=rtcp-fb:97 goog-remb</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtpmap:126 H264/90000</span><br><span class="line">a=rtpmap:121 VP9/90000</span><br><span class="line">a=rtpmap:120 VP8/90000</span><br><span class="line">a=rtpmap:97 H264/90000</span><br><span class="line">a=setup:actpass</span><br><span class="line">a=ssrc:2639986493 cname:&#123;dc684271-f581-421e-aaed-2a2fb69b2e27&#125;</span><br><span class="line"></span><br><span class="line">m=application 62739 DTLS/SCTP 5000</span><br><span class="line">c=IN IP4 0.0.0.0</span><br><span class="line">a=sendrecv</span><br><span class="line">a=ice-pwd:588d6957e8e15f85dbdbb853825240c3</span><br><span class="line">a=ice-ufrag:419b2f0d</span><br><span class="line">a=mid:sdparta_1</span><br><span class="line">a=sctpmap:5000 webrtc-datachannel 256</span><br><span class="line">a=setup:actpass</span><br><span class="line">a=max-message-size:1073741823</span><br></pre></td></tr></table></figure>
<p>从该sdp中可以知道如下信息:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cname为dc684271-f581-421e-aaed-2a2fb69b2e27.</span><br><span class="line">支持的视频编码为H264/VP9/VP8，通过rtpmap payload区分,</span><br><span class="line">发送视频RTP数据ssrc为2639986493，</span><br><span class="line">发送视频streamId为454102ee-59c8-476d-b1e7-5428bb17a318,</span><br><span class="line">发送视频trackId为b657b0be-8b2a-4321-8770-2526e16991ea,</span><br></pre></td></tr></table></figure>
<h4 id="2-SDP-Answer-1"><a href="#2-SDP-Answer-1" class="headerlink" title="2). SDP Answer"></a>2). SDP Answer</h4><p>只接收一路且不发送视频(选择H264编码)的Answer格式如下。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">v=<span class="number">0</span></span><br><span class="line">o=- <span class="number">909859953</span> <span class="number">2</span> IN IP4 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">s=-</span><br><span class="line">t=<span class="number">0</span> <span class="number">0</span></span><br><span class="line">a=sendrecv</span><br><span class="line">a=fingerprint:sha<span class="number">-256</span> B6:<span class="number">51</span>:<span class="number">99</span>:A3:<span class="number">14</span>:B9:E5:AC:<span class="number">98</span>:<span class="number">9</span>C:D1:<span class="number">2</span>C:B5:<span class="number">96</span>:<span class="number">18</span>:FA:<span class="number">01</span>:<span class="number">4</span>A:C0:<span class="number">12</span>:<span class="number">39</span>:<span class="number">32</span>:EB:D9:AC:CB:<span class="number">0</span>D:<span class="number">16</span>:<span class="number">5F</span>:<span class="number">09</span>:<span class="number">3F</span>:EF</span><br><span class="line">a=group:BUNDLE sdparta_0 sdparta_1</span><br><span class="line">a=msid-semantic:WMS</span><br><span class="line"></span><br><span class="line">m=video <span class="number">1</span> UDP/TLS/RTP/SAVPF <span class="number">126</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=fmtp:<span class="number">126</span> profile-level-id=<span class="number">42e01</span>f;level-asymmetry-allowed=<span class="number">1</span>;packetization-mode=<span class="number">1</span></span><br><span class="line">a=ice-pwd:Mxm8W16Cojz6ViZ1xriFr0fE</span><br><span class="line">a=ice-ufrag:jvhy0bTdQQ7XxaxxFCpIIh/<span class="number">6</span>QKwSv7qL<span class="number">-0</span></span><br><span class="line">a=mid:sdparta_0</span><br><span class="line">a=rtcp:<span class="number">1</span> IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=rtcp-fb:<span class="number">126</span> nack</span><br><span class="line">a=rtcp-fb:<span class="number">126</span> nack pli</span><br><span class="line">a=rtcp-fb:<span class="number">126</span> ccm fir</span><br><span class="line">a=rtcp-fb:<span class="number">126</span> goog-remb</span><br><span class="line">a=rtcp-mux</span><br><span class="line">a=rtpmap:<span class="number">126</span> H264/<span class="number">90000</span></span><br><span class="line">a=setup:passive</span><br><span class="line"></span><br><span class="line">m=application <span class="number">9</span> DTLS/SCTP <span class="number">5000</span></span><br><span class="line">c=IN IP4 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">a=sendrecv</span><br><span class="line">a=ice-pwd:Mxm8W16Cojz6ViZ1xriFr0fE</span><br><span class="line">a=ice-ufrag:jvhy0bTdQQ7XxaxxFCpIIh/<span class="number">6</span>QKwSv7qL<span class="number">-0</span></span><br><span class="line">a=mid:sdparta_1</span><br><span class="line">a=sctpmap:<span class="number">5000</span> webrtc-datachannel <span class="number">256</span></span><br><span class="line">a=setup:passive</span><br></pre></td></tr></table></figure>
<p>如果当前接收一路视频且需要发送一路视频，则需要添加发送信息(格式与offer类似)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=msid:&#123;54b40235-260b-4f6b-96cf-e72940e4ea9d_streamid&#125; &#123;54b40235-260b-4f6b-96cf-e72940e4ea9d_trackid&#125; </span><br><span class="line">...</span><br><span class="line">a=ssrc:1287668962 cname:&#123;+T5LKYkAJtmH1eBB&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3). 注意事项"></a>3). 注意事项</h4><p>如果同时发送多路视频，Firefox也存在两种方式：</p>
<ul>
<li><p>多路视频方式(Multi-stream)</p>
<ul>
<li>Firefox将会添加新的<code>m=video</code>和<code>a=mid</code>并在其中添加<code>a=ssrc:...</code>子项。</li>
<li>其它与Chrome中类似。</li>
</ul>
</li>
<li><p>视频联播方式(Simulcast)<br>  Firefox支持使用API(rid)设置Simulcast属性，只支持VP8编码。<br>  通过rid属性标识多组流(rtp扩展头也将带有这个属性).</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var videoSender = RTCPeerConnection.getSenders()[0];</span><br><span class="line">videoSender.setParameters(&#123;encodings: [</span><br><span class="line">	&#123; rid: &quot;r0&quot;, active: true, priority: &quot;low&quot; &#125;,</span><br><span class="line">	&#123; rid: &quot;r1&quot;, active: true, priority: &quot;high&quot; &#125;</span><br><span class="line">]);</span><br><span class="line">	</span><br><span class="line">&gt;&gt;offer格式</span><br><span class="line">a=rid:r0 send</span><br><span class="line">a=rid:r1 send</span><br><span class="line">a=simulcast: send rid=r0;r1</span><br><span class="line">	</span><br><span class="line">&gt;&gt;answer格式:</span><br><span class="line">a=rid:r0 recv</span><br><span class="line">a=rid:r1 recv</span><br><span class="line">a=simulcast: recv rid=r0;r1</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[WebRTC实时通信 (1) - 架构]]></title>
      <url>http://zenvv.com/2018/01/28/webrtc-arch/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>实时通信，最常见例子是个人电话，可以称之为Peer模式。而在企业组织等群体性的通信中(同时多人参与通信)，电话会议是更加有效的一种交流方式，这种模式叫做Server模式。</p>
<p>无论是Peer或是Server模式，信令传递通道(Signal)都是不可缺少，用于建立数据通道。在WebRTC实时通信这个范畴中，Peer和Server模式的主要不同在于的数据通道的不同。</p>
<h3 id="1-信令通道"><a href="#1-信令通道" class="headerlink" title="1. 信令通道"></a>1. 信令通道</h3><figure class="highlight plain"><figcaption><span>|Peer-A| <-> |Signal Server| <-> |Peer-B| ```</-></-></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">节点A与B之间需要相互传递一系列信息，才能建立通信，基本流程如下:</span><br><span class="line"></span><br><span class="line">首先, 用户A和B需要到Signal Server注册自己的地址等信息，以便Signal Server随时找到自己。  </span><br><span class="line">其次，用户A需要与B通信，将该请求通过Signal Server发送到B;B决定是否接受该请求。  </span><br><span class="line">最后，信令通道建立成功。</span><br><span class="line"></span><br><span class="line">针对webrtc通信，信令通道除了一些日常的用户行为管理功能之外，还需要传递SDP offer/answer/ICE candidate等数据。</span><br><span class="line"></span><br><span class="line">目前Signal通道采用最流行的协议是SIP协议, 不仅能够满足WebRTC的所有基本需求，而且能够非常好的兼容第三方产品(这对企业应用尤为的重要)。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2. 对等模式</span><br><span class="line"></span><br><span class="line">```|Peer-A| &lt;-&gt;  ..data.. &lt;-&gt; |Peer-B|</span><br></pre></td></tr></table></figure>
<p>信令通道主要用来传递SDP信息(offer/answer/ICE candidate)以及用户的管理功能。</p>
<p>当STUN/TURN连接成功后，WebRTC模块将开始建立数据通道用于音视频等数据的传输。</p>
<p>为了与其他产品的互联，WebRTC信令通道大多采取sip协议。</p>
<p>附注： Chrome代码中提供的示例是通过HTTP协议作为信令通道的。</p>
<h3 id="3-中心模式"><a href="#3-中心模式" class="headerlink" title="3. 中心模式"></a>3. 中心模式</h3><p><code>|Peer-A| &lt;-&gt; |data server| &lt;-&gt; |Peer-B|</code></p>
<p>当用户同时与多个用户进行通信时，Peer模式有其巨大的局限性：需要同时建立多个不同的WebRTC实例。故而在实际的产品中是以中心模式为主的，此类开源产品主要有Kurento/Janus.</p>
<h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4. 解决方案"></a>4. 解决方案</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[WebRTC实时通信 (0) - 浏览器]]></title>
      <url>http://zenvv.com/2018/01/28/webrtc-browser/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="1-WebRTC"><a href="#1-WebRTC" class="headerlink" title="1. WebRTC"></a>1. WebRTC</h3><p>在2011年之前，实时音视频的开发具有非常大的门槛，全球仅有很少的几家公司拥有这种技术。随着互联网的发展及其实时音视频需求的增大，一种更为简易的开发方式便顺势而出 - WebRTC。</p>
<p>WebRTC(Web Real-Time Communications)是基于Web的一种实时通信技术平台，即在浏览器节点间进行彼此音频，视频和消息等数据的交互。</p>
<p>WebRTC通过Web方式对音视频应用进行开发，大大简化了开发难度并进一步推动了音视频应用的普及。</p>
<p>当前,几家主流的浏览器均已经支持WebRTC技术，如Microsoft Edge/Apple Safari-11/Google Chrome/Mozilla Firefox等。<br>其中，Edge和Safari距离实际使用仍然存在较大的差距，这里将仅叙述具有代表性的Chrome和Firefox。</p>
<h3 id="2-音视频特性"><a href="#2-音视频特性" class="headerlink" title="2. 音视频特性"></a>2. 音视频特性</h3><p>对基本audio/video特性的支持如下。</p>
<table>
<thead>
<tr>
<th>Browser</th>
<th>Audio</th>
<th>Video</th>
<th>Video Simulcast</th>
<th>Video MultiStream</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome</td>
<td>opus/DTMF</td>
<td>H264/VP8</td>
<td>VP8-only</td>
<td>H264/VP8</td>
</tr>
<tr>
<td>Firefox</td>
<td>opus/DTMF</td>
<td>H264/VP8</td>
<td>VP8-only</td>
<td>H264/VP8</td>
</tr>
</tbody>
</table>
<p>对RTCP特性支持如下:</p>
<table>
<thead>
<tr>
<th>Browser</th>
<th>RTCP PLI</th>
<th>RTCP NACK</th>
<th>RTCP REMB</th>
<th>ulpfec</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>Firefox</td>
<td>yes</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
</tr>
</tbody>
</table>
<h3 id="3-API介绍"><a href="#3-API介绍" class="headerlink" title="3. API介绍"></a>3. API介绍</h3><h5 id="1-getUserMedia"><a href="#1-getUserMedia" class="headerlink" title="1). getUserMedia"></a>1). getUserMedia</h5><p>支持webrtc的浏览器都有类似Navigator.getUserMedia这样的API, 用于获取当前系统的设备资源，如Speaker/Micphone/Camera/DesktopSharing等.</p>
<p>最新标准中已经废弃使用navigator.getUserMedia，推荐navigator.mediaDevices.getUserMedia.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">navigator.getUserMedia = navigator.getUserMedia ||</span><br><span class="line">                         navigator.webkitGetUserMedia ||  <span class="comment">// chrome</span></span><br><span class="line">                         navigator.mozGetUserMedia;       <span class="comment">// firefox</span></span><br><span class="line"><span class="keyword">if</span> (navigator.getUserMedia) &#123;</span><br><span class="line">	<span class="keyword">var</span> constraints = &#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: &#123; <span class="attr">width</span>: <span class="number">1280</span>, <span class="attr">height</span>: <span class="number">720</span> &#125; &#125;; </span><br><span class="line">   navigator.getUserMedia(constraints&#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">'video-element-id'</span>);</span><br><span class="line">         video.srcObject = stream;</span><br><span class="line">         video.onloadedmetadata = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">           video.play();</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"The following error occurred: "</span> + err.name);</span><br><span class="line">      &#125;</span><br><span class="line">   );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"getUserMedia not supported"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-RTCPeerConnection"><a href="#2-RTCPeerConnection" class="headerlink" title="2). RTCPeerConnection"></a>2). RTCPeerConnection</h5><p>RTCPeerConnection是Webrtc最基本的API接口，用于管理媒体属性，并与远程节点建立数据连接。<br>RTCPeerConnection基本的媒体单位是MediaStream(最新标准中推荐使用MediaTrack).</p>
<p>在媒体数据连接之外，RTCPeerConnection还支持在相同的连接上管理创建数据通道(createDataChannel),用于传输一些带外数据（如媒体控制数据）.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RTCPeerConnection():</span><br><span class="line">	addIceCandidate()</span><br><span class="line">	addStream()</span><br><span class="line">	addTrack()</span><br><span class="line">	createDataChannel() </span><br><span class="line">	createOffer()</span><br><span class="line">	setLocalDescription()</span><br><span class="line">	setRemoteDescription()</span><br><span class="line">	onAddStream()</span><br><span class="line">	getSenders()</span><br></pre></td></tr></table></figure>
<h3 id="4-API使用示例"><a href="#4-API使用示例" class="headerlink" title="4. API使用示例"></a>4. API使用示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A发送视频，B观看视频.</span><br><span class="line">A和B注册建立signal通道(能够彼此互相通信)。</span><br><span class="line">A创建RTCPeerConnection对象(A-pc).</span><br><span class="line">B创建RTCPeerConnection对象(B-pc).</span><br></pre></td></tr></table></figure>
<h5 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1). 准备阶段"></a>1). 准备阶段</h5><p>Step1: A发送视频</p>
<blockquote>
<p>调用getUserMedia获取本地视频流添加到A-pc中(addStream)。<br>调用createOffer()生成A-sdp-offer.<br>调用setLocalDescription设置A-sdp-offer.<br>通过signal通道将A-sdp-offer发送给B.</p>
</blockquote>
<p>Step2: B观看视频<br>&gt;<br>调用createOffer()生成B-sdp-offer.<br>调用setLocalDescription设置B-sdp-offer.<br>通过signal通道将B-sdp-offer发送给A.  </p>
<h5 id="2-交互阶段"><a href="#2-交互阶段" class="headerlink" title="2). 交互阶段"></a>2). 交互阶段</h5><p>&gt;<br>A调用setRemoteDescription()设置收到的B-sdp-offer.<br>B调用setRemoteDescription()设置收到的A-sdp-offer.<br>随后A与B交互彼此的SDP ICE candidate数据直到ice stun/turn连接成功。<br>   (调用addIceCandidate()处理ICE sdp消息).<br>ICE连接成功后B将会收到onAddStream事件 - 远程stream建立成功.</p>
<h5 id="3-媒体数据互通"><a href="#3-媒体数据互通" class="headerlink" title="3). 媒体数据互通"></a>3). 媒体数据互通</h5><p>&gt;<br>A发送视频数据，B接收视频数据并解码</p>
<h3 id="5-现状"><a href="#5-现状" class="headerlink" title="5. 现状"></a>5. 现状</h3><p>目前，WebRTC的标准仍在持续改进中，各个厂商的浏览器对其支持的力度也不尽相同。其中，Chrome对最新标准API的支持较为迟缓，Firefox比较积极但不够稳定成熟。</p>
<p>总体上，开放的API接口对基本功能的支持已经覆盖，但是对更精细的控制不足以及也缺少相应的文档说明，故而在实际使用中需要研究浏览器代码逻辑和修改SDP属性来达到某些具体的需求。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat-cyclic]]></title>
      <url>http://zenvv.com/2016/07/04/tomcat-cyclic/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>tomcat启动加载web容器过程中产生异常(非必现情况)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Unable to complete the scan for annotations for web application [/website] due to a StackOverflowError. Possible root causes include a too low setting for -Xss and illegal cyclic inheritance dependencies. The class hierarchy being processed was [org.bouncycastle.asn1.ASN1EncodableVector-&gt;org.bouncycastle.asn1.DEREncodableVector-&gt;org.bouncycastle.asn1.ASN1EncodableVector]</span><br></pre></td></tr></table></figure>
<p>log提示中可能存在两个原因:<br>1) -Xss过小导致栈溢出<br>2) 错误的循环依赖  </p>
<p>若通过调整-Xss参数进行测试, 发现大多数情况下都可以正常启动.<br>但根源却不在于-Xss参数, 另外tomcat8官方文档中已经明确说明-Xss已经desperated, 其值可以根据实际运行自动调整.</p>
<p>即是说该问题并非是由于-Xss过小导致溢出, 而是由于illegal cyclic inheritance dependencies.</p>
<p>通常, 这是由于pom.xml的jar包依赖树中, 可能存在如下情况之一:<br>1) 依赖同一个jar包的多个版本库<br>2) 存在循环依赖.  </p>
<p>具体, 通过mvn dependency:tree检测当前项目的依赖情况, 在存在上述情况的包引入中添加exclude语句, 去掉重复的jar包, 即可从根本上解决问题.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ffmpeg-usage]]></title>
      <url>http://zenvv.com/2016/07/04/ffmpeg-usage/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="ffmpeg常用命令参数"><a href="#ffmpeg常用命令参数" class="headerlink" title="ffmpeg常用命令参数"></a>ffmpeg常用命令参数</h1><h2 id="devices"><a href="#devices" class="headerlink" title="devices"></a>devices</h2><p>show system devices/codecs/..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -devices  </span><br><span class="line">ffmpeg -devices true -f dshow -i dummy  </span><br><span class="line">ffmpeg -encoders  </span><br><span class="line">ffmpeg -decoders</span><br><span class="line"></span><br><span class="line"># read audio/video data from device  </span><br><span class="line">ffmpeg -f dshow -i video=&quot;Integrated Camera&quot; -f dshow -i audio=&quot;..&quot;  </span><br><span class="line">ffmpeg -f video4linux2 -i /dev/video0</span><br></pre></td></tr></table></figure>
<h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>video encoder</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c:v libx264 -v profile baseline -s 640x480 -b:v 512k -g 12</span><br></pre></td></tr></table></figure>
<p>-c:v:                      codec of video<br>-b:v bitrate:              bitrate of video(-b)<br>-s size:                  frame size(WxH)<br>-r rate:                frame rate(HZ, e.g. 90000)<br>-g size:                 gop size(default 12)<br>-aspect aspect:            aspect ratio (4:3, 16:9 or 1.3333, 1.7777)<br>-v profile baseline:      codec profile<br>-keyint_min <int>:        minimum interval between IDR-frames(default 25)<br>-force_key_frames timestamps:  force key frames at timestamps, e.g. -force_key_frames 0,2,4,6,8<br>-vn:                    diasbale video</int></p>
<p>if issues happen as below:<br>1). “ffmpeg Past duration 0.999992 too large”<br>due to uncertain framerates, fix it by setting -filter:v fps=(your framerate).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-filter:v fps=20</span><br></pre></td></tr></table></figure></p>
<p>2). “[video input] too full or near too full”<br>This is because h264 encoder requires yuv420 input<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-pix_fmt yuv420p</span><br></pre></td></tr></table></figure></p>
<h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c:a aac -ar 44100 -ac 1 -ab 64k -strict -2 -f flv rtmp://localhost/hls/test</span><br></pre></td></tr></table></figure>
<p>-c:a codec:              codec of audio<br>-b:a bitrate:            audio bitrate(-ab)<br>-ar rate:                audio sampling rate(HZ, default 0)<br>-ac channels:            audio channels(default 0)<br>-f fmt:                    force format<br>-an:                    disable audio</p>
<h2 id="outputs"><a href="#outputs" class="headerlink" title="outputs"></a>outputs</h2><p>duplicate outputs. One to file, second to nginx-rtmp.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input1 -i input2 </span><br><span class="line">	-acodec … -vcodec … output1 </span><br><span class="line">	-acodec … -vcodec … output2 </span><br><span class="line">	-acodec … -vcodec … output3</span><br><span class="line">    </span><br><span class="line">ffmpeg -i input </span><br><span class="line">	-s 1280x720 -acodec … -vcodec … output1 </span><br><span class="line">	-s 640x480  -acodec … -vcodec … output2 </span><br><span class="line">	-s 320x240  -acodec … -vcodec … output3</span><br></pre></td></tr></table></figure></p>
<h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><p>ffmpeg examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -re -i test.mp4 -c copy -f flv rtmp://localhost/hls/test0  </span><br><span class="line">ffmpeg -re -i test.mp4 </span><br><span class="line">	-pix_fmt yuv420p -c:v libx264 -vprofile baseline </span><br><span class="line">	-c:a aac -ar 44100 -ac 1 -strict -2 </span><br><span class="line">	-f flv rtmp://localhost/hls/test1 </span><br><span class="line">ffmpeg -f dshow -i video=&quot;Integrated Camera&quot; -f dshow -i audio=&quot;Audio&quot; </span><br><span class="line">    -pix_fmt yuv420p -c:v libx264 -vprofile baseline -s 640x480 -b:v 512k -filter:v fps=20 -g 10 </span><br><span class="line">	-c:a aac -ar 44100 -ac 1 -b:a 64k -strict -2 </span><br><span class="line">	-f flv rtmp://localhost/hls/test2</span><br></pre></td></tr></table></figure></p>
<p>ffplay examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffplay -fflags nobuffer rtmp://localhost/hls/mystream -loglevel verbose  </span><br><span class="line">ffplay -live_start_index -1 hls://localhost/app/mystream.m3u8</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[jenkins工具]]></title>
      <url>http://zenvv.com/2016/06/05/jenkins-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天介绍一个强大的工具 - jenkins, 其本身是一种CI&amp;CD平台, 具有设计合理简洁等优点.  </p>
<p>jenkins具有的几个基本特点:</p>
<p>a. 既有内建账户管理模式, 也支持ldap系统.<br>b. 支持多种操作系统: linux/windows/…<br>c. 支持多种内建脚本语言: grovvy/python/shell/bat.<br>d. 支持单机模式, master/slave模式和cluster模式.<br>e. 拥有丰富的扩展插件.  </p>
<p>除了其本职功能之外, jenkins容易将传统的后台模式转为前台可视化, 方面用户的使用.<br>可以适用于如下几种应用场景中:   </p>
<p>a. 普通调度任务, 如周期性和触发任务<br>b. 制造业的自动化调度任务<br>c. 各种系统及服务的状态监控  </p>
<p>采用docker方式安装使用jenkins非常简单, 如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins</span><br><span class="line">docker run -d -it -p 8080:8080 -e JAVA_OPTS=&quot;-Duser.timezone=Asia/Shanghai&quot; jenkins</span><br></pre></td></tr></table></figure></p>
<p>然后即可以通过浏览器访问<code>http://ip:8080/</code>进行登录使用.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx的core模块]]></title>
      <url>http://zenvv.com/2016/05/28/nginx-core/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>ngx_http_core_module提供了nginx最基本的功能, 包括一些内置变量和配置文件中的基本指令.</p>
<h4 id="1-常见内置变量"><a href="#1-常见内置变量" class="headerlink" title="1. 常见内置变量"></a>1. 常见内置变量</h4><p>1) uri相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$uri: 当前请求uri  </span><br><span class="line">$document_uri: 同$uri  </span><br><span class="line">$request_uri: 原始完整请求URI(带参数)   </span><br><span class="line">$scheme: 请求scheme, “http” or “https”  </span><br><span class="line">$https: 如果处于ssl模式则值为“on”, 否则为空  </span><br><span class="line">$host: 请求的server地址, 具体见下面的描述  </span><br><span class="line">$cookie_name: cookie名</span><br></pre></td></tr></table></figure></p>
<p>其中, nginx rewrite模块是基于内置变量$request_uri进行处理的.</p>
<p>2) remote请求相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$remote_addr: 客户端地址  </span><br><span class="line">$remote_port: 客户端端口  </span><br><span class="line">$remote_user: Basic认证中的用户名     </span><br><span class="line">$request: 原始完整请求URI  </span><br><span class="line">$request_body: request body</span><br><span class="line">$is_args: 如果有参数值为&quot;?&quot;, 否则为空  </span><br><span class="line">$args: 请求uri中的参数(?后的部分)  </span><br><span class="line">$query_string: 同$args</span><br></pre></td></tr></table></figure></p>
<p>3) server相关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$server_addr: 接收请求的server地址  </span><br><span class="line">$server_name: 接收请求的server名字    </span><br><span class="line">$server_port: 接收请求的server端口    </span><br><span class="line">$server_protocol: 请求协议, “HTTP/1.0”, “HTTP/1.1”, 或 “HTTP/2.0”</span><br></pre></td></tr></table></figure></p>
<p>4) 其它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$hostname: nginx主机名      </span><br><span class="line">$limit_rate: 限速   </span><br><span class="line">$nginx_version: nginx版本</span><br></pre></td></tr></table></figure></p>
<h4 id="2-host与-http-host"><a href="#2-host与-http-host" class="headerlink" title="2. $host与$http_host"></a>2. $host与$http_host</h4><p>$http_host是对应http请求头的Host完整值.<br>$host是可能是以下几种情形中的一种(按顺序处理):<br>　　a. http请求url中的host name,<br>　　b. http请求header中的Host部分值(除去port),<br>　　c. 处理该请求server{}中的server_name.</p>
<h4 id="3-location指令"><a href="#3-location指令" class="headerlink" title="3. location指令"></a>3. location指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>可以被用在server/location等指令语句中.<br>location有两种匹配模式: prefix匹配(location uri)或者正则匹配.<br>nginx首先处理prefix匹配(无论配置文件中的顺序), 然后进行正则匹配.  </p>
<p>匹配规则的含义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;:  前缀部分匹配  </span><br><span class="line">“=”: 精确完整匹配, 成功则停止其它匹配处理   </span><br><span class="line">&quot;~&quot;: 大小写敏感匹配  </span><br><span class="line">&quot;~*&quot;: 大小写无关匹配  </span><br><span class="line">&quot;^~&quot;: 最长大小写敏感匹配, 匹配成功则不检查其它正则.</span><br></pre></td></tr></table></figure></p>
<p>“location @..”是定义一个命名location, 通常用于请求重定向.</p>
<h4 id="4-error-page指令"><a href="#4-error-page指令" class="headerlink" title="4. error_page指令"></a>4. error_page指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page code ... [=[response]] uri;</span><br></pre></td></tr></table></figure>
<p>可以被用在http/server/location/if等指令语句中.</p>
<p>使用内部请求处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_page 404             /404.html;</span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line">error_page 404 =200        /empty.gif;</span><br><span class="line">error_page 404 =           /404.php;</span><br></pre></td></tr></table></figure></p>
<p>使用重定向进行处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_page 403             http://example.com/forbidden.html;</span><br><span class="line">error_page 404 =301        http://example.com/notfound.html;</span><br></pre></td></tr></table></figure></p>
<p>使用命名location进行处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    error_page 404 = @fallback;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location @fallback &#123;</span><br><span class="line">    proxy_pass http://backend;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx的rewrite模块]]></title>
      <url>http://zenvv.com/2016/05/26/nginx-rewrite/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>ngx_http_rewrite_module是通过对内置变量$request_uri进行正则处理, 改写用户请求的uri, 包括多条常用的指令如break/if/return/rewrite等.</p>
<h5 id="1-break指令"><a href="#1-break指令" class="headerlink" title="1. break指令"></a>1. break指令</h5><p>停止当前request_uri的后续rewrite规则处理.<br>可以在server/location/if等指令中使用.</p>
<h5 id="2-if指令"><a href="#2-if指令" class="headerlink" title="2. if指令"></a>2. if指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (condition) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">condition:</span><br><span class="line">	a. 变量名: 空字符串或&quot;0&quot;则为false, 否则为true</span><br><span class="line">    b. 字符串变量比较:  “=”和“!=” </span><br><span class="line">    c. 正则匹配: </span><br><span class="line">    	“~”(“!~”)        - 大小写敏感字符串比较</span><br><span class="line">        “~*”(“!~*”)      - 大小写无关字符串比较</span><br><span class="line">        “-f”(“!-f”)      - 检测文件是否存在</span><br><span class="line">        “-d”(“!-d”)      - 检测文件夹是否存在</span><br><span class="line">        “-e”(“!-e”)      - 检测文件/文件夹/符号连接是否存在</span><br><span class="line">        “-x”(“!-x”)      - 检测文件是否可执行</span><br></pre></td></tr></table></figure>
<p>可以在server/location等指令中使用.</p>
<h5 id="3-return指令"><a href="#3-return指令" class="headerlink" title="3. return指令"></a>3. return指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return code [text];</span><br><span class="line">return code URL;</span><br><span class="line">return URL;</span><br></pre></td></tr></table></figure>
<p>停止后续所有处理返回code给client端, 注意return 444将关闭连接不返回任何数据.<br>可以在server/location/if等指令中使用.</p>
<p>通过return将http重定向到https, 有两种方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># server_name is customed by user in server.</span><br><span class="line">return    301 https://$server_name$request_uri;</span><br><span class="line"># http_host is a embedded variable in nginx.</span><br><span class="line">return    301 https://$http_host$request_uri;</span><br></pre></td></tr></table></figure></p>
<h5 id="4-rewrite指令"><a href="#4-rewrite指令" class="headerlink" title="4. rewrite指令"></a>4. rewrite指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite regex replacement [flag];</span><br></pre></td></tr></table></figure>
<p>可以在server/location/if等指令中使用.<br>rewrite按照在配置文件中出现的顺序进行处理, 具体行为由flag决定.<br>但是如果某个replacement值由<a href="http://(https://)开头" target="_blank" rel="noopener">http://(https://)开头</a>, 则停止处理返回给client.  </p>
<p>四种flag作用:<br>last: 停止当前rewirte模块后续规则处理.<br>　　将修改后的url重新按照location规则进行匹配处理.<br>　　即是说(rewrite .. last)在location{}中可能被循环处理, 而在server{}中不会.<br>　　循环次数超过10次则停止处理并返回500错误.<br>break: 与上面的break指令一样.<br>redirect: 返回一个临时302重定向.<br>permanent: 返回一个永久301重定向.  </p>
<p>例如给请求url添加前缀prefix:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ^~ / &#123;</span><br><span class="line">        if ($request_uri !~ ^/prefix) &#123;</span><br><span class="line">            	rewrite ^(.*)$ /prefix/$1 break;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="5-rewrite-log指令"><a href="#5-rewrite-log指令" class="headerlink" title="5. rewrite_log指令"></a>5. rewrite_log指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite_log on | off;</span><br></pre></td></tr></table></figure>
<p>可以在http/server/location/if等指令中使用.<br>启动rewrite log(写到文件error_log), 日志级别为notice.  </p>
<h5 id="6-set指令"><a href="#6-set指令" class="headerlink" title="6. set指令"></a>6. set指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set $variable value;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[视频编码的颜色空间]]></title>
      <url>http://zenvv.com/2016/05/24/video-colorspace/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>简单来说，视频编解码即是对构成图像的颜色进行处理，减少表达颜色效果所需要的比特数。<br>颜色效果是由颜色空间(colorspace)来表达，在视频编解码中常用的有两种: RGB和YUV。</p>
<h3 id="1-RGB和YUV"><a href="#1-RGB和YUV" class="headerlink" title="1. RGB和YUV"></a>1. RGB和YUV</h3><p>RGB即三基色(红绿蓝)，是日常生活中使用的一种表达方式。<br>三种基色的地位基本平等，在计算机里也基本由同样bit数来表达(当然也存在类似RGB565的)。  </p>
<p>而YUV是根据人眼视觉系统的特性而定义的一种颜色空间。<br>其基本理论是：人眼对亮度信息比色度和饱和度更为敏感。<br>因而可以通过对亮度信息分配更多的bit并减少饱和度bit数，从整体上减少bit数而不减弱观看效果，起到压缩效果。</p>
<p>YUV常见的格式有: I420, YV12, NV12, NV21, 其像素排布如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I420:   (1Y) + (1/4U) + (1/4V), | Y...Y | U..U | V..V |</span><br><span class="line">YV12:   (1Y) + (1/4U) + (1/4V), | Y...Y | V..V | U..U |</span><br><span class="line">NV12:   (1Y) + (1/4U) + (1/4V), | Y...Y | UVUV.. |</span><br><span class="line">NV21:   (1Y) + (1/4U) + (1/4V), | Y...Y | VUVU.. |</span><br></pre></td></tr></table></figure>
<h3 id="2-YUV内存分布"><a href="#2-YUV内存分布" class="headerlink" title="2. YUV内存分布"></a>2. YUV内存分布</h3><p><img src="https://github.com/PeterXu/wiki-streaming/raw/master/trunk/res/colorspace_data.png" alt="YUV_DATA"></p>
<h3 id="3-YUV转换示例"><a href="#3-YUV转换示例" class="headerlink" title="3. YUV转换示例"></a>3. YUV转换示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># color convert</span><br><span class="line">void convert_nv21_to_i420(const char *src, char *dst, int stride, int height)</span><br><span class="line">&#123;</span><br><span class="line">    int ysize = stride * height;</span><br><span class="line">    int usize = ysize / 4;</span><br><span class="line"></span><br><span class="line">    char *udst = dst + ysize;</span><br><span class="line">    char *vdst = dst + ysize + usize;</span><br><span class="line"></span><br><span class="line">    const char *vusrc = src + ysize;</span><br><span class="line"></span><br><span class="line">    /* copy y color */</span><br><span class="line">    memcpy(dst, src, ysize);</span><br><span class="line"></span><br><span class="line">    /* copy u and v color */</span><br><span class="line">    for (int i=0; i &lt; usize; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        udst[i] = vusrc[i*2+1];</span><br><span class="line">        vdst[i] = vusrc[i*2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清晨的轻风]]></title>
      <url>http://zenvv.com/2016/05/24/morning-breeze/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>— 早醒</p>
<p>窗外<br>第一趟列车<br>正急速驶过<br>打破短暂的宁静</p>
<p>带起<br>一线清风<br>懒懒地飘进<br>抚摸着手臂<br>丝丝凉意  </p>
<p>抬头<br>眯起天空<br>一丝白云<br>在缓缓移动</p>
]]></content>
      
        <categories>
            
            <category> 胡诌 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[consul集群建立及使用方式]]></title>
      <url>http://zenvv.com/2016/05/17/consul-cluster-config/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>consul是一种为分布式系统提供查询服务的系统, 既可以支持HTTP REST的方式提供服务, 也支持DNS接口与已有的dns服务集成.</p>
<p>为了维持consul的高可用性, 一般通过集群的方式对分布式系统提供服务, 集群创建方法如下.</p>
<h3 id="1-在各节点中启动consul-server"><a href="#1-在各节点中启动consul-server" class="headerlink" title="1. 在各节点中启动consul server"></a>1. 在各节点中启动consul server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">agent -bind NODE1_IP -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin -server -bootstrap-expect=2</span><br><span class="line">agent -bind NODE2_IP -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin -server -bootstrap-expect=2</span><br><span class="line">agent -bind NODE3_IP -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin -server -bootstrap-expect=2</span><br></pre></td></tr></table></figure>
<p>-client: 绑定的客户端地址(HTTP/DNS/RPC), 默认为127.0.0.1;<br>-data-dir: agent数据存放路径;<br>-config-dir: agent配置加载路径;<br>-ui: 启动内建web管理界面;<br>-dc: datacenter名称;<br>-rejoin: agent自动重新加入集群即使之前已主动退出<br>-server: agent运行模式;<br>-bootstrap-expect: datacenter中需求的最少server数目.  </p>
<h3 id="2-建立集群"><a href="#2-建立集群" class="headerlink" title="2. 建立集群"></a>2. 建立集群</h3><p>在其中一个节点中(例如在node1), 添加其余server节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consul join $&#123;NODE2_IP&#125; </span><br><span class="line">consul join $&#123;NODE3_IP&#125; </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h3 id="3-consul服务方式"><a href="#3-consul服务方式" class="headerlink" title="3. consul服务方式"></a>3. consul服务方式</h3><p>应用程序有以下几种方式使用consul集群服务, 具体如下<br>a. 直接连接集群中的任一个consul server;<br>b. 设置haproxy(+keepalived)代理consul集群, 通过haproxy提供服务;<br>c. 建立consul client然后连接client提供服务</p>
<h3 id="4-创建client"><a href="#4-创建client" class="headerlink" title="4. 创建client"></a>4. 创建client</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">agent -advertise $&#123;client_ip&#125; -client 0.0.0.0 -data-dir /consul/data -config-dir /consul/config -ui -dc dc_consul -rejoin</span><br><span class="line">consul join $&#123;NODE1_IP&#125;</span><br></pre></td></tr></table></figure>
<p>为防止单点故障, 每一个应用程序都可以建立属于自己的client服务.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[lsyncd+rsync文件同步]]></title>
      <url>http://zenvv.com/2016/05/15/lsyncd-rsync-config/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Lsyncd (Live Syncing Daemon), 用于实时将本地文件备份到远程目录, 集成了inotify/fsevents服务, 能够支持rsync/ssh多种数据同步方式.</p>
<p>这里将介绍lsyncd+rsync的基本使用.</p>
<h3 id="1-简单示例"><a href="#1-简单示例" class="headerlink" title="1. 简单示例"></a>1. 简单示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsyncd -rsync /home remotehost.org::share/</span><br></pre></td></tr></table></figure>
<p>监控本地目录/home的文件事件, 实时将其更新到远程rsync服务share模块的目的目录中.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsyncd -rsyncssh /home remotehost.org backup-home/</span><br></pre></td></tr></table></figure></p>
<p>监控本地目录/home的文件事件, 但通过ssh实时将其更新到远程目录backup-home中. (需要设置ssh为无密码登录).</p>
<h3 id="2-lsyncd-rsync模式"><a href="#2-lsyncd-rsync模式" class="headerlink" title="2. lsyncd+rsync模式"></a>2. lsyncd+rsync模式</h3><h4 id="0-基本数据流"><a href="#0-基本数据流" class="headerlink" title="0). 基本数据流"></a>0). 基本数据流</h4><p>a. 源节点: lsyncd服务端 + rsync客户端<br>b. 目的节点: rsyncd服务端</p>
<p>数据流方向: 将文件从源节点中备份到目的节点的存储空间中.</p>
<h4 id="1-源文件端"><a href="#1-源文件端" class="headerlink" title="1). 源文件端"></a>1). 源文件端</h4><h5 id="a-lsyncd服务配置文件"><a href="#a-lsyncd服务配置文件" class="headerlink" title="a. lsyncd服务配置文件"></a>a. lsyncd服务配置文件</h5><p>/etc/lsyncd/lsyncd.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">settings &#123;</span><br><span class="line">    logfile         = &quot;/var/log/lsyncd.log&quot;,</span><br><span class="line">    statusFile      = &quot;/var/run/lsyncd.status&quot;,</span><br><span class="line">    nodaemon        = false,</span><br><span class="line">    statusInterval  = 10,</span><br><span class="line">    inotifyMode     = &quot;CloseWrite&quot;,</span><br><span class="line">    maxProcesses    = 4,</span><br><span class="line">    maxDelays       = 4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sync &#123;</span><br><span class="line">    default.rsync,</span><br><span class="line">    source      = &quot;/tmp/src&quot;,</span><br><span class="line">    target      = &quot;rsync_user@192.168.10.10::rsync_mod&quot;,</span><br><span class="line">    -- init        = false,</span><br><span class="line">    delay       = 30,</span><br><span class="line">    exclude     = &#123; &quot;lost+found&quot;, &quot;.tmp&quot;, &quot;.*&quot; &#125;,</span><br><span class="line">    -- excludeFrom = &quot;/etc/rsync_exclude.lst&quot;,</span><br><span class="line">    delete      = &quot;running&quot;,</span><br><span class="line"></span><br><span class="line">    rsync       = &#123;</span><br><span class="line">        binary      = &quot;/usr/bin/rsync&quot;,</span><br><span class="line">        password_file = &quot;/etc/lsyncd/rsyncd.pass&quot;,</span><br><span class="line">        _extra = &#123;&quot;--temp-dir=/tmp/&quot;&#125;,</span><br><span class="line"></span><br><span class="line">        bwlimit     = 4096, -- kb/s</span><br><span class="line">        archive     = true,</span><br><span class="line">        compress    = true,</span><br><span class="line">        verbose     = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>stausFile: 定义状态文件, 记录已经处理的事件.<br>nodaemon=false: 表示启用守护模式，默认前端模式.<br>statusInterval: 将lsyncd的状态写入上面的statusFile的间隔，默认10秒.<br>inotifyMode: 指定inotify监控的事件，默认是CloseWrite.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Modify</span><br><span class="line">CloseWrite</span><br><span class="line">CloseWrite or Modify</span><br></pre></td></tr></table></figure></p>
<p>maxProcesses: 同步进程(如rsync/ssh)的最大个数.<br>maxDelays: 累计到多少监控的事件激活一次同步，即使sync中delay延迟时间还未到.  </p>
<p>sync同步参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">default.rsync: 使用rsync进行备份(本地或远程);  </span><br><span class="line">default.direct: 使用cp/rm等命令进行本地备份;  </span><br><span class="line">default.rsyncssh: 同步到远程主机目录，rsync的ssh模式;</span><br></pre></td></tr></table></figure></p>
<p>source: 源目录，使用绝对路径;<br>target: 支持配置如下,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a) rsync远程目录同步(如remote_host::rsync_mod), 用于rsync模式    </span><br><span class="line">b) 本地目录同步(如/tmp/dest), 可用于direct和rsync模式  </span><br><span class="line">c) ssh远程目录同步(remote_host:/tmp/dest): 可用于rsync和rsyncssh模式</span><br></pre></td></tr></table></figure></p>
<p>init: 当init = false, 只同步进程启动以后发生改动事件的文件，原有目录即使有差异也不会同步; 默认是true(但不能显示设置init = true).<br>delay: 累计事件延迟时间默认15秒, 避免过于频繁的同步.</p>
<p>delete: 保持target与souce同步.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete	=	true	Default. Lsyncd will delete on the target whatever is not in the source. At startup and what&apos;s being deleted during normal operation.</span><br><span class="line">delete	=	false	Lsyncd will not delete any files on the target. Not on startup nor on normal operation. (Overwrites are possible though)</span><br><span class="line">delete	=	&apos;startup&apos;	Lsyncd will delete files on the target when it starts up but not on normal operation.</span><br><span class="line">delete	=	&apos;running&apos;	Lsyncd will not delete files on the target when it starts up but will delete those that are removed during normal operation.</span><br></pre></td></tr></table></figure></p>
<p>bwlimit: rsync同步限速(kb/s).<br>compress: 压缩传输默认为true.<br>perms: 默认保留文件权限.  </p>
<p>注意: lsyncd.conf可以有多个sync模块，独立配置互不影响。</p>
<h5 id="b-配置rsync密码"><a href="#b-配置rsync密码" class="headerlink" title="b. 配置rsync密码"></a>b. 配置rsync密码</h5><p>密码文件/etc/lsyncd/rsyncd.pass:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsyncd_password</span><br></pre></td></tr></table></figure></p>
<p>设置密码文件权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown root:root /etc/lsyncd/rsyncd.pass</span><br><span class="line">chmod 0400 /etc/lsyncd/rsyncd.pass</span><br></pre></td></tr></table></figure></p>
<h4 id="2-目的文件端"><a href="#2-目的文件端" class="headerlink" title="2). 目的文件端"></a>2). 目的文件端</h4><h5 id="a-rsyncd服务端"><a href="#a-rsyncd服务端" class="headerlink" title="a. rsyncd服务端"></a>a. rsyncd服务端</h5><p>配置文件/etc/rsyncd.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># sample rsyncd.conf configuration file</span><br><span class="line"></span><br><span class="line"># GLOBAL OPTIONS</span><br><span class="line">motd file=/etc/motd</span><br><span class="line">log file=/var/log/rsyncd</span><br><span class="line"># for pid file, do not use /var/run/rsync.pid if</span><br><span class="line"># you are going to run rsync out of the init.d script.</span><br><span class="line"># The init.d script does its own pid file handling,</span><br><span class="line"># so omit the &quot;pid file&quot; line completely in that case.</span><br><span class="line">pid file=/var/run/rsyncd.pid</span><br><span class="line">syslog facility=daemon</span><br><span class="line">#socket options=</span><br><span class="line"></span><br><span class="line"># MODULE OPTIONS</span><br><span class="line">[rsync_mod]</span><br><span class="line">comment = public archive</span><br><span class="line">path = /mnt/backup/data</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 4</span><br><span class="line">lock file = /var/lock/rsyncd</span><br><span class="line">read only = no</span><br><span class="line">hosts allow = 192.168.0.1/24</span><br><span class="line"></span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br><span class="line">auth users = rsync_user</span><br><span class="line">secrets file = /etc/rsyncd.scrt</span><br><span class="line">strict modes = yes</span><br><span class="line"></span><br><span class="line">timeout = 600</span><br><span class="line">#refuse options = checksum dry-run</span><br><span class="line">dont compress = *.gz *.tgz *.zip *.z *.rpm *.deb *.iso *.bz2 *.tbz *.png *.jpg *.jpeg *.gif</span><br></pre></td></tr></table></figure></p>
<h5 id="b-配置rsyncd密码"><a href="#b-配置rsyncd密码" class="headerlink" title="b. 配置rsyncd密码"></a>b. 配置rsyncd密码</h5><p>密码文件/etc/rsyncd.scrt:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync_user:rsyncd_password</span><br></pre></td></tr></table></figure></p>
<p>设置密码文件权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown root:root /etc/rsyncd.scrt</span><br><span class="line">chmod 0400 /etc/rsyncd.scrt</span><br></pre></td></tr></table></figure></p>
<h5 id="c-启动rsyncd服务"><a href="#c-启动rsyncd服务" class="headerlink" title="c. 启动rsyncd服务"></a>c. 启动rsyncd服务</h5><p>在ubuntu上默认rsyncd服务不能通过init.d/upstart启动, 需要修改配置文件/etc/default/rsync:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSYNC_ENABLE=false</span><br><span class="line">修改为</span><br><span class="line">RSYNC_ENABLE=true</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[视频格式]]></title>
      <url>http://zenvv.com/2016/05/12/video-format/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>视频格式属于一般的通俗统称，具体来说，可以进一步分为视频容器格式和视频编码格式。</p>
<p>视频容器用于封装具体的视频编码数据，但是由于某些视频容器只针对某种特殊的视频编码.<br>故而一般将这两种混为一体而不加区分，如rmvb格式视频即表明该容器是rmvb, 视频编码也是rmvb. </p>
<p>而avi则可以支持多种视频格式，如h264/mpeg4/vc1等等, 这时avi只表示其封装格式.<br>如果需要播放该视频，则需要解析出其视频编码格式启动相应的视频解码器才能播放。</p>
<p>常见的视频容器格式有: rmvb, mkv, avi, mp4, ts, vob等。<br>常见的视频编码格式有: rmvb, vc1, h264, mpeg4, mpeg2等.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[glusterfs文件同步]]></title>
      <url>http://zenvv.com/2016/05/10/glusterfs3-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>rsync是一种常用的远程文件同步方法, 这里将就其几种常用方式及与glusterfs的配合使用, 作简单介绍.</p>
<h3 id="1-rsync"><a href="#1-rsync" class="headerlink" title="1. rsync"></a>1. rsync</h3><p>可以对节点间的数据作完全同步, 不能处理增量数据, 因此只能周期性的运行.</p>
<p>适合作小数据的同步或者大数据的离线同步. </p>
<h3 id="2-inotify-rsync"><a href="#2-inotify-rsync" class="headerlink" title="2. inotify + rsync"></a>2. inotify + rsync</h3><p>在rsync的基础上添加inotify服务, 监控内核文件事件处理增量数据服务. </p>
<p>该方案对增量处理没有容错能力, 只能处理inotify服务正常运行中的事件,<br>故而运行一段时间后, 则数据同步不完整.</p>
<p>可以辅助周期性的完全同步, 保证节点间的数据一致.</p>
<h3 id="3-lsyncd-rsync"><a href="#3-lsyncd-rsync" class="headerlink" title="3. lsyncd + rsync"></a>3. lsyncd + rsync</h3><p>使用lsyncd服务代替inotify服务, 在一定程度上保证其首次启动后的所有事件.<br>也即是除首次需要作数据完全同步之后, 后续由lsyncd保障数据增量服务(即使服务重启或网络中断也可以恢复).</p>
<p>与inotify类似的是, 需要监控内核文件事件, 通常只能处理节点的本地文件系统.</p>
<h3 id="4-glusterfs"><a href="#4-glusterfs" class="headerlink" title="4. glusterfs"></a>4. glusterfs</h3><p>glusterfs可以通过rsync从某个节点的本地文件系统获取数据, 方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -PavhS --xattrs --ignore-existing /data/remote_dir/ client:/mnt/gluster</span><br></pre></td></tr></table></figure></p>
<p>对于glusterfs这种分布式文件系统, 没有内核事件的支持, 导致没有办法使用inotify或lsyncd支持增量处理.</p>
<p>故而直接使用rsync这种方式, 只能周期性的运行完全同步对数据进行同步备份.</p>
<p>glusterfs通常作为大数据存储服务, 这种完全同步方式性能消耗大, 同步不及时.</p>
<p>在glusterfs3.x及以后版本, 原生支持一种异地备份服务 - geo-replication.<br>geo-replication是基于ssh和rsync工具实现的一套文件同步系统, 其中, ssh用于信息控制交互, rsync用于数据同步. 相关的具体命令如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gluster volume geo-replication &lt;master_volume&gt; config allow-network ::1,127.0.0.1</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; start|stop|status</span><br><span class="line"></span><br><span class="line"># local (system and gluster)</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; file:///path/to/dir</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; /path/to/dir</span><br><span class="line"></span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; gluster://localhost:volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; :volname</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># remote (system and gluster)</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; ssh://root@remote-host:/path/to/dir</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; root@remote-host:/path/to/dir</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; ssh://root@remote-host:gluster://localhost:volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; root@remote-host::volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; gluster://host:volname</span><br><span class="line">gluster volume geo-replication &lt;master_volume&gt; host:volname</span><br><span class="line">gluster volume geo-replication dist_repl_vol slave::dist_repl_vol config use_tarssh false</span><br></pre></td></tr></table></figure>
<p>geo-replication支持如下几种同步方式<br>1). master gluster volume   -&gt;  slave local filesystem<br>这种方式比较简单, gluster内建文件事件, 处理增量数据发送到远程slave节点.</p>
<p>2). master gluster volume   -&gt;  slave gluster volume<br>glusterfs-glusterfs同步要求两个volume类型及参数一致.</p>
<h3 id="5-同步示例"><a href="#5-同步示例" class="headerlink" title="5. 同步示例"></a>5. 同步示例</h3><p>这里以distribute replica voluem(replica: 2, total: 4)为例.<br>卷名为dist_replica_vol, master节点node1/node2/node3/node4, 创建方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create dist_replica_vol replicat 2 node1:/data node2:/data node3:/data node4:/data</span><br></pre></td></tr></table></figure></p>
<p>slave节点分别为snode1/snode2/snode3/snode4, 卷名为dist_replica_vol, 创建方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gluster volume create dist_replica_vol replicat 2 snode1:/data snode2:/data snode3:/data snode4:/data</span><br></pre></td></tr></table></figure></p>
<p>同步方式, 将master数据同步到slave节点上, 具体如下.</p>
<p>a. 请使用root用户进行同步, 其它用户潜在问题多.<br>b. 设置可以通过ssh root without-password方式从master访问slave.<br>对于ubuntu用户, 需要修改/etc/ssh/sshd_config:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin without-password</span><br><span class="line">改为</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure></p>
<p>在master端用root用户生成ssh public/private key, 然后将id_rsa.pub拷贝到slave上, 并将其内容添加到/root/.ssh/.authroity_keys中即可.</p>
<p>c. 在master端创建geo-replication<br>在该master卷dist_replica_vol中的任一节点上, 如在node1中创建geo-replication volume, 如此node1和node2成为geo-replication volume的active节点, node3/node4是passive节点, 而数据处理则全部在active节点中运行.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># create pem</span><br><span class="line">gluster system:: execute gsec_create</span><br><span class="line"></span><br><span class="line"># create geo-replication volume </span><br><span class="line">gluster volume geo-replication dist_repl_vol snode1::dist_repl_vol create push-pem [force]</span><br><span class="line"></span><br><span class="line"># do operations</span><br><span class="line">gluster volume geo-replication dist_repl_vol snode1::dist_repl_vol start|stop|pause|status</span><br></pre></td></tr></table></figure>
<p>d. 错误处理<br>如果出现key或者gsyncd错误, 在所有gluster节点中(本地和远程)运行以下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cp -f /root/.ssh/id_rsa /var/lib/glusterd/geo-replication/secret.pem</span><br><span class="line">cp -f /root/.ssh/id_rsa /var/lib/glusterd/geo-replication/tar_ssh.pem</span><br><span class="line"></span><br><span class="line">cp -f /root/.ssh/id_rsa.pub /var/lib/glusterd/geo-replication/secret.pem.pub</span><br><span class="line">cp -f /root/.ssh/id_rsa.pub /var/lib/glusterd/geo-replication/tar_ssh.pem.pub</span><br><span class="line"></span><br><span class="line">mkdir -p /nonexistent/</span><br><span class="line">ln -s /usr/lib/x86_64-linux-gnu/glusterfs/gsyncd /nonexistent/gsyncd</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[docker杂谈]]></title>
      <url>http://zenvv.com/2016/05/02/docker-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在云技术时代, 开发由前端(如h5/js/css)和后端技术(如python/jsp/php)等两部分组成, 这其中存在哪些变化呢? </p>
<p>明显看到这个开发链中没有相关的底层架构技术, 是因为这些不重要吗? 当然不是. </p>
<p>主要得益于架构技术的迅速发展, 如今已经形成一套成型的接口, 对于开发者而言, 只需调用这些接口(如REST), 即可对数据进行各种处理(而自行搭建难度系数太大).</p>
<p>在架构服务的发展中, 其中一个最基本的就是虚拟技术的发展, 代表产品如vmware/xen/kvm等, 这些构建了如今互联网架构格局的基础设施.</p>
<p>在云浪潮中, 许多颠覆性的技术得到迅速发展并成熟, 如aws/google cloud/openstack/docker等. </p>
<p>本文将就其中的docker技术谈谈自己的感想.</p>
<p>docker字面意思是码头工人, 主要任务是处理各种集装箱(container).</p>
<p>docker是一种建立在lxc基础上的上层容器技术, 与xen/kvm等相比, 更像一个增强的chroot.</p>
<h4 id="xen-kvm介绍"><a href="#xen-kvm介绍" class="headerlink" title="xen/kvm介绍"></a>xen/kvm介绍</h4><p>xen/kvm实现了真正意义上的虚拟化方案, 能够提供完全的物理隔离功能.<br>各个虚拟主机具有独立的内核和运行空间.</p>
<h4 id="chroot"><a href="#chroot" class="headerlink" title="chroot"></a>chroot</h4><p>通常情况下, 程序运行时的根目录即是OS的根目录(‘/‘).<br>chroot是什么? 全称是change root, 能够改变程序运行时的根目录. </p>
<h4 id="LXC是什么"><a href="#LXC是什么" class="headerlink" title="LXC是什么"></a>LXC是什么</h4><p>LXC全称linux containers, 是一种封装linux内核容器功能的用户空间接口. LXC通过API和工具可以方便地构建和管理系统或应用程序容器. </p>
<p>LXC使用的linux内核功能有:<br>a. 内核命名空间(ipc, uts, mount, pid, network and user)<br>b. 安全访问技术Apparmor和selinux配置<br>c. 沙箱Seccomp策略<br>d. chroots技术(使用pivot_root)<br>e. 内核容量<br>f. CGroups(control group)  </p>
<p>LXC容器可以被当作是chroot和那些完整虚拟机如xen/kvm的中间地带.<br>其目标是尽可能创建一个类似linux标准安装版无需独立内核的运行环境.</p>
<h4 id="docker又是什么"><a href="#docker又是什么" class="headerlink" title="docker又是什么"></a>docker又是什么</h4><p>你可以认为, docker是一个加强版的LXC.</p>
<p>docker是一个轻量级开源安全的应用容器引擎, 能够将应用程序及其依赖打包进行软件部署.</p>
<p>docker建立在aufs分层文件系统基础上, 能够运行在主机内核中并高效启动利用主机资源.</p>
<h5 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h5><p>运行在同一个主机上的容器共享相同的操作系统内核, 因而容器可以被迅速启动并高效利用系统内存. 在aufs分层文件系统基础上构建的应用镜像, 可以方便的分享文件,利用磁盘和镜像下载.</p>
<h5 id="开放"><a href="#开放" class="headerlink" title="开放"></a>开放</h5><p>docker容器基于开放标准, 很容易在linux/mac/windows等操作系统中运行.</p>
<h5 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h5><p>容器能够很好的隔离彼此间的应用程序, 并为应用程序添加一个额外保护层.<br>docker提供了内存/cpu等资源隔离, 并在沙盒中运行, 但是在安全性方面还不成熟.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[分布式文件系统 - glusterfs]]></title>
      <url>http://zenvv.com/2016/05/01/glusterfs2-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>分布式文件系统自身架构也可以分为集中式和分布式两种, 典型的gluster属于前者, ceph属于后者, 孰优孰劣暂不作评论, 这里将就gluster相关概念和使用方法作介绍.</p>
<h3 id="1-glusterfs简述"><a href="#1-glusterfs简述" class="headerlink" title="1. glusterfs简述"></a>1. glusterfs简述</h3><p>gluster是基于一致性hash算法的纯分布式架构的分布式文件系统.  </p>
<p>从服务架构上分析, 仅存在一种节点即数据服务节点, 无单点故障.<br>从系统功能上分析, 可以分成两类节点: client节点和数据服务节点.  </p>
<p>client节点并不存在于gluster的服务端架构中. 当应用程序需要存储服务时, 才会启动client节点为其提供服务. 实际进行各种存储调度算法逻辑, 以及保证数据的一致性和可靠性都是在client节点中进行处理. 每一个应用程序均可以拥有独立的client节点.</p>
<p>而服务节点是正常提供数据的被动数据存储服务, 当然也有一些内建的各种数据保障服务.  </p>
<p>可以看到, 对于gluster系统的升级, 通常需要同时升级服务端和客户端, 由于许多新功能和调度算法都是通过client进行实现的. 闲扯下, 21世纪初p2p技术大行天下的那几年, 对于同样的服务端(tracker), 各种p2p客户端(bt/emule/bitcomet)下载的效果大不相同.  </p>
<h3 id="2-glusterfs卷类型"><a href="#2-glusterfs卷类型" class="headerlink" title="2. glusterfs卷类型"></a>2. glusterfs卷类型</h3><p>在建立glusterfs服务之前, 就需要明确定义存储的需求.</p>
<p>如mac osx系统存储一样, glusterfs通过volume对存储进行管理, 每一个volume对应用程序都类似一个disk. 服务支持的volume类型也基本决定了gluster分布式系统的基本架构, 简单来讲决定了gluster中服务节点的数量. </p>
<p>gluster支持多种类型的volume, 常见如下所示:  </p>
<h4 id="a-distribute-volume"><a href="#a-distribute-volume" class="headerlink" title="a. distribute volume"></a>a. distribute volume</h4><p>分布卷是glusterfs最基本的卷类型, 最少需要两个节点.<br><code>$&gt; gluster volume create dist_volume node1:/mnt/brick1/dist1 node2:/mnt/brick1/dist1</code><br>根据文件hash值存储到不同节点的brick, 任一个节点失败都会导致数据丢失.</p>
<h4 id="b-replica-volume"><a href="#b-replica-volume" class="headerlink" title="b. replica volume"></a>b. replica volume</h4><p>复制卷类似于raid1, 最少需要两个节点<br><code>$&gt; gluster volume create replica_volume replica 2 node1:/mnt/brick1/replica1 node2:/mnt/brick1/replica1</code><br>将文件存储到所有节点的brick, 任一个节点失败都不影响数据服务.</p>
<h4 id="c-distribute-replica-volume"><a href="#c-distribute-replica-volume" class="headerlink" title="c. distribute replica volume"></a>c. distribute replica volume</h4><p>将两个或多个相同的复制卷组合在一起构成分布复制卷, 最少需要4个节点.</p>
<p>创建方式一: 在2)复制卷上再添加一组<br><code>$&gt; gluster volume add-brick replica_volume node3:/mnt/brick1/replica1 node4:/mnt/brick1/replica1</code><br>replica_volume从复制卷变成一个分布式复制卷.  </p>
<p>创建方式二: 全新创建<br><code>$&gt; gluster volume create distribute_replica_volume replica 2 node1:/mnt/brick1/replica1 node2:/mnt/brick1/replica1 node3:/mnt/brick1/replica1 node4:/mnt/brick1/replica1</code>   </p>
<p>注意, node1&amp;node2和node3&amp;node4分别是一个复制卷, 然后共同构建成一个分布卷. 在此例中最多可以容忍两个节点失败, 但只能是复制卷1中(node1&amp;node2)的任一个节点, 以及复制卷2(node3&amp;node4)中的任一个节点.</p>
<p>分布复制卷的存储逻辑是, 首先根据文件的hash值选中一个复制卷, 然后将数据拷贝到这个复制卷中所有节点的brick.</p>
<h4 id="d-disperse-volume"><a href="#d-disperse-volume" class="headerlink" title="d. disperse volume"></a>d. disperse volume</h4><p>离散卷是一种高级卷，通过rs码构建冗余数据保证数据的可靠性和一致性(类似raid5). 创建方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; gluster volume create disperse_volume disperse 5 redundancy 2  node1:/mnt/brick1/disp1 node2:/mnt/brick1/disp1 node3:/mnt/brick1/disp1 node4:/mnt/brick1/disp1 node5:/mnt/brick1/disp1</span><br></pre></td></tr></table></figure></p>
<p>disperse: 离散卷的数目<br>redundancy: 冗余卷的数目</p>
<p>这里的设置意味着根据5个卷中的任意3个卷可以计算得到所有的存储数据, 也即是说, 五个节点中可以容忍任意2个节点down. 具体设置的优化值请参照官方. 其数据存储逻辑是:　按照2/5冗余值, 从文件内容计算出新内容, 然后将结果存储到五个节点中.</p>
<h4 id="e-distribute-disperse-volume"><a href="#e-distribute-disperse-volume" class="headerlink" title="e. distribute disperse volume"></a>e. distribute disperse volume</h4><p>类似于分布复制卷, 将多个离散卷进行合并, 即可构成一个分布离散卷. </p>
<h3 id="3-glusterfs建立服务"><a href="#3-glusterfs建立服务" class="headerlink" title="3. glusterfs建立服务"></a>3. glusterfs建立服务</h3><p>glusterfs所有节点都是平等的, 因此可以简单的从其中任一个节点, 去建立一个完整的分布式网络服务, 如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; gluster peer probe host1</span><br><span class="line">$&gt; gluster peer probe host2</span><br><span class="line">$&gt; gluster peer probe host3</span><br><span class="line">$&gt; gluster peer probe host4</span><br><span class="line">$&gt; gluster peer probe host5</span><br><span class="line">$&gt; gluster peer status</span><br></pre></td></tr></table></figure></p>
<p>删除节点操作如下:<br><code>$&gt; gluster peer detach host5</code></p>
<h3 id="4-glusterfs管理优化"><a href="#4-glusterfs管理优化" class="headerlink" title="4. glusterfs管理优化"></a>4. glusterfs管理优化</h3><p>glusterfs卷管理操作命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$&gt;gluster volume start|stop|delete &lt;volname&gt;</span><br><span class="line">$&gt;gluster volume add-brick|remove-brick &lt;volname&gt; …</span><br><span class="line">$&gt;gluster volume rebalance &lt;volname&gt; start|stop|status</span><br><span class="line">$&gt;gluster volume heal &lt;volname&gt; [full|info..]</span><br><span class="line">$&gt;gluster volume get &lt;volname&gt; all</span><br><span class="line">$&gt;gluster volume set &lt;volname&gt; key value</span><br><span class="line">$&gt;gluster volume log rotate &lt;volname&gt;</span><br><span class="line">$&gt;gluster volume top &lt;volname&gt; …</span><br><span class="line">$&gt;gluster volume status all|&lt;volname&gt; …</span><br><span class="line">$&gt;gluster volume replace-brick &lt;volname&gt; commit force</span><br><span class="line">$&gt;gluster volume shared profile start|info|stop</span><br><span class="line">$&gt;gluster volume profile start|info|stop</span><br></pre></td></tr></table></figure></p>
<p>优化属性(针对小文件)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Specifies the number of network connections to be handled simultaneously by the client processes </span><br><span class="line">gluster volume set &lt;volname&gt; client.event-threads 4</span><br><span class="line"></span><br><span class="line"># Specifies the number of network connections to be handled simultaneously by the server processes </span><br><span class="line">gluster volume set &lt;volname&gt; server.event-threads 4</span><br><span class="line"></span><br><span class="line">gluster volume set &lt;volname&gt; cluster.lookup-optimize on</span><br><span class="line"></span><br><span class="line"># Specifies whether proactive self-healing on replicated volumes is activated.</span><br><span class="line">gluster volume set &lt;volname&gt; cluster.self-heal-daemon on|off</span><br><span class="line">gluster volume set &lt;volname&gt; performance.readdir-ahead on|off</span><br></pre></td></tr></table></figure></p>
<p>控制访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth.allow *|ip|hostname</span><br><span class="line">auth.reject none|ip|hostname</span><br></pre></td></tr></table></figure></p>
<p>其它属性设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cluster.min-free-disk</span><br><span class="line">cluster.weighted-rebalance</span><br><span class="line"></span><br><span class="line">performance.cache-size</span><br><span class="line">performance.cache-min-file-size</span><br><span class="line">performance.cache-max-file-size</span><br><span class="line"></span><br><span class="line">performance.write-behind: off</span><br><span class="line">server.allow-insecure: on</span><br><span class="line">cluster.server-quorum-type: server</span><br><span class="line">cluster.quorum-type: auto</span><br><span class="line">network.remote-dio: enable</span><br><span class="line">cluster.eager-lock: enable</span><br><span class="line">performance.stat-prefetch: off</span><br><span class="line">performance.io-cache: off</span><br><span class="line">performance.read-ahead: off</span><br><span class="line">performance.quick-read: off</span><br></pre></td></tr></table></figure></p>
<h3 id="5-glusterfs应用服务"><a href="#5-glusterfs应用服务" class="headerlink" title="5. glusterfs应用服务"></a>5. glusterfs应用服务</h3><p>通过以上方式成功建立了glusterfs分布式文件服务. 具体使用还需要在应用程序节点上, 通过gluster client建立虚拟磁盘节点(如使用gluster mount), 随后应用程序即可通过类似访问本地磁盘的方式对gluster磁盘进行数据读取.<br>故而, 各个节点应用程序都可以通过gluster文件系统, 方便地进行数据共享服务.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[ 数据存储]]></title>
      <url>http://zenvv.com/2016/04/29/gluster-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在云互联网时代, 数据存储依然是最基础的平台之一, 那么云时代的存储有些什么变化呢?   </p>
<h3 id="1-数据存储"><a href="#1-数据存储" class="headerlink" title="1. 数据存储"></a>1. 数据存储</h3><p>所谓数据存储, 即是应用程序产生的数据, 能够从某处进行正常的读取操作.<br>传统方式是将所有数据存放在某以集中式存储设备上, 通过协议(如nas)在多个应用程序之间进行数据共享读取.<br>虽说集中式存储有着高额的价格, 但能够提供简洁稳定可靠高效的服务, 并在各种应用中得到验证.  </p>
<p>从各种渠道, 我们能获取到对集中式存储重大缺点的归结, 集中于可扩展性差和不菲的价格.<br>但是少年们, 对于中小特别是创业型公司来说, 几个T的集中式存储空间, 真的限制了公司未来的扩展性? 搭建一套分布式云存储真的价格低廉了?<br>个人认为, 云分布式存储, 应该称为云分布式大数据存储较为恰当, 更适合大数据公司.<br>搭建一套分布式云存储并不便宜, 从设备到研发及运维人员都需要一定的成本(facebook/google均定制设备以降低各种成本). 对大数据公司来说, 批量部署分布式系统则将成本大大降低.</p>
<p>言归正题, 本文将只讨论分布式系统gluster的一些相关技术问题.<br>方便叙述简单, 这里狭义的将分布式云定义为无单点故障的一种架构系统.</p>
<h3 id="2-集中式存储"><a href="#2-集中式存储" class="headerlink" title="2. 集中式存储"></a>2. 集中式存储</h3><p>采取集中存储方式的架构, 由于存储是个单点, 只能实现不完备的分布式应用程序.<br>若要实现完备的分布式应用程序, 则有以下几种方式:  </p>
<ol>
<li>需要多个集中式存储, 且各个存储之间实现实时数据共享.</li>
<li>需要多个集中式存储, 需要应用程序自身拥有分布式特性.</li>
</ol>
<p>第一种, 在传统大型应用中也存在不少, 成本高昂.<br>第二种, 要求各应用程序支持分布式特性, 在近几年涌现的各种服务软件中得到极大的支持, 如各种nosql服务. 从原理上分析, 最简单的实现即在各个服务实例之间进行数据同步保持一致性. </p>
<h3 id="3-分布式存储"><a href="#3-分布式存储" class="headerlink" title="3. 分布式存储"></a>3. 分布式存储</h3><p>集中式存储的第二种方式虽然得到了极大的发展, 但我们无法兼容利用已有的各种服务.<br>如此, 我们急需统一并提供一致的存储接口来支持各种服务, 这中需求由来已久, 并非云时代的产物.<br>其所催发的各种分布式文件系统(Distributed File System)也早先云时代之前应运而生, 但却在大数据的云时代大放光彩.</p>
<p>当前存在很多成熟的DFS框架, 主流的如moosefs, glusterfs, fastdfs(国内刚开始在chinaunix论坛上首发),tfs(taobao dfs),和大红大紫的openstack swift和ceph.</p>
<p>已有不少资料对这几种系统做过比较, 下一篇将对glusterfs进行基本的叙述.  </p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx+tomcat完美支持HTTPS]]></title>
      <url>http://zenvv.com/2016/04/26/nginx-proxy-https-tomcat/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>之前几篇文章简单描述了nginx和tomcat的一些配置，可以满足一些常规需求。<br>随着互联网安全隐患的频繁发生，现如今安全性已经是一项基本需求，而https则是最基础平台之一。</p>
<p>在nginx中启用ssl非常简单，只需要几句简单的配置和证书即可。当nginx和tomcat配合使用，其中nginx作为反向代理前端时，该如何实现https呢？</p>
<p>第一种方法，即在nginx和tomcat中使用同样的证书，打开https功能。<br>nginx接受到用户请求进行解密进行处理，加密请求发送到tomcat；<br>tomcat节点接受到请求解密进行处理，对响应数据进行加密转发回到ningx；<br>最后，nginx需要解密tomcat的响应数据，再重新加密转发给客户端。</p>
<p>可以看到，整个过程非常复杂，并且tomcat和nginx节点均需要加密解密多次。</p>
<p>第二种方法，只需要在nginx前端启用ssl, nginx与后台tomcat之间的通信走http/1.0明文。<br>nginx接受用户请求进行解密处理，发送明文请求到tomcat;<br>tomcat对请求明文进行处理，返回响应数据的明文给ningx;<br>最后nginx对tomcat的响应数据加密转发到用户。</p>
<p>需要注意在第二种方法中，默认tomcat返回的响应明文中的url link全部是http地址。<br>也即是说，用户的第一次请求(逻辑上的首次http get)可以正常返回，随后根据在该返回内容中的访问link都被拒绝，由于这些link（由相对地址转化而来，原本就是绝对url地址除外）都是http而不是https。</p>
<p>对于这个问题，需要从两方面配置解决，首先在nginx前端代理请求到tomcat时需要附带上用户请求的协议名字schema（http或https）, 配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">    proxy_set_header Cookie $http_cookie;</span><br><span class="line">    proxy_pass http://tomcat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>X-Forwarded-Proto即是在http header请求中添加用户真实协议，而不是代理协议http.</p>
<p>其次在tomcat中需要显示使用http head中该字段x-forwarded-proto, 配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">   remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">   remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">   protocolHeader=&quot;x-forwarded-proto&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>tomcat的mod_remoteip模块将会根据protocolHeader字段和protocolHeaderHttpsValue值作如下逻辑判断：<br>如果protocolHeader对应字段的值与protocolHeaderHttpsValue(默认是https,可以设置)一致且是https，则root url是<a href="https://ip" target="_blank" rel="noopener">https://ip</a>;<br>否则采用<a href="http://ip作为root" target="_blank" rel="noopener">http://ip作为root</a> url,不论用户真实请求的协议.  </p>
<p>这样，nginx和tomcat搭配的https请求就可以工作了，但这仅仅适用于nginx和tomcat均处于内网中。</p>
<p>在数据中心中，前端nginx一般位于DMZ区域拥有公网IP地址，而tomcat可能位于局域网中只有内网地址。这时我们会发现以上配置不起作用。<br>由于tomcat默认机制中需要判断代理服务器的IP地址，如果该IP地址是内网网段，则启用以上逻辑否则无效，而转而使用默认规则http处理。</p>
<p>为了解决这个问题，需要将代理IP(例如a.b.c.d)添加到tomcat的允许区域中，可进行如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">   remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">   remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">   protocolHeader=&quot;x-forwarded-proto&quot;</span><br><span class="line">   internalProxies=&quot;a\.b\.c\.d&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>internalProxies将会覆盖tomcat的默认内网网段设置，这时通过公网ip可以正常访问https，但在内部直接连接tomcat则只能获取到首页内容，类似上面访问nginx的情形。<br>internalProxies支持正则表达式，可以在将nginx代理公网ip和内网网段全部添加进去即可，如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">internalProxies=&quot;a\.b\.c\.d,10\.*,192\.168\.*&quot;</span><br></pre></td></tr></table></figure></p>
<p>既然tomcat已经在数据中心内网中，可以有更简单的设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">   remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">   remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">   protocolHeader=&quot;.*&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>如此，完美解决nginx + tomcat + https的问题。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[keepalived建立HA系统的几种模式]]></title>
      <url>http://zenvv.com/2016/04/25/keepalived-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>keepalived是基于虚拟IP通过组播通信建立的一种软件HA系统, 简单有效得到广泛的应用. </p>
<p>通常有master/backup和backup/backup两种模式, 基本配置构成如下:<br>a). global_defs: 定义全局属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">      test@example.com</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from admin@example.com</span><br><span class="line">   smtp_server mail.example.com</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>b). vrrp_script: 检查应用程序状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script chk_app &#123;</span><br><span class="line">    script &quot;&lt;/dev/tcp/127.0.0.1/80&quot; # connects and exits</span><br><span class="line">    #script &quot;/etc/keepalived/check_app.sh&quot;</span><br><span class="line">    #script &quot;killall -0 nginx&quot;</span><br><span class="line">    interval 3                      # check every 3 seconds</span><br><span class="line">    weight -2                       # default prio: -2 if fails</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>c). vrrp_instance: 服务相关配置如下.  </p>
<h4 id="1-master-backup模式"><a href="#1-master-backup模式" class="headerlink" title="1. master-backup模式"></a>1. master-backup模式</h4><h5 id="节点1设置"><a href="#节点1设置" class="headerlink" title="节点1设置"></a>节点1设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER            </span><br><span class="line">    garp_master_delay 3</span><br><span class="line"></span><br><span class="line">    interface eth0          # 设置虚拟ip的iface</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0				# 监控iface, 可以不是eth0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_router_id 81	# route id</span><br><span class="line">    priority 100            # 节点优先级</span><br><span class="line">    advert_int 2			# keepalived节点之间通信间隔</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass pass123	# keepalived密码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.1/24		# 要设置的虚拟ip</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>state: 标识该节点的初始状态 - MASTER或BACKUP.<br>garp_master_delay: 在切换到master状态后，延迟进行gratuitous ARP请求.<br>track_script的chk_app检测应用程序, 若失败则节点优先级降低(具体值在chk_app的weight中设置).</p>
<h5 id="节点2设置"><a href="#节点2设置" class="headerlink" title="节点2设置"></a>节点2设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP            </span><br><span class="line">    #nopreempt				# 非抢占模式</span><br><span class="line">    garp_master_delay 3</span><br><span class="line"></span><br><span class="line">    interface eth0          # 设置虚拟ip的iface</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0				# 监控iface, 可以不是eth0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_router_id 81	# 必须与master中一样</span><br><span class="line">    priority 99             # 比master中小, 需要保证master权限降低时比这个值小</span><br><span class="line">    advert_int 2			# keepalived节点之间通信间隔</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass pass123	# keepalived密码, 必须与master中一样 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.1/24		# 要设置的虚拟ip, 必须与master中一样</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在master-backup模式中,<br>a) 正常情况下, 节点1成为master并设置虚拟IP(vip).<br>b) 节点1检测错误(chk_app)或keepalived失败, 节点2将接管master角色.<br>c) 当节点1恢复正常时, 将重新抢占成为master.  </p>
<h4 id="2-backup-backup模式"><a href="#2-backup-backup模式" class="headerlink" title="2. backup-backup模式"></a>2. backup-backup模式</h4><p>所有Backup配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP            </span><br><span class="line">    garp_master_delay 3</span><br><span class="line"></span><br><span class="line">    interface eth0          # 设置虚拟ip的iface</span><br><span class="line">    track_interface &#123;</span><br><span class="line">        eth0				# 监控iface, 可以不是eth0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_router_id 83	# 必须与master中一样</span><br><span class="line">    #nopreempt</span><br><span class="line">    priority 99             </span><br><span class="line">    advert_int 2			# keepalived节点之间通信间隔</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass pass123	# keepalived密码, 必须与master中一样 </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.10.1/24		# 要设置的虚拟ip, 必须与master中一样</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_app</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在backup-backup模式中节点行为如下:<br>a) 假设节点1首先启动, 节点1则成为master并设置vip;<br>b) 如果节点1失败,节点2将自动接管成为master;<br>c) 当节点1恢复时不会抢占master, 除非节点2失败.</p>
<h4 id="3-nopreempt属性"><a href="#3-nopreempt属性" class="headerlink" title="3. nopreempt属性"></a>3. nopreempt属性</h4><p>在某些情形下, keepalived的自动切换可能导致Brain-Split: 即两个节点都成为master并设置虚拟IP地址.  </p>
<p>对此, keepalived提供了nopreempt属性, 允许低优先级节点作为master. 该属性只在backup节点中设置有效, 具体如下:</p>
<p>1) master-backup模式<br>若backup设置nopreempt, 当节点1失败时节点2不会抢占master, 切换方法:<br>a) 手动干预, 如关闭节点1的keepalived程序;<br>b) 自动切换, 在节点1检测脚本中添加逻辑: 若检测失败自动关闭keepalived.</p>
<p>2) backup-backup模式<br>若backup设置nopreempt, 也需要手动干预或者在检测脚本中自动关闭keepalived.  </p>
<p>通过关闭无效节点的keepalived服务, 可以有效避免Brain-Split; 但是, 需要手动处理才能恢复失败节点.</p>
<hr>
<p>一般情况下, 不设置nopreempt的backup-backup模式即可以满足大多数需求.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[DNS服务器dnsmasq]]></title>
      <url>http://zenvv.com/2016/04/19/dnsmasq-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在构建数据中心网络时, 建立一个独立的dns服务是必不可少的.</p>
<p>dns服务器有很多种, 如bind9/skydns等, 但是bind9显得笨重难以配置维护, skydns是不错的软件, 在多种分布式系统中被使用, 如google的k8s.</p>
<p>这里介绍另一种简洁的dns服务软件 - dnsmasq, 配置简单如下所示.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#listen-address=..</span><br><span class="line">expand-hosts</span><br><span class="line">domain=example.com</span><br><span class="line">cache-size=300</span><br><span class="line">#no-resolv</span><br><span class="line">domain-needed</span><br><span class="line"></span><br><span class="line"># for other servers(consul)</span><br><span class="line">server=/consul./127.0.0.1#8600</span><br><span class="line"></span><br><span class="line"># for common domain</span><br><span class="line">address=/ntp.io/10.10.10.9</span><br><span class="line">address=/dns.io/10.10.10.10</span><br></pre></td></tr></table></figure>
<p>listen-address默认不配置时则在所有ip地址监听.<br>expand-hosts和domain搭配使用, 自动将/etc/hosts中的名字扩展到example.com.<br>no-resolv不使用/etc/resolv.conf对域名解析.<br>domain-needed不转发没有格式的域名.<br>server=..用于某些域名转发到其它dns server, 在这个例子中将所有以.consul为后缀的域名, 转发到127.0.0.1:8600的dns服务器进行解析.<br>address=..用于定义本地网络的dns域名解析.  </p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[系统监控及日志收集elk+beats]]></title>
      <url>http://zenvv.com/2016/04/18/elk-beats-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>针对数据中心的监控, 许多公司积极响应并开源自己的方案, 传统的有nagios和zabbix等.</p>
<p>当前比较流行的方案有flume/scribe/openfalcon/elk(beats), 这里将具体介绍下elk.</p>
<p>最新官方建议使用轻量级的beats(golang)取代logstash作为客户端, beats收集数据发送到logstash broker或者直接发送到elasticsearch. </p>
<p>笔者建议使用beats =&gt; logstash =&gt; elasticsearch =&gt; kibana这种数据流, 利用logstash可以对数据作额外处理以及减少系统耦合性.  </p>
<h5 id="beats客户端"><a href="#beats客户端" class="headerlink" title="beats客户端"></a>beats客户端</h5><p>beats包含多种工具, 常用的有三种:<br>topbeat: 主要监控系统的cpu/memory/disk, 周期性的收集系统数据.<br>filebeat: 用于收集系统和应用程序日志, 发送日志到logstash作额外处理可以收集感兴趣的信息.<br>packetbeat: 用于嗅探系统网络信息(被动), 如http/mysql/等等.</p>
<p>但是, topbeat中没有收集linux系统/proc/net基本信息的功能, 而是集成到packetbeat中显得稍笨重不方便使用.</p>
<h5 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h5><p>logstash起初是作为elk中的客户端, 但作为一个收集系统基本数据的工具, 而显得太笨重而一直被诟病.<br>尽管如此, logstash提供了许多插件功能极其丰富, 很适合作为broker节点.</p>
<p>logstash的数据处理通常有三部分构成, 分别对应于三种插件:<br>(1) input插件, 获取数据, 比如监听端口或者从消息队列中订阅数据.<br>(2) filter插件, 对收集到的数据作进一步的处理, 例如解析ip地址为经纬度.<br>(3) output插件, 输出数据到其它服务中,如elasticsearch/kafka/zeromq.  </p>
<h5 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h5><p>终于回到正题了, elasticsearch是基于lucence引擎的一套简单高可用系统, 提供了非常方面的nosql/rest服务的功能, 也是这套监控系统的核心所在. </p>
<p>最新版本的elasticsearch可以很方便建立一个分布式集群, 在该集群中通常有master和数据这两大类节点.</p>
<p>(1) 节点属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cluster.name: es_cluster    # 集群名</span><br><span class="line">node.name: $&#123;HOSTNAME&#125;		# 将hostname作为节点名字</span><br><span class="line">node.master: true			# 节点是否可以被选作为master节点</span><br><span class="line">node.data: true				# 节点是否可以被选作为data节点</span><br></pre></td></tr></table></figure></p>
<p>这里注意, 如果node.master和node.data均为false, 则该节点是一个仲裁节点, 类似nginx负载均衡的功能.</p>
<p>(2) 发现机制zen<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">discovery.zen.ping.multicast.enabled: false</span><br><span class="line">discovery.zen.ping_interval: 3s</span><br><span class="line">discovery.zen.ping_timeout: 30s</span><br><span class="line">discovery.zen.ping_retries: 5</span><br><span class="line">discovery.zen.ping.unicast.hosts: &quot;host1&quot;, &quot;host2:9300&quot;</span><br></pre></td></tr></table></figure></p>
<p>采用unicast方式显示设置集群中的节点, 默认各个节点之间使用的端口是9300.</p>
<p>(3) 配置网络<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># network</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">network.bind_host: 0.0.0.0</span><br><span class="line">network.publish_host: 0.0.0.0</span><br><span class="line"></span><br><span class="line"># http service</span><br><span class="line">http.compression: true</span><br><span class="line">http.compression_level: 3</span><br></pre></td></tr></table></figure></p>
<h5 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h5><p>收集数据是为了展现, kibana即是一种基于elasticsearch数据展现的工具.<br>kibana默认提供了topbeat/filebeat/packetbeat等的数据展示模版. </p>
<h5 id="elastalert"><a href="#elastalert" class="headerlink" title="elastalert"></a>elastalert</h5><p>作为一个监控系统, 报警机制不得缺少, elastic官方提供的收费方案比较简单.<br>这里介绍一种免费开源方案, 那就是<a href="https://github.com/Yelp/elastalert.git" target="_blank" rel="noopener">elastalert</a>, 具体参考官方代码.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Rexify运维工具]]></title>
      <url>http://zenvv.com/2016/04/16/rexify-ansible-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>当系统达到一定规模时，传统单机器维护方式已经不再适合，需要一些自动化工具进行管理。</p>
<p>下面将介绍在实践工程中使用的几种方式(针对单一类型系统: linux)。</p>
<h4 id="1-ssh"><a href="#1-ssh" class="headerlink" title="1. ssh"></a>1. ssh</h4><p>ssh工具一款linux及其类系统中的利器，常被用来作远程系统登录和数据拷贝，同时还有另外一个重要功能: 远程执行命令。</p>
<p>同时，针对一些小规模的系统(例如几十个节点)，ssh也拥有足够的能力对其自动化管理。</p>
<p>在配置完成ssh的无密码key连接方式之后，编写一些bash脚本管理远程主机地址即可。当然，纯ssh工具对管理人员的要求比较高。</p>
<p>可以考虑采用一些第三方工具简化管理，常见工具如puppet, chef, cfengine, ansible以及rexify等。</p>
<p>使用过其中的两款ansible和rexify, 均属于灵巧型-无客户端和服务端，非常适合喜欢干净系统的工程师(最烦在各个子节点上安装agent)，也是在ssh的基础上实现的。</p>
<h4 id="2-ansible"><a href="#2-ansible" class="headerlink" title="2. ansible"></a>2. ansible</h4><p>ansible是python语言开发的一种框架，基于yaml语法和提供的模块定义各种playbook，对软件进行配置管理，并且能够支持windows(powershell)。</p>
<p>ansible对于常规的运维管理已经足够，如果需要支持复杂的定制化服务，则需要编写playbook甚至新模块来支持。</p>
<p>不得不说，编写playbook也是一个繁琐的过程，其功能常显得鸡肋以及力不从心(如在nosql中作join查询)。</p>
<p>可以通过编写新模块或者脚本对其扩展，ansible新模块的方式不是很方便。<br>而编写脚本然后远程执行相对简单，但也常遇到一些不可思议的错误。</p>
<h4 id="3-rexify"><a href="#3-rexify" class="headerlink" title="3. rexify"></a>3. rexify</h4><p>rexify是perl语言开发的框架，目标即是无客户端轻量级，与ansible不同的是其完全基于模块的方式进行远程管理，充分利用了perl语言的优点。</p>
<p>rexify模块提供的功能足够丰富，在此基础上进行一些整合，即可轻易地支持所需要的功能。同时也对脚本的远程执行支持非常好。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx虚拟主机和多域名处理逻辑]]></title>
      <url>http://zenvv.com/2016/04/13/nginx-server-config/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>与apache httpd类似，在nginx中通过server字段定义多个虚拟主机。<br>nginx按照server加载顺序处理用户请求, 但可能导致一些意外行为，下面将进行具体描述。</p>
<p>假设服务器地址为ServerIP, 该IP被多个域名映射(www.b.com, www.c.com和www.d.com).</p>
<h4 id="情形1：显示设置default-server"><a href="#情形1：显示设置default-server" class="headerlink" title="情形1：显示设置default_server"></a>情形1：显示设置default_server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># server-b</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name b.com www.b.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-c</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80 default_server;</span><br><span class="line">	server_name c.com www.c.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(1) b.com/c.com将会分别正确访问到server-b/server-c的资源,<br>(2) d.com/ServerIP也可以访问到nginx, 由于没有匹配的server_name，<br>nginx以显示设置为default_server的server-c进行响应请求。</p>
<h4 id="情形2：所有server在同一个文件中-例如default-conf"><a href="#情形2：所有server在同一个文件中-例如default-conf" class="headerlink" title="情形2：所有server在同一个文件中, 例如default.conf."></a>情形2：所有server在同一个文件中, 例如default.conf.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># server-b</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name b.com www.b.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-c</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name c.com www.c.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(1) b.com/c.com将会分别正确访问到server-b/server-c的资源,<br>(2) d.com/ServerIP也可以访问到nginx, 由于没有匹配的server_name，<br>nginx按照server加载顺序进行处理，将使用server-b资源进行响应请求。</p>
<h5 id="1-禁止d-com"><a href="#1-禁止d-com" class="headerlink" title="1) 禁止d.com"></a>1) 禁止d.com</h5><p>如果仅禁止d.com访问server-b/c的资源，可以显示定义server处理d.com。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># server-b</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name b.com www.b.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-c</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name c.com www.c.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-d</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name d.com www.d.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">    	try_files $uri $uri/ =404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="2-同时禁止d-com和ServerIP"><a href="#2-同时禁止d-com和ServerIP" class="headerlink" title="2) 同时禁止d.com和ServerIP"></a>2) 同时禁止d.com和ServerIP</h5><p>如果同时禁止d.com和ServerIP访问资源(server-b/server-c), 则需在server-b之再定义一个空server虚拟主机。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># server-non</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name _;</span><br><span class="line">    </span><br><span class="line">	location / &#123;</span><br><span class="line">		try_files $uri $uri/ =404;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-b</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name b.com www.b.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-c</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name c.com www.c.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于server-non设置中的server-name值无所谓，只要不影响正常服务即可。</p>
<p>显然，第二种设置更简单通用，但需要在所有虚拟主机之前定义空server才起作用。</p>
<h4 id="情形3-server在不同的文件中"><a href="#情形3-server在不同的文件中" class="headerlink" title="情形3: server在不同的文件中"></a>情形3: server在不同的文件中</h4><p>假设b.com设置在bsize.conf中，c.com设置在csite.conf中. b/c.com均能正常访问资源。<br>但d.com/ServerIP仍然是访问server-b的资源，而不是server-c，原因是由于Nginx include是按照文件名字ascii属性进行加载的。</p>
<p>也即是说，bsite.conf中server比csite.conf优先加载, 如果c.com设置在bsite.conf,b.com设置在csite.conf，则d.com/ServerIP访问到的是server-c的资源。</p>
<p>因此，对于仅禁止d.com访问server-b/server-c的资源，仅需要显示设置其即可(文件名无所谓)，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># server-d</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name d.com www.d.com;</span><br><span class="line">	location / &#123;</span><br><span class="line">		try_files $uri $uri/ =404;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果需要通用禁止所有非b.com/c.com(如d.com/ServerIP)访问资源，则必须设置比已有配置文件名ascii更靠前的文件名。在这个案例中，创建一个文件名为aaa.conf即可，其内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># server-non</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name _;</span><br><span class="line">    </span><br><span class="line">	location / &#123;</span><br><span class="line">		try_files $uri $uri/ =404;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="情形4-不处理未定义server-name的请求"><a href="#情形4-不处理未定义server-name的请求" class="headerlink" title="情形4: 不处理未定义server_name的请求"></a>情形4: 不处理未定义server_name的请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen      80;</span><br><span class="line">    # server_name &quot;&quot;;</span><br><span class="line">    return      444;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于http头中不存在Host字段或值为空的请求, 返回444并关闭连接.</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>(1) 若显示设置default_server, 则以该server为default_server.<br>(2) 仅一个配置文件且存在多个server, 以第一个server为default_server.<br>(3) 有多个server配置文件时, 以配置文件名字排序第一中的server为default_server.</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP URI末尾斜杠在nginx中的处理]]></title>
      <url>http://zenvv.com/2016/04/11/nginx-slash-http/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>HTTP协议请求的uri, 是以斜杠”/“(slash)作为基本分割符。而对于末尾的斜杠容易被我们忽略，下面将就这个问题进行具体分析。</p>
<p>首先得明确，http uri是否以slash结尾，是意味着不同的含义，例如以slash分割后的最后一个单元字段命名为lastsection。那么通常情况下，不是以slash结尾是指向服务器请求名字为lastsection的资源(<code>http://localhost/lastsection</code>)，以slash结尾的是请求路径lastsection下的某个资源(<code>http://localhost/lastsection/</code>)。</p>
<p>具体到nginx中，又是如何进行处理的，下面以静态资源为例，并将index设置为index.html。</p>
<p><b>情形1: nginx root下不存在test目录</b><br>如果请求<code>http://localhost/test</code>, 则nginx返回错误(404 Not Found)。</p>
<p><b>情形2: root下存在test空目录</b><br>如果请求<code>http://localhost/test</code>, 则nginx返回(301 Moved Permanently), 浏览器在收到后，将重新请求(Redirect) <code>http://localhost/test/</code>, 由于test为空目录不存在index.html, 故而nginx返回错误(403 Forbidden)。</p>
<p>如果请求<code>http://localhost/test/</code>, 则nginx直接返回错误(403 Forbidden)。</p>
<p><b>情形3: test目录中存在文件index.html</b><br>如果请求<code>http://localhost/test</code>, 则nginx返回(301 Moved Permanently), 浏览器在收到后，将重定向到(Redirect) <code>http://localhost/test/</code>, nginx返回(200 OK)。</p>
<p>如果请求<code>http://localhost/test/</code>, 则nginx直接返回(200 OK)。</p>
<p>注意，当在浏览器中重复请求同一个有效资源时，Nginx将返回(304 Not Modified)而不是(200 OK)。</p>
<hr>
<p>如上所述，nginx对这些末尾没有slash而相应目录下不存在相应资源的请求，将会返回301致使客户端尝试带有slash重新redirect请求一次。在使用nginx作为反向代理(如tomcat)时，也会发生相关未预料的行为。同时这种行为也导致客户端重复请求一次。</p>
<p>在实际部署中通过rewrite模块等方式可以避免这种情况。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx反向代理的压缩设置和日志格式]]></title>
      <url>http://zenvv.com/2016/04/09/nginx-proxy-config/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>使用Nginx作反向代理时，在实际部署中对代理压缩和日志格式作一些调整，以提高性能和便于后续的数据处理。</p>
<p>在之前一篇<a href="http://zenvv.com/2016/04/06/nginx-tomcat-config/">《nginx配置和tomcat会话保持》</a>的基础上作一些总结和加强。</p>
<h4 id="1-反向代理压缩"><a href="#1-反向代理压缩" class="headerlink" title="1. 反向代理压缩"></a>1. 反向代理压缩</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;msie6&quot;;</span><br><span class="line"></span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_comp_level 3;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_http_version 1.0;</span><br><span class="line">    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/javascript application/xml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果被代理的服务器已经打开gzip, 则此处建议关闭<code>gzip_proxied off;</code>。</p>
<h4 id="2-反向代理日志格式"><a href="#2-反向代理日志格式" class="headerlink" title="2. 反向代理日志格式"></a>2. 反向代理日志格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $http_host &apos;</span><br><span class="line">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">        &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">        &apos;$upstream_addr $upstream_status $upstream_cache_status &apos;</span><br><span class="line">        &apos;&quot;$upstream_http_content_type&quot; $upstream_response_time &gt; $request_time&apos;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	server_name vhost;</span><br><span class="line">	access_log /var/log/nginx/access_vhost.log access;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置目的是记录用户地址和处理服务器地址，便于作数据分析和系统监控。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Python发展与我]]></title>
      <url>http://zenvv.com/2016/04/07/python-in-practice/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Python具有简洁易用等优点，是我所最喜爱的语言之一，至今为止已断断续续使用了快十年之久。</p>
<h4 id="1-Python简史"><a href="#1-Python简史" class="headerlink" title="1. Python简史"></a>1. Python简史</h4><p>Guido从1989年的圣诞节期间开始，到1991年的第一个python编译器发布，已经是二十多年的编程语言，从语言发展史来看算是一个老语言了。<br>但如今依然表现为青春主流，活力不减，仍没有可取代的语言。</p>
<p>这里简单吐槽下python的强制格式对齐，许多人对这种要求非常不满甚至痛恨。</p>
<p>私下以为，如果知道大名鼎鼎的perl, 并用其编写过若干应用，一定会对Python的格式对齐大呼过瘾，^_^。</p>
<h4 id="2-Python大发展"><a href="#2-Python大发展" class="headerlink" title="2. Python大发展"></a>2. Python大发展</h4><p>在Python仍是一种小众语言的时候，即开始基于python编写一些具体的应用和数据处理模块，如P2P应用、增量爬虫、门户网站和数据统计等。</p>
<p>对现有的各种解决方案进行综合集成，使用python进行处理，其带来的快感让人欲罢不能。</p>
<p>随后在cisco的那几年工作期间中并没有其相关的需求，平时用来编写一些系统小工具作为消遣(后来直接使用bash)。</p>
<p>在这段时间内，python却有了巨大的发展变化，成为主流语言之一。</p>
<p>python的发展离不开其开放架构， 如twisted/django/web.py/flask/pip/virtualenv等的蓬勃兴起，极大地推动了python语言的普及和发展。</p>
<p>同时，python凭借其优秀的语言特性，在数据分析领域逐渐占据了统治地位，成为了名副其实的Number one。</p>
<p>今天，Python在各处活动并作用着，从最直接的web服务，大数据分析，人工智能，系统监控运维，甚至到最基础操作系统的正常运行，都有其并不伟岸的身影。</p>
<p>毫不夸张的说，Python在支撑着这个时代最伟大的互联网，是互联网时代伟大的基石之一。</p>
<h4 id="3-Python适合场景"><a href="#3-Python适合场景" class="headerlink" title="3. Python适合场景"></a>3. Python适合场景</h4><p>Python通过一种非常简洁的方式来解决实际需求，从而引领互联网的大势。</p>
<p>然而，Python并不是万能的，其语言特点决定了应用场景，那即是I/O密集型和非实时的应用。</p>
<p>Python最不适合的情景是处理实时的CPU密集型任务，这里将不会就语言的具体实现进行分析。</p>
<p>一句不恰当的总结，python适合周期内执行代码少的应用(即耗用cpu周期少)。</p>
<p>对于大多数的web应用，系统瓶颈主要在于各种I/O性能，例如网络带宽和磁盘读写速度。</p>
<p>而对于数据分析领域，通常进行离线处理数据，而不是提供实时数据分析返回结果。</p>
<hr>
<p>爱好一种语言可以，不要盲从。<br>世上没有一蹴而就，没有万能。<br>让每一种语言，做适合的任务。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat常用配置]]></title>
      <url>http://zenvv.com/2016/04/07/tomcat-config/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>tomcat默认配置已能满足正常需求，为了优化服务可以进行以下的简单设置。</p>
<p>以下配置针对tomcat8。</p>
<h4 id="1-设置Connector-server-xml"><a href="#1-设置Connector-server-xml" class="headerlink" title="1. 设置Connector(server.xml)"></a>1. 设置Connector(server.xml)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">           connectionTimeout=&quot;30000&quot;</span><br><span class="line">           acceptCount=&quot;1024&quot;</span><br><span class="line">           maxThreads=&quot;1024&quot;</span><br><span class="line">           minSpareThreads=&quot;16&quot;</span><br><span class="line">           acceptorThreadCount=&quot;4&quot;</span><br><span class="line">           URIEncoding=&quot;UTF-8&quot;</span><br><span class="line">           useURIValidationHack=&quot;false&quot;</span><br><span class="line">           enableLookups=&quot;false&quot;</span><br><span class="line">           compression=&quot;on&quot;</span><br><span class="line">           compressionMinSize=&quot;2048&quot; </span><br><span class="line">           compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;</span><br><span class="line">           redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>acceptCount: 等待处理队列的最大长度，超过该数目的后续请求将被refuse<br>maxThreads: 处理任务的最大线程数，即同时能够处理的最大任务数目<br>minSpareThreads: 保留的最少空闲线程数<br>acceptorThreadCount: 接受连接(socket accept调用)的线程数，默认为1，通常设置为cpu核心数<br>protocol=”HTTP/1.1”: java http connector协议。</p>
<p>tomcat8标准连接器包括BIO阻塞模式，非阻塞NIO1，非阻塞NIO2和ARP/Native四种模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot; - blocking Java connector</span><br><span class="line">protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; - non blocking Java NIO connector</span><br><span class="line">protocol=&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot; - non blocking Java NIO2 connector</span><br><span class="line">protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot; - the APR/native connector.</span><br></pre></td></tr></table></figure></p>
<p>当使用protocol=”HTTP/1.1”时，如果PATH(windows)或LD_LIBRARY_PATH(linux)路径下，存在tomcat native库，则使用APR/native模式；否选使用一种NIO模式。<br>实际部署中，建议设置protocol=”HTTP/1.1”。</p>
<p>各个模式具体说明见<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/http.html#Connector_Comparison" target="_blank" rel="noopener">官方链接</a>。</p>
<p>这里主要调整acceptCount/maxThreads这几个参数，提高并发处理能力，同时对文本文件进行压缩(compression=on)。</p>
<h4 id="2-nginx前端-tomcat后端的配置"><a href="#2-nginx前端-tomcat后端的配置" class="headerlink" title="2. nginx前端+tomcat后端的配置"></a>2. nginx前端+tomcat后端的配置</h4><p>首先, nginx作为反向代理前端，需要设置将用户信息传送到tomcat。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">    proxy_set_header Cookie $http_cookie;</span><br><span class="line">    proxy_pass http://tomcat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其次，tomcat将这些真实用户信息写到日志中(默认是代理nginx的信息)(server.xml)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">     remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">     remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">     protocolHeader=&quot;x-forwarded-proto&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Context path=&quot;/&quot; docBase=&quot;&quot; debug=&quot;0&quot; privileged=&quot;true&quot; reloadable=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">         prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot; resolveHosts=&quot;false&quot;</span><br><span class="line">         pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b %&#123;x-forwarded-for&#125;i&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure></p>
<p>这里存在另一个细节，在产品部署中建议设置reloadable=”false”以提高tomcat性能。</p>
<h4 id="3-tomcat启动设置"><a href="#3-tomcat启动设置" class="headerlink" title="3. tomcat启动设置"></a>3. tomcat启动设置</h4><p>tomcat使用的是java默认参数，实际部署中可以根据系统的具体性能进行调整，如下所示将其添加到tomcat的启动脚本catalina.sh和daemon.sh中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&quot;-server</span><br><span class="line">-Xms512M -Xmx4096M</span><br><span class="line">-XX:LargePageSizeInBytes=128m</span><br><span class="line">-XX:+AggressiveOpts</span><br><span class="line">-XX:+UseBiasedLocking</span><br><span class="line">-XX:+DisableExplicitGC</span><br><span class="line">-XX:+UseFastAccessorMethods</span><br><span class="line">-XX:+UseParNewGC</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+CMSParallelRemarkEnabled</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection</span><br><span class="line">-XX:+UseCMSInitiatingOccupancyOnly</span><br><span class="line">-Djava.awt.headless=true</span><br><span class="line">-Djava.security.egd=file:/dev/./urandom</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure></p>
<p>-Xms: 初始化内存<br>-Xmx: 最大内存<br>-Xss: 线程栈大小，无需设置<br>-XX:+AggressiveOpts: JVM性能优化，加快编译<br>-XX:+UseBiasedLocking: JVM lock优化<br>-XX:LargePageSizeInBytes=128m: 堆的内存页大小<br>-XX:+DisableExplicitGC: 关闭系统System.gc()<br>-Djava.awt.headless=true: headless模式，适于server程序，无鼠标/显示/键盘等。<br>-Djava.security.egd=file:/dev/./urandom: 默认/dev/random是block模式，针对大并发有性能影响，若对随机数要求不高则用伪随机代替(使用file:/dev/./urandom,不是file:/dev/urandom)。</p>
<hr>
<p>更多的优化服务设置，请参照<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/http.html" target="_blank" rel="noopener">官方文档</a>。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx配置和tomcat会话保持]]></title>
      <url>http://zenvv.com/2016/04/06/nginx-tomcat-config/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>使用nginx提供web服务，除了配置简单以外，主要有以下两个优点：a. 高并发处理能力; b. 负载均衡。</p>
<h4 id="1-高性能设置"><a href="#1-高性能设置" class="headerlink" title="1. 高性能设置"></a>1. 高性能设置</h4><p>对于高并发处理能力，通常进行如下配置。<br>a. linux内核配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[/etc/sysctl.d/60-kernel.conf]:</span><br><span class="line"># net.core</span><br><span class="line">net.core.wmem_default=8388608</span><br><span class="line">net.core.rmem_default=8388608</span><br><span class="line">net.core.rmem_max=16777216</span><br><span class="line">net.core.wmem_max=16777216</span><br><span class="line">net.core.netdev_max_backlog=262144</span><br><span class="line">net.core.somaxconn=65535</span><br><span class="line"></span><br><span class="line"># net.ipv4</span><br><span class="line">net.ipv4.ip_forward=0</span><br><span class="line">net.ipv4.conf.default.rp_filter=0</span><br><span class="line">net.ipv4.conf.all.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.accept_source_route=0</span><br><span class="line">net.ipv4.ip_local_port_range=10240 65000</span><br><span class="line"></span><br><span class="line"># net.ipv4.tcp</span><br><span class="line">net.ipv4.tcp_sack=1</span><br><span class="line">net.ipv4.tcp_window_scaling=1</span><br><span class="line">net.ipv4.tcp_rmem=4096 87380 16777216</span><br><span class="line">net.ipv4.tcp_wmem=4096 65536 16777216</span><br><span class="line">net.ipv4.tcp_max_orphans=262144</span><br><span class="line">net.ipv4.tcp_timestamps=0</span><br><span class="line">net.ipv4.tcp_mem=1543458 2057947 3086916</span><br><span class="line">net.ipv4.tcp_fin_timeout=15</span><br><span class="line">net.ipv4.tcp_keepalive_time=300</span><br><span class="line">net.ipv4.tcp_syncookies=1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog=262144</span><br><span class="line">net.ipv4.tcp_syn_retries=1</span><br><span class="line">net.ipv4.tcp_synack_retries=1</span><br><span class="line">net.ipv4.tcp_tw_reuse=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=1</span><br><span class="line">net.ipv4.tcp_max_tw_buckets=262144</span><br><span class="line"></span><br><span class="line">[/etc/security/limits.d/nofile.conf]:</span><br><span class="line">*               hard    nofile            65535 </span><br><span class="line">*               soft    nofile            65535</span><br></pre></td></tr></table></figure>
<p>b. nginx并发配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 8; 		# cpu core num</span><br><span class="line">worker_rlimit_nofile 65535; # nofile.conf</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 20480;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h4><p>nginx常被作为应用服务前端的反向代理服务器，很容易提供负载均衡能力，即通过proxy_pass和upstream语法实现，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream servers &#123;</span><br><span class="line">    server host1;</span><br><span class="line">    server host2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在该配置下，nginx按rr(round-robin)轮询模式，将用户请求分发到不同的server上进行处理，从而达到负载均衡的效果。轮询模式非常适合那些无状态的应用服务。</p>
<p>但是，如果针对有状态的应用服务如tomcat(即需要保持session)，轮询模式不能够保证同一用户的访问请求，总是被映射到同一台tomcat服务器上，从而导致不能正确处理同一个用户的请求，例如，用户在tomcat1上登录，然而后续的请求被发送到tomcat2上，tomcat2并不能验证该用户是否已经登录从而要求用户重新登录。</p>
<p>常见的解决方法，是通过nginx内建的ip_hash模式，保证同一个用户的请求始终被同一个tomcat所处理，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream servers &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server tomcat1;</span><br><span class="line">    server tomcat2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然而，ip_hash不能够提供高质量的负载均衡能力。</p>
<p>为了让tomcat能够处理用户的session会话，常见的几种解决办法有:<br>a. 建立tomcat集群共享session，任意一个tomcat均能够处理集群内其他tomcat所产生的session。<br>b. 建立key/value服务(如redis/memcached)，让nginx和应用程序在这个服务中维护session达到共享的目的。<br>但是，这两种解决办法增加了系统架构的复杂度，增添了潜在风险，如tomcat集群/kv服务的稳定性。</p>
<p>这里，还有一种比较简洁的，也是重点推荐的一种解决办法。通过将第三方模块sticky(nginx-sticky-module-ng)编译进nginx中，然后进行如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream servers &#123;</span><br><span class="line">    sticky path=/app_cookie_path;</span><br><span class="line">    server tomcat1;</span><br><span class="line">    server tomcat2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>sticky模块的实现原理如下:<br>a. 对upstream下的所有server进行hash标识(即每一个server有一个hash值)；<br>b. 对用户请求按rr模式分配一个server，并将该server的hash值添加到用户cookie的route属性中；<br>c. 对用户的随后请求，通过其cookie中的route属性值，映射到同一个tomcat服务器中进行处理。<br>从而保证同一个用户的请求，始终被分配到同一个tomcat中进行处理。</p>
<p><b>在sticky模块使用过程中，需要注意一个问题: 建议显示设置sticky的path值，即应用程序的cookie标识。</b></p>
<p>官方文档path值为可选且默认为”/“，这是非常误导的，并且在国内网上的各种博客中都没有设置，大伙在测试demo时测试正确然后就没有下文。</p>
<p>正如前面sticky实现原理中所说的，sticky是通过对应用程序的cookie设置route值实现的。  </p>
<p>而在实际产品部署中，常见的是nginx同时配置多个应用，而每个应用都会有自己的cookie标识，而不是默认的”/“，这样导致nginx所设置的cookie route值在用户随后的访问中不起作用。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://zenvv.com/2016/04/05/hello-world/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><font size="1"><b>[声明] 再次重建个人blog, 许多博文已丢失，幸好还能从一些被转载的文章中找回几篇。再附上一篇转帖共勉：</b></font>


<p>有人说过：有一句说一百句的是文学家，这叫文采；有一句说十句的是教授，这叫学问；有一句说一句的是律师，这叫谨慎；说一句留一句的是外交家，这叫严谨；有十句说一句的是政治家，这叫心计；有点事甚至半句也没有的人，却发微博，这叫啥好呢？自己想吧。<br><b>[想不到见本篇标题，^_^]</b></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[童年的清明]]></title>
      <url>http://zenvv.com/2016/04/04/qingming-2016/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>清明时节雨纷纷，路上行人欲断魂。</p>
<p>又一年清明时节，伴雨而来，随风而去。</p>
<p>小时候的清明，每次，家族的几个小伙伴们都兴高采烈，因为有几个小节目等着我们去实现，一年又一年的重复着，乐此不彼。</p>
<p>刚入山不久，很快将遇到我们的第一个节目。映山红，初中时从课本里才知道也叫作杜鹃，杜鹃啼血，美丽的鲜艳。农历三月左右，山里的映山红，大部分还没有动静，小伙伴们争先恐后的寻找着最盛开的一片，划归到自己的名下。然后摘选一些最美丽的花朵随手拿着并吃着，有股淡淡的甜味，同时挖几颗造型酷的花丛带回家种植。</p>
<p>随着山路的左转右拐，到达了一大群刺杉群林，此起彼伏，对儿时的我们来说好不阴森，深怕一不留神陷进去走丢了。但令人想不到的是，就是在这些扎人的刺杉丛林里，一大堆不知什么名字的蕨类植物的幼芽正破土而出，鲜嫩带有点涩苦味，摘回去用地道的香油清炒，特别的有味道。</p>
<p>最后，在刺杉林的最深处，进行繁杂的祭祖活动。<br>随着活动的结束，我们不约而同想最高处的山顶登去，那里有着一块神秘的大石块。</p>
<p>相传，二郎真君驾云空中，发现此处有一大石块于是准备休息下。腾云而下一屁股直坐到那块大石头上，没成想石头太软(这里的山石大多是石灰岩)没能撑住真君，直向下凹陷而去。真君发现腚部下陷，于是随手用神戟在旁边撑住，随身一跃，腾空而起，双脚站到刚才屁股所在的地方。虽然站立起来，石头依然撑不住双脚继续下陷，这下一个不稳，我们的二郎真君直往旁边的下坡倒下，一头撞到大石块的下半部分。真君显然没想到在这个地方栽了一跤，丢不起那人，四周打探一下连忙腾空而走(忘了还有土地神)。</p>
<p>与许多人不一样，高中时候的我开始住校，每学期回家的次数平均一到两次。老家位于一个较为偏僻的地区，交通不发达，再加上非常的晕车，回家是个奢侈。<br>高中的前两年，每次，我们坐着汽车，汽车乘着轮渡，游过那条不宽的大河，到达那个穿山而过的小镇。等桥连通的那一年，正好赶上高三的下学期，繁忙的学业没有给丝毫喘息的机会周末回家。</p>
<p>人生第一次离开了每年清明必去山里祭祖的春游。到如今已经十几年，原本计划今年能赶回家，恰这时候赶上感冒，又没能回去，再度走一下儿时的路。</p>
<p>此时此刻，只能感叹下，许多东西都在改变，不变的只有儿时的记忆。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[WebRtc 网络基本流程]]></title>
      <url>http://zenvv.com/2014/12/10/webrtc-by-talk/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>WebRtc是一款非常优秀的实时音视频通信框架，采用RFC方案SDP offer/answer的方式建立网络会话。</p>
<h3 id="1-发起Setup-Call"><a href="#1-发起Setup-Call" class="headerlink" title="1. 发起Setup Call"></a>1. 发起Setup Call</h3><p>1).call and create local</p>
<p>CreatePeerConnection()<br>GetUserMedia() =&gt; AddLocalStream()/SetLocalRender()    </p>
<p>2).send offer</p>
<p>createOffer() =&gt; SetLocalSdp(offer) =&gt; SendOffer()     </p>
<p>3).recv answer</p>
<p>RecvAnswer() =&gt; SetRemoteSdp(answer)<br>OnRemoteStream()  =&gt; SetRemoteRender()</p>
<h3 id="2-应答Answer-Call"><a href="#2-应答Answer-Call" class="headerlink" title="2. 应答Answer Call"></a>2. 应答Answer Call</h3><p>1).recv call</p>
<p>CreatePeerConnection()  </p>
<p>2).recv offer</p>
<p>RecvOffer() =&gt; SetRemoteSdp()<br>GetUserMedia() =&gt; AddLocalStream()/SetLocalRender()   </p>
<p>3).send answer</p>
<p>createAnswer() =&gt; SetLocalSdp(answer) =&gt; SendAnswer()<br>OnRemoteStream()  =&gt; SetRemoteRender()  </p>
<h3 id="3-stun网络"><a href="#3-stun网络" class="headerlink" title="3. stun网络"></a>3. stun网络</h3><p>下面将就网络的基本类型作简单描述，以便理解stun的作用，假设内网主机I:i, 防火墙F:f, 外网主机S1:s1和S2:s2.</p>
<p>1) full cone:  I:i &lt;=&gt; F:f, 任意外网主机均可通过F:f发给I:i</p>
<p>2) restricted cone: I:i &lt;=&gt; F:f &lt;=&gt; S1, I:i &lt;=&gt; F:f &lt;=&gt; S2, 只有S1和S2可以通过F:f发给I:i</p>
<p>3) port restricted cone:  I:i &lt;=&gt; F:f &lt;=&gt; S1:s1, I:i &lt;=&gt; F:f &lt;=&gt; S2:s2, 只有S1:s1和S2:s2可以通过F:f发数据给I:i</p>
<p>4) symmetric NAT: I:i &lt;=&gt; F:f1 &lt;=&gt; S1:s1, I:i &lt;=&gt; F:f2 &lt;=&gt; S2:s2</p>
<p>基本处理流程如下(来着mozilla):<br><img src="https://mdn.mozillademos.org/files/6119/webrtc-complete-diagram.png" alt="STUN/TURN in WebRTC"></p>
<hr>
<p>相关webrtc源代码封装库和浏览器插件实现，可以参照<a href="https://github.com/peterxu/librtc" target="_blank" rel="noopener">librtc</a>和<a href="https://github.com/peterxu/RTCHub" target="_blank" rel="noopener">RTCHub</a>。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux编译安装Darwin Streaming Server 6.0.3]]></title>
      <url>http://zenvv.com/2009/10/04/Linux-dss-6-0-3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><font size="1" color="grey"><br>[声明] 很久前在chinaunix hi中分享了几篇blog, 由于其意外关闭导致全部丢失。如今，意外的发现有几篇被很多人引用，其中一些博主们并没有声明转载！在此重建个人博客以正声明，同时感谢那些博主们，否则找不回这篇旧文。<br></font>

<h3 id="1、什么是Darwin-Streaming-Server"><a href="#1、什么是Darwin-Streaming-Server" class="headerlink" title="1、什么是Darwin Streaming Server"></a>1、什么是Darwin Streaming Server</h3><p>目前主流的流媒体服务器有微软的windows media server、RealNetworks的Helixserver和苹果公司的Darwin Streaming Server. 微软的windows media server只能在windows2000 server和windows 2003 server下使用，不在考虑之列。RealNetworks的Helixserver是一款跨平台的软件，功能也很强大，但并非免费软件。</p>
<p>Darwin Streaming Server简称DSS。DSS是Apple公司提供的开源实时流媒体播放服务器程序。整个程序使用C++编写，在设计上遵循高性能，简单，模块化等程序设计原则，务求做到程序高效，可扩充性好。并且DSS是一个开放源代码的，基于标准的流媒体服务器，可以运行在Windows NT和Windows 2000，以及几个UNIX实现上，包括Mac OS X，Linux，FreeBSD，和Solaris操作系统上的。</p>
<h3 id="2、在Linux中编译安装Darwin-Streaming-Server"><a href="#2、在Linux中编译安装Darwin-Streaming-Server" class="headerlink" title="2、在Linux中编译安装Darwin Streaming Server"></a>2、在Linux中编译安装Darwin Streaming Server</h3><p>首先需要进行一些必要的准备工作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install patch make gcc g++</span><br></pre></td></tr></table></figure></p>
<p>准备好软件暂存的目录，并从官网下载软件的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir soft</span><br><span class="line">cd soft</span><br><span class="line">wget http://dss.macosforge.org/downloads/DarwinStreamingSrvr6.0.3-Source.tar</span><br></pre></td></tr></table></figure></p>
<p>源码下载完成后，需要解压tar包，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf DarwinStreamingSrvr6.0.3-Source.tar</span><br></pre></td></tr></table></figure></p>
<p>给源码安装补丁文件，进入DarwinStreamingSrvr6.0.3-Source目录，并打补丁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd DarwinStreamingSrvr6.0.3-Source</span><br><span class="line">wget http://www.abrahamsson.com/dss-6.0.3.patch</span><br><span class="line">patch -p1 &lt; dss-6.0.3.patch</span><br></pre></td></tr></table></figure></p>
<p>执行<code>./Buildit</code>编译完成后，我们来生成linux下的dss安装包.  </p>
<p>执行<code>./buildtarball</code>生成DarwinStreamingSrvr-Linux.tar.gz</p>
<p>然后解压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf DarwinStreamingSrvr-Linux.tar.gz </span><br><span class="line">cd DarwinStreamingSrvr-Linux</span><br></pre></td></tr></table></figure></p>
<p>对Install文件做修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ $INSTALL_OS = &quot;Linux&quot; ]; then </span><br><span class="line">    /usr/sbin/useradd -M qtss &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">else </span><br><span class="line">    /usr/sbin/useradd qtss &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p>
<p>将-M修改成-m</p>
<p>执行<code>./Install</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter a new administrator user name: 【新管理员】  </span><br><span class="line">Please enter a new administrator Password: 【密码】</span><br></pre></td></tr></table></figure></p>
<p>查看是否安裝成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep Darwin(查看流媒体服务器的进程)</span><br><span class="line">root ... ... ... /usr/local/sbin/DarwinStreamingServer</span><br><span class="line">qtss ... ... ... /usr/local/sbin/DarwinStreamingServer</span><br><span class="line"></span><br><span class="line">netstat -ntulp | grep Darwin(查看流媒体服务器的端口)</span><br></pre></td></tr></table></figure></p>
<h3 id="3-启动Server提供服务"><a href="#3-启动Server提供服务" class="headerlink" title="3. 启动Server提供服务"></a>3. 启动Server提供服务</h3><p>启动 Darwin Streaming Server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/sbin/DarwinStreamingServer</span><br></pre></td></tr></table></figure></p>
<p>启动 Web 管理介面 (tcp port 1220)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/sbin/streamingadminserver.pl</span><br></pre></td></tr></table></figure></p>
<p>ps. 以上两项在刚安装好的时候会自动启动，不需手动执行<br>ps. 自动启动流媒体服务器的方法：<br>自动运行流媒体服务器序非常简单，把上述命令添加在/etc/rc.d/rc.local脚本中即可。</p>
<p>最后在服务器输入 <code><a href="http://你的IP:1220/" target="_blank" rel="noopener">http://你的IP:1220/</a></code>来访问web管理<br>默认的媒体文件存放在<code>/usr/local/movies</code><br>你可以在web管理面板修改这个路径。</p>
<h3 id="4、访问自己的流媒体服务"><a href="#4、访问自己的流媒体服务" class="headerlink" title="4、访问自己的流媒体服务"></a>4、访问自己的流媒体服务</h3><p>可以使用VLC media player这个软件，输入<code>rtsp://你的IP/sample_100kbit.mp4</code>来播放默认的测试视频。如果你的网速够给力的话效果还不错 ：)</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Debian下安装mythtv]]></title>
      <url>http://zenvv.com/2009/05/12/debian-install-mythtv/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在debian中安装配置mythtv环境。</p>
<p>一. 环境配置<br>如果是debian或ubuntu系统，可以直接通过以下命令来安装mythtv；</p>
<p>对于debian或ubuntu系统，首先选择源:</p>
<ol>
<li><p>打开/etc/apt/sources.list文件，添加源：（国内）<br>deb <a href="http://debian.ustc.edu.cn/debian" target="_blank" rel="noopener">http://debian.ustc.edu.cn/debian</a> lenny main<br>deb <a href="http://debian.ustc.edu.cn/debian" target="_blank" rel="noopener">http://debian.ustc.edu.cn/debian</a> lenny main contrib<br>deb <a href="http://debian.ustc.edu.cn/debian" target="_blank" rel="noopener">http://debian.ustc.edu.cn/debian</a> lenny main non-free<br>deb <a href="http://www.debian-multimedia.org" target="_blank" rel="noopener">http://www.debian-multimedia.org</a> lenny main<br>或者：（国外）<br>deb <a href="http://ftp.debian.org/" target="_blank" rel="noopener">http://ftp.debian.org/</a> lenny main<br>deb <a href="http://ftp.debian.org/debian" target="_blank" rel="noopener">http://ftp.debian.org/debian</a> lenny main contrib<br>deb <a href="http://ftp.debian.org/debian" target="_blank" rel="noopener">http://ftp.debian.org/debian</a> lenny main non-free<br>deb <a href="http://www.debian-multimedia.org" target="_blank" rel="noopener">http://www.debian-multimedia.org</a> lenny main<br>如果以上源都无法连上，可以找其他国内源</p>
</li>
<li><p>添加完保存退出后，使用sudo apt-get update命令更新上面的源，然后开始mythtv的安装</p>
</li>
</ol>
<p>二. 安装使用mythtv  </p>
<p>第一步：mythtv安装</p>
<ol>
<li>Sound安装<br> 1) aptitute install alsa-base alsa-utils libesd-alsa0<br> 2) 配置声卡命令：alsaconf</li>
<li>引入gpg keys<br>命令：aptitute install debian-multimedia-keyring</li>
<li>安装mythtv<br>1) aptitute install mythtv<br>2) mythtv安装过程配置mysql数据库(该数据库可以提前安装:aptitute install mysql-server),该数据库需要在root用户下进入：命令mysql -uroot -p<br>４. 安装mythtv其他组件，如mythvideo, mythmusic,mythphoto等<br>命令：aptitute install 组件名<br>然后重启mythtv，使用mythfrontend命令  </li>
<li>配置mythtv，可以参考：<a href="http://parker1.co.uk/mythtv_ubuntu.php，其中大部分都选择默认方式，需要最好选择英文，如果选hanzi的话就是繁体中文。" target="_blank" rel="noopener">http://parker1.co.uk/mythtv_ubuntu.php，其中大部分都选择默认方式，需要最好选择英文，如果选hanzi的话就是繁体中文。</a></li>
</ol>
<p>第二步：播放本地视频文件  </p>
<ol>
<li>使用mythfrontend命令启动mythtv</li>
<li>选择Utilities/Setup-&gt;Setup-&gt;Media Settings-&gt;Videos Settings-&gt;General Settings，在Directories that hold videos:一栏输入本地视频存放路径，然后保存设置。返回上一级，进入File Types，在Extension中选择播放的视频后缀，对于想播放的视频文件，其Use default player和Ignore项空起来，而在Command项如果mythtv自身可以播放就会出现Internal，如果为空，就可以输入系统中安装的播放器，如mplayer等。</li>
<li>通过选择Utilities/Setup-&gt;Video Manager可以看到视频目录中存在的文件</li>
<li>返回最上层，选择Media Library-&gt;Watch Videos，就可以看到可以播放的视频文件，任意选择一个，按Enter键显示该文件信息，再次Enter键就可以看到播放内容了</li>
</ol>
<p>第三步：播放流媒体文件</p>
<ol>
<li>使用aptitute install mythstream来安装mythstream组件</li>
<li>安装完后就可以使用流媒体功能了，可以尝试mythstream组件中已有的流媒体文件</li>
<li>使用sudo mythfrontend命令（注意前面使用了sudo）启动mythtv，进入Media Library-&gt;Play online streams后，就可以选择里面的流媒体文件进行播放（需要能够连接国外网站）</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell批处理编码转换gbk->utf8]]></title>
      <url>http://zenvv.com/2009/03/24/shell-gbk-to-utf8/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近遇到工程里面c/c++代码注释utf8和gbk共存的情况,在服务器上使用vim编辑非常不方便.于是编写了一个shell程序遍历所有文件，并将所有文件中中文gbk编码转化为utf8。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 定义一个方法</span><br><span class="line">foreachd()&#123;</span><br><span class="line">  	# 遍历参数1</span><br><span class="line">  	for file in $1/*</span><br><span class="line">  	do</span><br><span class="line">        # 如果是目录就打印处理，然后继续遍历，递归调用</span><br><span class="line">        if [ -d $file ]</span><br><span class="line">        then</span><br><span class="line">            # echo $file</span><br><span class="line">            foreachd $file</span><br><span class="line">        else</span><br><span class="line">            if [[ $file =~ &quot;.h&quot; || $file =~ &quot;.cpp&quot; ]]</span><br><span class="line">            then</span><br><span class="line">                echo $file</span><br><span class="line">                tempfile=`echo $file”.5″`</span><br><span class="line">                iconv -f gbk -t utf8 $file &gt; $tempfile</span><br><span class="line">                mv $tempfile $file</span><br><span class="line">            fi</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#执行，如果有参数就遍历指定的目录，否则遍历当前目录</span><br><span class="line">if [ $# -gt 0 ]</span><br><span class="line">then</span><br><span class="line">    foreachd “$1″</span><br><span class="line">else</span><br><span class="line">    foreachd “.”</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Latex (wiki) 空格处理]]></title>
      <url>http://zenvv.com/2009/03/11/latex-space/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>注意TeX能够自动处理大多数的空格，但是您有时候需要自己来控制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">功能　　　		　语法　　　	　显示　　　　　　备注 </span><br><span class="line">两个quad空格　　　a \qquad b	　a \qquad b　　两个m的宽度</span><br><span class="line">quad空格　　　　　a \quad b	 　a \quad b　　一个m的宽度</span><br><span class="line">大空格　　　　　　a\ b　　　　　　a\ b　　　　　1/3m宽度</span><br><span class="line">中等空格　　　　　a\;b　　　　　　a\;b　　　　　2/7m宽度</span><br><span class="line">小空格　　　　　　a\,b　　　　　　a\,b　　　　　1/6m宽度</span><br><span class="line">没有空格　　　　　ab　　　　　　　ab\,	</span><br><span class="line">紧贴　　　　　　　a\!b　　　　　　a\!b　　　　　缩进1/6m宽度</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[修改版通用Makefile模板]]></title>
      <url>http://zenvv.com/2009/03/09/general-makefile/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>对一个已有的通用Makefile模板(来自whyglinux)作了部分修改，供自己使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">###############################################################################</span><br><span class="line">#</span><br><span class="line"># Generic Makefile for C/C++ Program</span><br><span class="line">#</span><br><span class="line"># Author: whyglinux (whyglinux AT hotmail DOT com)</span><br><span class="line"># Date: 2006/03/04</span><br><span class="line"># Modified: uskee@hotmail.com at 2009/03/09</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Description:</span><br><span class="line"># The makefile searches in directories for the source files</span><br><span class="line"># with extensions specified in , then compiles the sources</span><br><span class="line"># and finally produces the , the executable file, by linking</span><br><span class="line"># the objectives.</span><br><span class="line"># Usage:</span><br><span class="line"># $ make compile and link the program.</span><br><span class="line"># $ make objs compile only (no linking. Rarely used).</span><br><span class="line"># $ make clean clean the objectives and dependencies.</span><br><span class="line"># $ make cleanall clean the objectives, dependencies and executable.</span><br><span class="line"># $ make rebuild rebuild the program. The same as make clean &amp;&amp; make all.</span><br><span class="line">#==============================================================================</span><br><span class="line">## Customizing Section: adjust the following if necessary.</span><br><span class="line">##=============================================================================</span><br><span class="line"># The generated file name.</span><br><span class="line"># It must be specified.</span><br><span class="line"># PROGRAM := a.out # the generated name</span><br><span class="line">PROGRAM :=</span><br><span class="line"># The directories in which source files reside.</span><br><span class="line"># At least one path should be specified.</span><br><span class="line"># SRCDIRS := . # current directory</span><br><span class="line">SRCDIRS := .</span><br><span class="line"># The source file types (headers excluded).</span><br><span class="line"># At least one type should be specified.</span><br><span class="line"># The valid suffixes are among of .c, .C, .cc, .cpp, .CPP, .c++, .cp, or .cxx.</span><br><span class="line"># SRCEXTS := .c # C program</span><br><span class="line"># SRCEXTS := .cpp # C++ program</span><br><span class="line"># SRCEXTS := .c .cpp # C/C++ program</span><br><span class="line">SRCEXTS := .c .cpp</span><br><span class="line"># The flags used by the cpp (man cpp for more).</span><br><span class="line"># CPPFLAGS := -Wall -Werror # show all warnings and take them as errors</span><br><span class="line">CPPFLAGS := -Wall -Werror -Wno-deprecated</span><br><span class="line"># The compiling flags used only for C.</span><br><span class="line"># If it is a C++ program, no need to set these flags.</span><br><span class="line"># If it is a C and C++ merging program, set these flags for the C parts.</span><br><span class="line">CFLAGS :=</span><br><span class="line">CFLAGS +=</span><br><span class="line"># The compiling flags used only for C++.</span><br><span class="line"># If it is a C program, no need to set these flags.</span><br><span class="line"># If it is a C and C++ merging program, set these flags for the C++ parts.</span><br><span class="line">CXXFLAGS :=</span><br><span class="line">CXXFLAGS +=</span><br><span class="line"># The directories contains all required headers; “-I”</span><br><span class="line">INCLUDES :=</span><br><span class="line">INCLUDES +=</span><br><span class="line"># The library and the link options ( C and C++ common).: “-L” and “-l”</span><br><span class="line"># If for generating dynamic libraries, using “-shared” option, or no.</span><br><span class="line">LDFLAGS :=</span><br><span class="line">LDFLAGS +=</span><br><span class="line">#==============================================================================</span><br><span class="line">## Implict Section: change the following only when necessary.</span><br><span class="line">##=============================================================================</span><br><span class="line"># The C program compiler. Uncomment it to specify yours explicitly.</span><br><span class="line">CC = gcc</span><br><span class="line"># The C++ program compiler. Uncomment it to specify yours explicitly.</span><br><span class="line">CXX = g++</span><br><span class="line"># Uncomment the 2 lines to compile C programs as C++ ones.</span><br><span class="line">#CC = $(CXX)</span><br><span class="line">#CFLAGS = $(CXXFLAGS)</span><br><span class="line"># The command used to generate static library</span><br><span class="line">AR	= ar rcs</span><br><span class="line"># The command used to delete file.</span><br><span class="line">RM	= rm -f</span><br><span class="line">#==============================================================================</span><br><span class="line">## Stable Section: usually no need to be changed. But you can add more.</span><br><span class="line">##=============================================================================</span><br><span class="line">SHELL = /bin/sh</span><br><span class="line">SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))</span><br><span class="line">OBJS = $(foreach x,$(SRCEXTS), \</span><br><span class="line">$(patsubst %$(x),%.o,$(filter %$(x),$(SOURCES))))</span><br><span class="line">DEPS = $(patsubst %.o,%.d,$(OBJS))</span><br><span class="line">.PHONY : all objs clean cleanall rebuild</span><br><span class="line">#—————————————————</span><br><span class="line"># Rules for creating the dependency files (.d).</span><br><span class="line">#—————————————————</span><br><span class="line">all : $(PROGRAM)</span><br><span class="line">%.d : %.c</span><br><span class="line">@$(CC) -MM -MD $(CFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.d : %.cc</span><br><span class="line">@$(CC) -MM -MD $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.d : %.cpp</span><br><span class="line">@$(CC) -MM -MD $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">#---------------------------------------------------</span><br><span class="line"># Rules for producing the objects.</span><br><span class="line">#---------------------------------------------------</span><br><span class="line">objs : $(OBJS)</span><br><span class="line">%.o : %.c</span><br><span class="line">$(CC) -c $(CPPFLAGS) $(CFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.o : %.cc</span><br><span class="line">$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.o : %.cpp</span><br><span class="line">$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">#---------------------------------------------------</span><br><span class="line"># Rules for producing the executable.</span><br><span class="line">#----------------------------------------------</span><br><span class="line">$(PROGRAM) : $(OBJS)</span><br><span class="line"># This is for generating executal program or dynamic library</span><br><span class="line">ifeq ($(strip $(SRCEXTS)), &quot;.c&quot;) # C file</span><br><span class="line">$(CC) -o $(PROGRAM) $(OBJS) $(LDFLAGS)</span><br><span class="line">else # C++ file</span><br><span class="line">$(CXX) -o $(PROGRAM) $(OBJS) $(LDFLAGS)</span><br><span class="line">endif</span><br><span class="line"># This is for generation static libraries.</span><br><span class="line"># $(AR)	$(PROGRAM)	$(OBJS)</span><br><span class="line">-include $(DEPS)</span><br><span class="line">rebuild: clean all</span><br><span class="line">clean :</span><br><span class="line">@$(RM) *.o *.d</span><br><span class="line">cleanall: clean</span><br><span class="line">@$(RM) $(PROGRAM) $(PROGRAM).a $(PROGRAM).so</span><br><span class="line">### End of the Makefile ## Suggestions are welcome ## All rights reserved ###</span><br><span class="line">###############################################################################</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[debian 5.0安装及配置]]></title>
      <url>http://zenvv.com/2009/03/03/use-debian-5-0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>下面将就debian lenny 5.0在我本子上的具体安装及相关配置作些介绍，以作备份之用。</p>
<p>debian lenny 5.0的启动速度约为10s, 关机速度为5s，比上一个版本确实升级了许多。之前我是从debian etch 4.0 r2升级到5.0，速度较慢(启动20s，关机10-15s)，升级之后gnome经常崩溃以及klog重启，实在经受不了于是昨天整修了下系统，但不小心将splashy给删除了，结果导致系统的许多服务启动不了, 不想将相关修补程序copy到系统下，于是重装了事省心。</p>
<h2 id="1-安装debian-lenny-5-0"><a href="#1-安装debian-lenny-5-0" class="headerlink" title="1. 安装debian lenny 5.0"></a>1. 安装debian lenny 5.0</h2><p>从debian.org官方网站上下载lenny 5.0的cd-image-1即可, 将其刻录成光盘。<br>开始进行安装，区域选择中国，语言选择中文，键盘选择US(一般)，其它默认即可，直到硬盘分区，默认自动分区没有问题，但建议手动分区：<br>(1)设置主分区，<br>(2)设置swap分区，<br>(3)单独分一块作为/home分区(这样能防止系统崩溃时数据不会丢失)。<br>然后开始copy并install系统。整个过程大约30-40分钟。<br>安装完毕后重新启动进入debian X系统，进行如下配置可以更加友好地使用系统。</p>
<h2 id="2-相关配置"><a href="#2-相关配置" class="headerlink" title="2. 相关配置"></a>2. 相关配置</h2><p>(1). 首先将当前帐户设置为sudo用户，先使用root登录，然后执行visudo, 仿照root插入新的一行，具体如下(假设当前用户为test)<br>$su -<br>密码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#visudo</span><br><span class="line"># /etc/sudoers</span><br><span class="line">#</span><br><span class="line"># This file MUST be edited with the &apos;visudo&apos; command as root.</span><br><span class="line">#</span><br><span class="line"># See the man page for details on how to write a sudoers file.</span><br><span class="line">#</span><br><span class="line">Defaults env_reset</span><br><span class="line"># Host alias specification</span><br><span class="line"># User alias specification</span><br><span class="line"># Cmnd alias specification</span><br><span class="line"># User privilege specification</span><br><span class="line">root ALL=(ALL) ALL</span><br><span class="line"># 下面这个是你要添加的</span><br><span class="line">test ALL=(ALL) ALL</span><br><span class="line">#exit</span><br><span class="line">logout</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p>
<p>至此你的用户即为sudo用户，可以使用sudo + command执行root权限所能执行的东西。</p>
<p>(2) 配置apt源<br>编辑/etc/apt/source.list文件，将以下几行加入到其中，并建议将其中cd源那几行注释掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb http://ftp.debian.org/ lenny main</span><br><span class="line">deb http://ftp.debian.org/debian lenny main contrib</span><br><span class="line">deb http://ftp.debian.org/debian lenny main non-free</span><br><span class="line">deb http://www.debian-multimedia.org lenny main</span><br></pre></td></tr></table></figure></p>
<p>后面的那个多媒体源需要去其网站上下载key并安装即可。然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aptitude update</span><br></pre></td></tr></table></figure></p>
<p>(3)安装相关软件<br>debian 5.0默认已经安装好ice-weasel(即是firefox的debian名称)，还需要安装的有以下几个：  </p>
<p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install scim scim-chinese scim-pinyin ##安装中文输入法，fcitx也挺好用的</span><br><span class="line">$sudo aptitude install unrar unzip ## 用来解压rar和.zip之类的压缩文件的</span><br><span class="line">$sudo aptitude install pidgin ## 可以用来登录msn, qq等聊天工具</span><br><span class="line">$sudo aptitude install lftp gftp ## lftp是比较好用的shell ftp工具，gftp是GUI工具</span><br><span class="line">$sudo aptitude install qterm ## 用来上bbs的term</span><br></pre></td></tr></table></figure></p>
<p>娱乐类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install vlc ##安装vlc播放器</span><br><span class="line">$sudo aptitude install mplayer smplayer ##安装mplayer播放器，其中smplayer是比较好用的mplayer界面</span><br><span class="line">$sudo aptitude install w32codecs ##安装mplayer相关解码器，可以支持rmvb等多种格式播放</span><br><span class="line">$sudo aptitude install wine ##安装windows程序模拟器wine,可以用来玩魔兽，CS等游戏</span><br></pre></td></tr></table></figure></p>
<p>办公类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install icedove ## 这是邮件客户端mozilla-thunderbird的debian名称。</span><br><span class="line">$sudo aptitude install openoffice.org ##安装办公套装openoffice</span><br><span class="line">$sudo aptitude install stardict ## 安装英汉词典，另外有个qt版本qstardict，感兴趣的可以试试；词典库需要另外下载</span><br></pre></td></tr></table></figure></p>
<p>开发类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install vim ##将vim升级安装，会更加好用，当然需要配置下文件/etc/vim/vimrc</span><br><span class="line">$sudo aptitude install emacs ## 喜欢用emacs可以安装这个编辑器</span><br><span class="line">$sudo aptitude install sun-java6-bin sun-java6-jre sun-java6-jdk ## 安装java库</span><br><span class="line">$sudo aptitude install eclipse ## 安装eclipse开发工具</span><br><span class="line">$sudo aptitude install manpages manpages-dev manpages-posix manpages-posix-dev ## 安装gcc开发文档</span><br><span class="line">## 另外std c++文档直接用aptitude安装后不能使用，需要先下载该文档。</span><br><span class="line">$aptitude download libstdc++6-4.3-doc</span><br><span class="line">## 再解压缩该包将里面man下的文档，copy到/usr/share/man1下面，然后执行</span><br><span class="line">$mandb ## 该命令更新man手册文件</span><br><span class="line">## 对于其它的手册不能使用的均可以采取上述方法。</span><br></pre></td></tr></table></figure></p>
<p>添加新字体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$sudo mkdir /usr/local/share/fonts/simsung</span><br><span class="line">将windows下的simsung.ttf文件</span><br><span class="line">$sudo cp simsung.ttf /usr/local/share/fonts/simsung</span><br><span class="line">$sudo fc-cache</span><br><span class="line">然后即可在“外观首选项”中的“字体”项里面找到宋体和新宋体了。</span><br><span class="line">删除方法如下：</span><br><span class="line">$sudo rm -r /usr/local/share/fonts/simsung</span><br><span class="line">$sudo fc-cache</span><br></pre></td></tr></table></figure></p>
<p>修正debian时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改/etc/timezone文件和/etc/localtime文件:</span><br><span class="line">$sudo echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class="line">$sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">并将文件/etc/default/rcS中的UTC值改为no</span><br><span class="line">通过网络校正本地时间</span><br><span class="line">$sudo aptitude install ntpdate</span><br><span class="line">$sudo ntpdate pool.ntp.org</span><br><span class="line">然后将时间更新到BIOS里面</span><br><span class="line">$sudo hwclock --systohc</span><br></pre></td></tr></table></figure></p>
<p>其它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install virtualbox ## 比较好用的一款虚拟机，可以玩玩windows xp/vista/7等</span><br><span class="line">$sudo aptitude install freemind ## 随时记录自己的奇思妙想</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[sed使用之感想]]></title>
      <url>http://zenvv.com/2008/12/17/sed-usage-feel/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近处理大批量的html视频信息网页，从中提取视频图片url、播放url、主演、导演和简介等。不想写代码，于是直接使用shell下sed命令。</p>
<p>sed的正则表达式确实很复杂(类perl的)，花了半个小时才搞定了。但看起来确实很爽，一行就搞定了.<br>下面这个命令是用于预处理信息的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /tmp/mov_html | xargs cat | sed -n ’s/\(.*&lt;dd&gt;.*\”character_.*\)\|\(.*\”list_.*\)\|\(.*leiyancontent.*div\&gt;\).*/\1\2\3\n/p’ &gt; ./temp_mov_info.txt</span><br></pre></td></tr></table></figure></p>
<p>但运行起来确实痛苦，一直占CPU 90%以上，一共运行了近6个小时才完毕。即使通过xargs限制进程数和每次传入参数个数也不管用。<br>一方面是html中只有一小块信息是有效的，而这里是处理文件的所有行，浪费资源；另一方面，正则表达式写的不够完善，匹配很花时间，若在python程序中通过简单的find即可找到需要的块，然后再使用正则表达式匹配即可。<br>基于这两点，之后使用python程序改写了，效率大大提高，大约花了15分钟即可完成。sed一般比较适合少量文件的处理，若文件非常多且处理中无用信息很多，最好先用脚本程序(shell/python/perl)作预处理。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于圆内外2n+1个点的分配]]></title>
      <url>http://zenvv.com/2008/12/06/circle-point-allocation/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>假设平面坐标上有2n+1个点，如何作一个圆，使得恰有n个点在圆内，n个在圆外，1个在圆上。  </p>
<p>分析: 假设已经找到这个圆，那么在该圆内任选一条弦，且满足该弦与不在圆上的另外2n个点中的任意一个均不共线，则该弦和这2n个点可以构造2n个三角形。由于在圆外的点与弦所构成的三角形中弦的对角必定小于与该弦同方向的圆周角；同理，在圆内的点与弦所构成的三角形中则呈大于关系；而在圆上的点与弦的关系是或者共线(即0角度)，或者为圆周角。</p>
<p>根据以上分析，可以采用如下方法可以找到这个圆。但直接使用如上方法，非常复杂。下面首先对数据进 行预处理。这2n+1个点向x正向和y正向坐标轴移动(即是从左下向右上移动)，直至最左下的点移动到原点O处，这时另外2n个点要么在x轴正半轴上，要 么在x轴上方。因此过O点可以找到一条直线，使2n个点位于它的同一侧(且不在线上)，在该直线上任取一个点P(与O点不重复)，以OP为边，以线外2n 个点为第三个顶点可以构造出2n个三角形。然后对所有三角形中OP的对角(共2n个)进行排序并判断：若第n个角不等于第n+1个角，则任取一个在区间 (第n,第n+1)这两个角度之间的角度(设为k), 则以OP为弦且同方向圆周角大小为k唯一确定一个圆，该圆即满足条件。若第n个角度与第n+1个相等，则调整P点的位置(在程序里易实现)，重新排序判断 直至求得可行解。</p>
<p>关于该方法的证明和程序后续可能会提供。这里参照了以前一个中学竞赛的题目，以及javaman所提的通过将所有点移动到同一边以简化算法的idea，在此表示感谢。</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[等概率随机数的生成方法]]></title>
      <url>http://zenvv.com/2008/12/04/random-generator/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>最近遇到一道关于随机数生成的问题，题目如下:</p>
<p>(1) 假设rand8()只生存[0,7]间的任意实数且属于均匀概率分布，则如何实现一个随机函数rand11()生成0-10之间的任意实数也属于均匀概率分布?<br>(2) 假设rand8()只生存[0,7]间的任意整数且属于均匀概率分布，则如何实现一个随机函数rand11()生成0-10之间的任意整数也属于均匀概率分布?</p>
<p>第一题简单，即是 rand11() = (10.0*rand8()) / (7.0);  </p>
<p>第二题有难度， rand8()只产生0,1,2..7这8个数，如何将其放大到0,1,2..10这11个数。在这里我们可以考虑使用笛卡尔乘积的方法(这里用<strong>表 示)。则rand8() </strong> rand8()一共可一产生64种编码结果，且是等概率的(属于均匀概率分布)。从这64种结果中预先随机选取11种情况分别映射为 0,1,2,…,10这11个整数。<br>然后定义rand11() 如下:  若rand8() <strong> rand*() 产生的编码为预先选取的，则返回其相应的映射值，否则重新执行rand8()</strong>rand8()直至生产为预先选取的。则rand11() 满足需求。<br>这个解决方法是javaman提供的，在此表示感谢!</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[python 在不同层级目录import 模块的方法]]></title>
      <url>http://zenvv.com/2008/11/22/python-import-path/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><font size="1" color="grey"><br>[声明] 很久前在chinaunix hi中分享了几篇blog, 由于其意外关闭导致全部丢失。如今，意外的发现有几篇被很多人转载！同时也感谢那些博主们，让我能够找回这篇旧文。<br></font>


<p>python包含子目录中的模块方法比较简单，关键是能够在sys.path里面找到通向模块文件的路径。</p>
<p>下面将具体介绍几种常用情况:<br>（1）主程序与模块程序在同一目录下<br>如下面程序结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── mod1.py</span><br><span class="line">    └── test1.py</span><br></pre></td></tr></table></figure></p>
<p>若在程序test1.py中导入模块mod1, 则直接使用import mod1或from mod1 import *;</p>
<p>（2）主程序所在目录是模块所在目录的父(或祖辈)目录<br>如下面程序结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── mod1.py</span><br><span class="line">    ├── mod2</span><br><span class="line">    │   └── mod2.py</span><br><span class="line">    └── test1.py</span><br></pre></td></tr></table></figure></p>
<p>若在程序test1.py中导入模块mod2, 需要在mod2文件夹中建立空文件__init__.py文件(也可以在该文件中自定义输出模块接口); 然后使用 from mod2.mod2 import * 或import mod2.mod2.</p>
<p>（3）主程序导入上层目录中模块或其他目录(平级)下的模块<br>如下面程序结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── mod1.py</span><br><span class="line">    ├── mod2</span><br><span class="line">    │   └── mod2.py</span><br><span class="line">    ├── sub</span><br><span class="line">    │   └── test2.py</span><br><span class="line">    └── test1.py</span><br></pre></td></tr></table></figure></p>
<p>若在程序test2.py中导入模块mod1和mod2。<br>首先需要在mod2下建立<strong>init</strong>.py文件(同(2))，src下不必建立该文件;<br>然后调用方式如下.</p>
<p>下面程序执行方式均在程序文件所在目录下执行，如test2.py是在cd sub; 之后执行python test2.py.<br>而test1.py是在cd src;之后执行python test1.py; 不保证在src目录下执行python sub/test2.py成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(”..”)</span><br><span class="line">import mod1</span><br><span class="line">import mod2.mod2</span><br></pre></td></tr></table></figure></p>
<p>从(3)可以看出，导入模块关键是能够根据sys.path环境变量的值，找到具体模块的路径。这里仅介绍上面三种简单情况。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优化playmp3list代码]]></title>
      <url>http://zenvv.com/2008/09/13/optimize-playmp3list/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>今天修改了播放器playmp3list的部分代码bug。</p>
<p>直接使用aptitude install playmp3list安装上的player存在两个问题：<br>（1）对中文支持不好，<br>（2）cpu消耗太多，也是最大的bug。  </p>
<p>我使用的平台及硬件属性为: debian 2.6.24-1-686 GNU/Linux, Genuine Intel(R) CPU T2050  @ 1.60GHz，cpu占有率平均为80%!!!</p>
<p>首先增加对中文的支持，<br>(1) 需要安装ncursesw开发库，<br>(2) 将playmp3list.h中的宏定义#define NCURSES <ncurses ncurses.h="">修改为#define NCURSES <ncursesw ncurses.h="">，<br>(3)将生成的Makefile中的行LIBS =  -lcurses修改为LIBS =  -lncursesw，<br>(4) 在main.cc中包含#include <locale.h>，并在main()函数的开始处调用setlocale(LC_ALL, “”); 注意不能使用setlocale(LC_ALL, NULL)。<br>之后make; make install即可安装完成, playmp3list yourMusicPath 运行后可以看到正确中文字符了。</locale.h></ncursesw></ncurses></p>
<p>其次，修改高cpu消耗的bug, 实际上这个很简单，只需在主循环里面增加个usleep函数即可，以防止持续高速的屏幕刷新(估计作者在没有测试内存消耗的情况下即提交代码了)。我添加的位置是: 在void play_list(void)函数中的do{}while的循环体起始处添加usleep(300);语句 //这里的睡眠时间只要不影响界面的正常刷新即可。</p>
<p>若发现播放mp3时程序退出，需要修改一个地方重新编译即可。将interface.cc文件中的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">playmp3listWindow::do_refresh()</span><br><span class="line">&#123; /*touchwin(stdscr);</span><br><span class="line">  refresh();*/  // I don’t know why this doesn’t work, so I’m using this instead…</span><br><span class="line">  resize();</span><br><span class="line">&#125; // do_refresh</span><br><span class="line">修改为:</span><br><span class="line">void</span><br><span class="line">playmp3listWindow::do_refresh()</span><br><span class="line">&#123; touchwin(stdscr);</span><br><span class="line">  refresh();  // I don’t know why this doesn’t work, so I’m using this instead…</span><br><span class="line">  //resize();</span><br><span class="line">&#125; // do_refresh</span><br></pre></td></tr></table></figure></p>
<p>关于原因，我想你已经看到的注释了。另外需要安长mpg123解码库才能播放mp3(附件有我improve的代码)。</p>
<p>最后，一个完整的shell下mp3播放器完成了，去体验一下。</p>
<p><a href="http://download.csdn.net/detail/uskee/786855" target="_blank" rel="noopener">附源代码下载地址</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
