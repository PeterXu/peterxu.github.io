<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Nginx虚拟主机和多域名处理逻辑]]></title>
      <url>http://zenvv.com/2016/04/13/nginx-server-config/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>与apache httpd类似，在nginx中通过server字段定义多个虚拟主机。<br>nginx按照server加载顺序处理用户请求, 但可能导致一些意外行为，下面将进行具体描述。</p>
<p>假设服务器地址为ServerIP, 该IP被多个域名映射(www.b.com, www.c.com和www.d.com).</p>
<h4 id="情形1：所有server在同一个文件中-例如default-conf"><a href="#情形1：所有server在同一个文件中-例如default-conf" class="headerlink" title="情形1：所有server在同一个文件中, 例如default.conf."></a>情形1：所有server在同一个文件中, 例如default.conf.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># server-b</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name b.com www.b.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-c</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name c.com www.c.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然b.com/c.com将会分别正确访问到server-b/server-c的资源,</p>
<p>d.com/ServerIP也可以访问到nginx, 由于没有匹配的server_name，<br>nginx按照server加载顺序进行处理，将使用第一个server资源进行响应请求。<br>于是d.com访问的是server-b的资源。</p>
<h5 id="1-禁止d-com"><a href="#1-禁止d-com" class="headerlink" title="1) 禁止d.com"></a>1) 禁止d.com</h5><p>如果仅禁止d.com访问server-b/c的资源，可以显示定义server处理d.com。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># server-b</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name b.com www.b.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-c</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name c.com www.c.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-d</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name d.com www.d.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">    	try_files $uri $uri/ =404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="2-同时禁止d-com和ServerIP"><a href="#2-同时禁止d-com和ServerIP" class="headerlink" title="2) 同时禁止d.com和ServerIP"></a>2) 同时禁止d.com和ServerIP</h5><p>如果同时禁止d.com和ServerIP访问资源(server-b/server-c), 则需在server-b之再定义一个空server虚拟主机。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># server-non</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name _;</span><br><span class="line">    </span><br><span class="line">	location / &#123;</span><br><span class="line">		try_files $uri $uri/ =404;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-b</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name b.com www.b.com;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># server-c</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name c.com www.c.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于server-non设置中的server-name值无所谓，只要不影响正常服务即可。</p>
<p>显然，第二种设置更简单通用，但需要在所有虚拟主机之前定义空server才起作用。</p>
<h4 id="情形2-server在不同的文件中"><a href="#情形2-server在不同的文件中" class="headerlink" title="情形2: server在不同的文件中"></a>情形2: server在不同的文件中</h4><p>假设b.com设置在bsize.conf中，c.com设置在csite.conf中. b/c.com均能正常访问资源。<br>但d.com/ServerIP仍然是访问server-b的资源，而不是server-c，原因是由于Nginx include是按照文件名字ascii属性进行加载的。</p>
<p>也即是说，bsite.conf中server比csite.conf优先加载, 如果c.com设置在bsite.conf,b.com设置在csite.conf，则d.com/ServerIP访问到的是server-c的资源。</p>
<p>因此，对于仅禁止d.com访问server-b/server-c的资源，仅需要显示设置其即可(文件名无所谓)，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># server-d</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name d.com www.d.com;</span><br><span class="line">	location / &#123;</span><br><span class="line">		try_files $uri $uri/ =404;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果需要通用禁止所有非b.com/c.com(如d.com/ServerIP)访问资源，则必须设置比已有配置文件名ascii更靠前的文件名。在这个案例中，创建一个文件名为aaa.conf即可，其内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># server-non</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name _;</span><br><span class="line">    </span><br><span class="line">	location / &#123;</span><br><span class="line">		try_files $uri $uri/ =404;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTP URI末尾斜杠在nginx中的处理]]></title>
      <url>http://zenvv.com/2016/04/11/nginx-slash-http/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>HTTP协议请求的uri, 是以斜杠”/“(slash)作为基本分割符。而对于末尾的斜杠容易被我们忽略，下面将就这个问题进行具体分析。</p>
<p>首先得明确，http uri是否以slash结尾，是意味着不同的含义，例如以slash分割后的最后一个单元字段命名为lastsection。那么通常情况下，不是以slash结尾是指向服务器请求名字为lastsection的资源(<code>http://localhost/lastsection</code>)，以slash结尾的是请求路径lastsection下的某个资源(<code>http://localhost/lastsection/</code>)。</p>
<p>具体到nginx中，又是如何进行处理的，下面以静态资源为例，并将index设置为index.html。</p>
<p><b>情形1: nginx root下不存在test目录</b><br>如果请求<code>http://localhost/test</code>, 则nginx返回错误(404 Not Found)。</p>
<p><b>情形2: root下存在test空目录</b><br>如果请求<code>http://localhost/test</code>, 则nginx返回(301 Moved Permanently), 浏览器在收到后，将重新请求(Redirect) <code>http://localhost/test/</code>, 由于test为空目录不存在index.html, 故而nginx返回错误(403 Forbidden)。</p>
<p>如果请求<code>http://localhost/test/</code>, 则nginx直接返回错误(403 Forbidden)。</p>
<p><b>情形3: test目录中存在文件index.html</b><br>如果请求<code>http://localhost/test</code>, 则nginx返回(301 Moved Permanently), 浏览器在收到后，将重定向到(Redirect) <code>http://localhost/test/</code>, nginx返回(200 OK)。</p>
<p>如果请求<code>http://localhost/test/</code>, 则nginx直接返回(200 OK)。</p>
<p>注意，当在浏览器中重复请求同一个有效资源时，Nginx将返回(304 Not Modified)而不是(200 OK)。</p>
<hr>
<p>如上所述，nginx对这些末尾没有slash而相应目录下不存在相应资源的请求，将会返回301致使客户端尝试带有slash重新redirect请求一次。在使用nginx作为反向代理(如tomcat)时，也会发生相关未预料的行为。同时这种行为也导致客户端重复请求一次。</p>
<p>在实际部署中通过rewrite模块等方式可以避免这种情况。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx反向代理的压缩设置和日志格式]]></title>
      <url>http://zenvv.com/2016/04/09/nginx-proxy-config/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>使用Nginx作反向代理时，在实际部署中对代理压缩和日志格式作一些调整，以提高性能和便于后续的数据处理。</p>
<p>在之前一篇<a href="http://zenvv.com/2016/04/06/nginx-tomcat-config/">《nginx配置和tomcat会话保持》</a>的基础上作一些总结和加强。</p>
<h4 id="1-反向代理压缩"><a href="#1-反向代理压缩" class="headerlink" title="1. 反向代理压缩"></a>1. 反向代理压缩</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;msie6&quot;;</span><br><span class="line"></span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_proxied any;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_comp_level 3;</span><br><span class="line">    gzip_buffers 16 8k;</span><br><span class="line">    gzip_http_version 1.0;</span><br><span class="line">    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/javascript application/xml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果被代理的服务器已经打开gzip, 则此处建议关闭<code>gzip_proxied off;</code>。</p>
<h4 id="2-反向代理日志格式"><a href="#2-反向代理日志格式" class="headerlink" title="2. 反向代理日志格式"></a>2. 反向代理日志格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	...</span><br><span class="line">    </span><br><span class="line">    log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $http_host &apos;</span><br><span class="line">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">        &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">        &apos;$upstream_addr $upstream_status $upstream_cache_status &apos;</span><br><span class="line">        &apos;&quot;$upstream_http_content_type&quot; $upstream_response_time &gt; $request_time&apos;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	server_name vhost;</span><br><span class="line">	access_log /var/log/nginx/access_vhost.log access;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置目的是记录用户地址和处理服务器地址，便于作数据分析和系统监控。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python发展与我]]></title>
      <url>http://zenvv.com/2016/04/07/python-in-practice/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>Python具有简洁易用等优点，是我所最喜爱的语言之一，至今为止已断断续续使用了快十年之久。</p>
<h4 id="1-Python简史"><a href="#1-Python简史" class="headerlink" title="1. Python简史"></a>1. Python简史</h4><p>Guido从1989年的圣诞节期间开始，到1991年的第一个python编译器发布，已经是二十多年的编程语言，从语言发展史来看算是一个老语言了。<br>但如今依然表现为青春主流，活力不减，仍没有可取代的语言。</p>
<p>这里简单吐槽下python的强制格式对齐，许多人对这种要求非常不满甚至痛恨。</p>
<p>私下以为，如果知道大名鼎鼎的perl, 并用其编写过若干应用，一定会对Python的格式对齐大呼过瘾，^_^。</p>
<h4 id="2-Python大发展"><a href="#2-Python大发展" class="headerlink" title="2. Python大发展"></a>2. Python大发展</h4><p>在Python仍是一种小众语言的时候，即开始基于python编写一些具体的应用和数据处理模块，如P2P应用、增量爬虫、门户网站和数据统计等。</p>
<p>对现有的各种解决方案进行综合集成，使用python进行处理，其带来的快感让人欲罢不能。</p>
<p>随后在cisco的那几年工作期间中并没有其相关的需求，平时用来编写一些系统小工具作为消遣(后来直接使用bash)。</p>
<p>在这段时间内，python却有了巨大的发展变化，成为主流语言之一。</p>
<p>python的发展离不开其开放架构， 如twisted/django/web.py/flask/pip/virtualenv等的蓬勃兴起，极大地推动了python语言的普及和发展。</p>
<p>同时，python凭借其优秀的语言特性，在数据分析领域逐渐占据了统治地位，成为了名副其实的Number one。</p>
<p>今天，Python在各处活动并作用着，从最直接的web服务，大数据分析，人工智能，系统监控运维，甚至到最基础操作系统的正常运行，都有其并不伟岸的身影。</p>
<p>毫不夸张的说，Python在支撑着这个时代最伟大的互联网，是互联网时代伟大的基石之一。</p>
<h4 id="3-Python适合场景"><a href="#3-Python适合场景" class="headerlink" title="3. Python适合场景"></a>3. Python适合场景</h4><p>Python通过一种非常简洁的方式来解决实际需求，从而引领互联网的大势。</p>
<p>然而，Python并不是万能的，其语言特点决定了应用场景，那即是I/O密集型和非实时的应用。</p>
<p>Python最不适合的情景是处理实时的CPU密集型任务，这里将不会就语言的具体实现进行分析。</p>
<p>一句不恰当的总结，python适合周期内执行代码少的应用(即耗用cpu周期少)。</p>
<p>对于大多数的web应用，系统瓶颈主要在于各种I/O性能，例如网络带宽和磁盘读写速度。</p>
<p>而对于数据分析领域，通常进行离线处理数据，而不是提供实时数据分析返回结果。</p>
<hr>
<p>爱好一种语言可以，不要盲从。<br>世上没有一蹴而就，没有万能。<br>让每一种语言，做适合的任务。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat常用配置]]></title>
      <url>http://zenvv.com/2016/04/07/tomcat-config/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>tomcat默认配置已能满足正常需求，为了优化服务可以进行以下的简单设置。</p>
<p>以下配置针对tomcat8。</p>
<h4 id="1-设置Connector-server-xml"><a href="#1-设置Connector-server-xml" class="headerlink" title="1. 设置Connector(server.xml)"></a>1. 设置Connector(server.xml)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">           connectionTimeout=&quot;30000&quot;</span><br><span class="line">           acceptCount=&quot;1024&quot;</span><br><span class="line">           maxThreads=&quot;1024&quot;</span><br><span class="line">           minSpareThreads=&quot;16&quot;</span><br><span class="line">           acceptorThreadCount=&quot;4&quot;</span><br><span class="line">           URIEncoding=&quot;UTF-8&quot;</span><br><span class="line">           useURIValidationHack=&quot;false&quot;</span><br><span class="line">           enableLookups=&quot;false&quot;</span><br><span class="line">           compression=&quot;on&quot;</span><br><span class="line">           compressionMinSize=&quot;2048&quot; </span><br><span class="line">           compressableMimeType=&quot;text/html,text/xml,text/javascript,text/css,text/plain&quot;</span><br><span class="line">           redirectPort=&quot;8443&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>acceptCount: 等待处理队列的最大长度，超过该数目的后续请求将被refuse<br>maxThreads: 处理任务的最大线程数，即同时能够处理的最大任务数目<br>minSpareThreads: 保留的最少空闲线程数<br>acceptorThreadCount: 接受连接(socket accept调用)的线程数，默认为1，通常设置为cpu核心数<br>protocol=”HTTP/1.1”: java http connector协议。</p>
<p>tomcat8标准连接器包括BIO阻塞模式，非阻塞NIO1，非阻塞NIO2和ARP/Native四种模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot; - blocking Java connector</span><br><span class="line">protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; - non blocking Java NIO connector</span><br><span class="line">protocol=&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot; - non blocking Java NIO2 connector</span><br><span class="line">protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot; - the APR/native connector.</span><br></pre></td></tr></table></figure></p>
<p>当使用protocol=”HTTP/1.1”时，如果PATH(windows)或LD_LIBRARY_PATH(linux)路径下，存在tomcat native库，则使用APR/native模式；否选使用一种NIO模式。<br>实际部署中，建议设置protocol=”HTTP/1.1”。</p>
<p>各个模式具体说明见<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/http.html#Connector_Comparison" target="_blank" rel="external">官方链接</a>。</p>
<p>这里主要调整acceptCount/maxThreads这几个参数，提高并发处理能力，同时对文本文件进行压缩(compression=on)。</p>
<h4 id="2-nginx前端-tomcat后端的配置"><a href="#2-nginx前端-tomcat后端的配置" class="headerlink" title="2. nginx前端+tomcat后端的配置"></a>2. nginx前端+tomcat后端的配置</h4><p>首先, nginx作为反向代理前端，需要设置将用户信息传送到tomcat。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">    proxy_set_header Cookie $http_cookie;</span><br><span class="line">    proxy_pass http://tomcat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其次，tomcat将这些真实用户信息写到日志中(默认是代理nginx的信息)(server.xml)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span><br><span class="line">     remoteIpHeader=&quot;x-forwarded-for&quot;</span><br><span class="line">     remoteIpProxiesHeader=&quot;x-forwarded-by&quot;</span><br><span class="line">     protocolHeader=&quot;x-forwarded-proto&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Context path=&quot;/&quot; docBase=&quot;&quot; debug=&quot;0&quot; privileged=&quot;true&quot; reloadable=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">         prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot; resolveHosts=&quot;false&quot;</span><br><span class="line">         pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b %&#123;x-forwarded-for&#125;i&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure></p>
<p>这里存在另一个细节，在产品部署中建议设置reloadable=”false”以提高tomcat性能。</p>
<h4 id="3-tomcat启动设置"><a href="#3-tomcat启动设置" class="headerlink" title="3. tomcat启动设置"></a>3. tomcat启动设置</h4><p>tomcat使用的是java默认参数，实际部署中可以根据系统的具体性能进行调整，如下所示将其添加到tomcat的启动脚本catalina.sh和daemon.sh中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&quot;-server</span><br><span class="line">-Xms512M -Xmx4096M</span><br><span class="line">-XX:LargePageSizeInBytes=128m</span><br><span class="line">-XX:+AggressiveOpts</span><br><span class="line">-XX:+UseBiasedLocking</span><br><span class="line">-XX:+DisableExplicitGC</span><br><span class="line">-XX:+UseFastAccessorMethods</span><br><span class="line">-XX:+UseParNewGC</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+CMSParallelRemarkEnabled</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection</span><br><span class="line">-XX:+UseCMSInitiatingOccupancyOnly</span><br><span class="line">-Djava.awt.headless=true</span><br><span class="line">-Djava.security.egd=file:/dev/./urandom</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure></p>
<p>-Xms: 初始化内存<br>-Xmx: 最大内存<br>-Xss: 线程栈大小，无需设置<br>-XX:+AggressiveOpts: JVM性能优化，加快编译<br>-XX:+UseBiasedLocking: JVM lock优化<br>-XX:LargePageSizeInBytes=128m: 堆的内存页大小<br>-XX:+DisableExplicitGC: 关闭系统System.gc()<br>-Djava.awt.headless=true: headless模式，适于server程序，无鼠标/显示/键盘等。<br>-Djava.security.egd=file:/dev/./urandom: 默认/dev/random是block模式，针对大并发有性能影响，若对随机数要求不高则用伪随机代替(使用file:/dev/./urandom,不是file:/dev/urandom)。</p>
<hr>
<p>更多的优化服务设置，请参照<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/http.html" target="_blank" rel="external">官方文档</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx配置和tomcat会话保持]]></title>
      <url>http://zenvv.com/2016/04/06/nginx-tomcat-config/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>使用nginx提供web服务，除了配置简单以外，主要有以下两个优点：a. 高并发处理能力; b. 负载均衡。</p>
<h4 id="1-高性能设置"><a href="#1-高性能设置" class="headerlink" title="1. 高性能设置"></a>1. 高性能设置</h4><p>对于高并发处理能力，通常进行如下配置。<br>a. linux内核配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[/etc/sysctl.d/60-kernel.conf]:</span><br><span class="line"># net.core</span><br><span class="line">net.core.wmem_default=8388608</span><br><span class="line">net.core.rmem_default=8388608</span><br><span class="line">net.core.rmem_max=16777216</span><br><span class="line">net.core.wmem_max=16777216</span><br><span class="line">net.core.netdev_max_backlog=262144</span><br><span class="line">net.core.somaxconn=65535</span><br><span class="line"></span><br><span class="line"># net.ipv4</span><br><span class="line">net.ipv4.ip_forward=0</span><br><span class="line">net.ipv4.conf.default.rp_filter=0</span><br><span class="line">net.ipv4.conf.all.rp_filter=0</span><br><span class="line">net.ipv4.conf.default.accept_source_route=0</span><br><span class="line">net.ipv4.ip_local_port_range=10240 65000</span><br><span class="line"></span><br><span class="line"># net.ipv4.tcp</span><br><span class="line">net.ipv4.tcp_sack=1</span><br><span class="line">net.ipv4.tcp_window_scaling=1</span><br><span class="line">net.ipv4.tcp_rmem=4096 87380 16777216</span><br><span class="line">net.ipv4.tcp_wmem=4096 65536 16777216</span><br><span class="line">net.ipv4.tcp_max_orphans=262144</span><br><span class="line">net.ipv4.tcp_timestamps=0</span><br><span class="line">net.ipv4.tcp_mem=1543458 2057947 3086916</span><br><span class="line">net.ipv4.tcp_fin_timeout=15</span><br><span class="line">net.ipv4.tcp_keepalive_time=300</span><br><span class="line">net.ipv4.tcp_syncookies=1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog=262144</span><br><span class="line">net.ipv4.tcp_syn_retries=1</span><br><span class="line">net.ipv4.tcp_synack_retries=1</span><br><span class="line">net.ipv4.tcp_tw_reuse=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=1</span><br><span class="line">net.ipv4.tcp_max_tw_buckets=262144</span><br><span class="line"></span><br><span class="line">[/etc/security/limits.d/nofile.conf]:</span><br><span class="line">*               hard    nofile            65535 </span><br><span class="line">*               soft    nofile            65535</span><br></pre></td></tr></table></figure>
<p>b. nginx并发配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 8; 		# cpu core num</span><br><span class="line">worker_rlimit_nofile 65535; # nofile.conf</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections 20480;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h4><p>nginx常被作为应用服务前端的反向代理服务器，很容易提供负载均衡能力，即通过proxy_pass和upstream语法实现，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream servers &#123;</span><br><span class="line">    server host1;</span><br><span class="line">    server host2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在该配置下，nginx按rr(round-robin)轮询模式，将用户请求分发到不同的server上进行处理，从而达到负载均衡的效果。轮询模式非常适合那些无状态的应用服务。</p>
<p>但是，如果针对有状态的应用服务如tomcat(即需要保持session)，轮询模式不能够保证同一用户的访问请求，总是被映射到同一台tomcat服务器上，从而导致不能正确处理同一个用户的请求，例如，用户在tomcat1上登录，然而后续的请求被发送到tomcat2上，tomcat2并不能验证该用户是否已经登录从而要求用户重新登录。</p>
<p>常见的解决方法，是通过nginx内建的ip_hash模式，保证同一个用户的请求始终被同一个tomcat所处理，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream servers &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server tomcat1;</span><br><span class="line">    server tomcat2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然而，ip_hash不能够提供高质量的负载均衡能力。</p>
<p>为了让tomcat能够处理用户的session会话，常见的几种解决办法有:<br>a. 建立tomcat集群共享session，任意一个tomcat均能够处理集群内其他tomcat所产生的session。<br>b. 建立key/value服务(如redis/memcached)，让nginx和应用程序在这个服务中维护session达到共享的目的。<br>但是，这两种解决办法增加了系统架构的复杂度，增添了潜在风险，如tomcat集群/kv服务的稳定性。</p>
<p>这里，还有一种比较简洁的，也是重点推荐的一种解决办法。通过将第三方模块sticky(nginx-sticky-module-ng)编译进nginx中，然后进行如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream servers &#123;</span><br><span class="line">    sticky path=/app_cookie_path;</span><br><span class="line">    server tomcat1;</span><br><span class="line">    server tomcat2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>sticky模块的实现原理如下:<br>a. 对upstream下的所有server进行hash标识(即每一个server有一个hash值)；<br>b. 对用户请求按rr模式分配一个server，并将该server的hash值添加到用户cookie的route属性中；<br>c. 对用户的随后请求，通过其cookie中的route属性值，映射到同一个tomcat服务器中进行处理。<br>从而保证同一个用户的请求，始终被分配到同一个tomcat中进行处理。</p>
<p><b>在sticky模块使用过程中，需要注意一个问题: 建议显示设置sticky的path值，即应用程序的cookie标识。</b></p>
<p>官方文档path值为可选且默认为”/“，这是非常误导的，并且在国内网上的各种博客中都没有设置，大伙在测试demo时测试正确然后就没有下文。</p>
<p>正如前面sticky实现原理中所说的，sticky是通过对应用程序的cookie设置route值实现的。  </p>
<p>而在实际产品部署中，常见的是nginx同时配置多个应用，而每个应用都会有自己的cookie标识，而不是默认的”/“，这样导致nginx所设置的cookie route值在用户随后的访问中不起作用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://zenvv.com/2016/04/05/hello-world/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><font size="1"><b>[声明] 再次重建个人blog, 许多博文已丢失，幸好还能从一些被转载的文章中找回几篇。再附上一篇转帖共勉：</b></font>


<p>有人说过：有一句说一百句的是文学家，这叫文采；有一句说十句的是教授，这叫学问；有一句说一句的是律师，这叫谨慎；说一句留一句的是外交家，这叫严谨；有十句说一句的是政治家，这叫心计；有点事甚至半句也没有的人，却发微博，这叫啥好呢？自己想吧。<br><b>[想不到见本篇标题，^_^]</b></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[童年的清明]]></title>
      <url>http://zenvv.com/2016/04/04/qingming-2016/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>清明时节雨纷纷，路上行人欲断魂。</p>
<p>又一年清明时节，伴雨而来，随风而去。</p>
<p>小时候的清明，每次，家族的几个小伙伴们都兴高采烈，因为有几个小节目等着我们去实现，一年又一年的重复着，乐此不彼。</p>
<p>刚入山不久，很快将遇到我们的第一个节目。映山红，初中时从课本里才知道也叫作杜鹃，杜鹃啼血，美丽的鲜艳。农历三月左右，山里的映山红，大部分还没有动静，小伙伴们争先恐后的寻找着最盛开的一片，划归到自己的名下。然后摘选一些最美丽的花朵随手拿着并吃着，有股淡淡的甜味，同时挖几颗造型酷的花丛带回家种植。</p>
<p>随着山路的左转右拐，到达了一大群刺杉群林，此起彼伏，对儿时的我们来说好不阴森，深怕一不留神陷进去走丢了。但令人想不到的是，就是在这些扎人的刺杉丛林里，一大堆不知什么名字的蕨类植物的幼芽正破土而出，鲜嫩带有点涩苦味，摘回去用地道的香油清炒，特别的有味道。</p>
<p>最后，在刺杉林的最深处，进行繁杂的祭祖活动。<br>随着活动的结束，我们不约而同想最高处的山顶登去，那里有着一块神秘的大石块。</p>
<p>相传，二郎真君驾云空中，发现此处有一大石块于是准备休息下。腾云而下一屁股直坐到那块大石头上，没成想石头太软(这里的山石大多是石灰岩)没能撑住真君，直向下凹陷而去。真君发现腚部下陷，于是随手用神戟在旁边撑住，随身一跃，腾空而起，双脚站到刚才屁股所在的地方。虽然站立起来，石头依然撑不住双脚继续下陷，这下一个不稳，我们的二郎真君直往旁边的下坡倒下，一头撞到大石块的下半部分。真君显然没想到在这个地方栽了一跤，丢不起那人，四周打探一下连忙腾空而走(忘了还有土地神)。</p>
<p>与许多人不一样，高中时候的我开始住校，每学期回家的次数平均一到两次。老家位于一个较为偏僻的地区，交通不发达，再加上非常的晕车，回家是个奢侈。<br>高中的前两年，每次，我们坐着汽车，汽车乘着轮渡，游过那条不宽的大河，到达那个穿山而过的小镇。等桥连通的那一年，正好赶上高三的下学期，繁忙的学业没有给丝毫喘息的机会周末回家。</p>
<p>人生第一次离开了每年清明必去山里祭祖的春游。到如今已经十几年，原本计划今年能赶回家，恰这时候赶上感冒，又没能回去，再度走一下儿时的路。</p>
<p>此时此刻，只能感叹下，许多东西都在改变，不变的只有儿时的记忆。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebRtc 网络基本流程]]></title>
      <url>http://zenvv.com/2014/12/10/webrtc-by-talk/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>WebRtc是一款非常优秀的实时音视频通信框架，采用RFC方案SDP offer/answer的方式建立网络会话。</p>
<h3 id="1-发起Setup-Call"><a href="#1-发起Setup-Call" class="headerlink" title="1. 发起Setup Call"></a>1. 发起Setup Call</h3><p>1).call and create local</p>
<p>CreatePeerConnection()<br>GetUserMedia() =&gt; AddLocalStream()/SetLocalRender()    </p>
<p>2).send offer</p>
<p>createOffer() =&gt; SetLocalSdp(offer) =&gt; SendOffer()     </p>
<p>3).recv answer</p>
<p>RecvAnswer() =&gt; SetRemoteSdp(answer)<br>OnRemoteStream()  =&gt; SetRemoteRender()</p>
<h3 id="2-应答Answer-Call"><a href="#2-应答Answer-Call" class="headerlink" title="2. 应答Answer Call"></a>2. 应答Answer Call</h3><p>1).recv call</p>
<p>CreatePeerConnection()  </p>
<p>2).recv offer</p>
<p>RecvOffer() =&gt; SetRemoteSdp()<br>GetUserMedia() =&gt; AddLocalStream()/SetLocalRender()   </p>
<p>3).send answer</p>
<p>createAnswer() =&gt; SetLocalSdp(answer) =&gt; SendAnswer()<br>OnRemoteStream()  =&gt; SetRemoteRender()  </p>
<h3 id="3-stun网络"><a href="#3-stun网络" class="headerlink" title="3. stun网络"></a>3. stun网络</h3><p>下面将就网络的基本类型作简单描述，以便理解stun的作用，假设内网主机I:i, 防火墙F:f, 外网主机S1:s1和S2:s2.</p>
<p>1) full cone:  I:i &lt;=&gt; F:f, 任意外网主机均可通过F:f发给I:i</p>
<p>2) restricted cone: I:i &lt;=&gt; F:f &lt;=&gt; S1, I:i &lt;=&gt; F:f &lt;=&gt; S2, 只有S1和S2可以通过F:f发给I:i</p>
<p>3) port restricted cone:  I:i &lt;=&gt; F:f &lt;=&gt; S1:s1, I:i &lt;=&gt; F:f &lt;=&gt; S2:s2, 只有S1:s1和S2:s2可以通过F:f发数据给I:i</p>
<p>4) symmetric NAT: I:i &lt;=&gt; F:f1 &lt;=&gt; S1:s1, I:i &lt;=&gt; F:f2 &lt;=&gt; S2:s2</p>
<p>基本处理流程如下(来着mozilla):<br><img src="https://mdn.mozillademos.org/files/6119/webrtc-complete-diagram.png" alt="STUN/TURN in WebRTC"></p>
<hr>
<p>相关webrtc源代码封装库和浏览器插件实现，可以参照<a href="https://github.com/peterxu/librtc" target="_blank" rel="external">librtc</a>和<a href="https://github.com/peterxu/RTCHub" target="_blank" rel="external">RTCHub</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux编译安装Darwin Streaming Server 6.0.3]]></title>
      <url>http://zenvv.com/2009/10/04/Linux-dss-6-0-3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><font size="1" color="grey"><br>[声明] 很久前在chinaunix hi中分享了几篇blog, 由于其意外关闭导致全部丢失。如今，意外的发现有几篇被很多人引用，其中一些博主们并没有声明转载！在此重建个人博客以正声明，同时感谢那些博主们，否则找不回这篇旧文。<br></font>

<h3 id="1、什么是Darwin-Streaming-Server"><a href="#1、什么是Darwin-Streaming-Server" class="headerlink" title="1、什么是Darwin Streaming Server"></a>1、什么是Darwin Streaming Server</h3><p>目前主流的流媒体服务器有微软的windows media server、RealNetworks的Helixserver和苹果公司的Darwin Streaming Server. 微软的windows media server只能在windows2000 server和windows 2003 server下使用，不在考虑之列。RealNetworks的Helixserver是一款跨平台的软件，功能也很强大，但并非免费软件。</p>
<p>Darwin Streaming Server简称DSS。DSS是Apple公司提供的开源实时流媒体播放服务器程序。整个程序使用C++编写，在设计上遵循高性能，简单，模块化等程序设计原则，务求做到程序高效，可扩充性好。并且DSS是一个开放源代码的，基于标准的流媒体服务器，可以运行在Windows NT和Windows 2000，以及几个UNIX实现上，包括Mac OS X，Linux，FreeBSD，和Solaris操作系统上的。</p>
<h3 id="2、在Linux中编译安装Darwin-Streaming-Server"><a href="#2、在Linux中编译安装Darwin-Streaming-Server" class="headerlink" title="2、在Linux中编译安装Darwin Streaming Server"></a>2、在Linux中编译安装Darwin Streaming Server</h3><p>首先需要进行一些必要的准备工作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install patch make gcc g++</span><br></pre></td></tr></table></figure></p>
<p>准备好软件暂存的目录，并从官网下载软件的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir soft</span><br><span class="line">cd soft</span><br><span class="line">wget http://dss.macosforge.org/downloads/DarwinStreamingSrvr6.0.3-Source.tar</span><br></pre></td></tr></table></figure></p>
<p>源码下载完成后，需要解压tar包，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf DarwinStreamingSrvr6.0.3-Source.tar</span><br></pre></td></tr></table></figure></p>
<p>给源码安装补丁文件，进入DarwinStreamingSrvr6.0.3-Source目录，并打补丁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd DarwinStreamingSrvr6.0.3-Source</span><br><span class="line">wget http://www.abrahamsson.com/dss-6.0.3.patch</span><br><span class="line">patch -p1 &lt; dss-6.0.3.patch</span><br></pre></td></tr></table></figure></p>
<p>执行<code>./Buildit</code>编译完成后，我们来生成linux下的dss安装包.  </p>
<p>执行<code>./buildtarball</code>生成DarwinStreamingSrvr-Linux.tar.gz</p>
<p>然后解压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf DarwinStreamingSrvr-Linux.tar.gz </span><br><span class="line">cd DarwinStreamingSrvr-Linux</span><br></pre></td></tr></table></figure></p>
<p>对Install文件做修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ $INSTALL_OS = &quot;Linux&quot; ]; then </span><br><span class="line">    /usr/sbin/useradd -M qtss &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">else </span><br><span class="line">    /usr/sbin/useradd qtss &gt; /dev/null 2&gt;&amp;1 </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p>
<p>将-M修改成-m</p>
<p>执行<code>./Install</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter a new administrator user name: 【新管理员】  </span><br><span class="line">Please enter a new administrator Password: 【密码】</span><br></pre></td></tr></table></figure></p>
<p>查看是否安裝成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep Darwin(查看流媒体服务器的进程)</span><br><span class="line">root ... ... ... /usr/local/sbin/DarwinStreamingServer</span><br><span class="line">qtss ... ... ... /usr/local/sbin/DarwinStreamingServer</span><br><span class="line"></span><br><span class="line">netstat -ntulp | grep Darwin(查看流媒体服务器的端口)</span><br></pre></td></tr></table></figure></p>
<h3 id="3-启动Server提供服务"><a href="#3-启动Server提供服务" class="headerlink" title="3. 启动Server提供服务"></a>3. 启动Server提供服务</h3><p>启动 Darwin Streaming Server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/sbin/DarwinStreamingServer</span><br></pre></td></tr></table></figure></p>
<p>启动 Web 管理介面 (tcp port 1220)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/sbin/streamingadminserver.pl</span><br></pre></td></tr></table></figure></p>
<p>ps. 以上两项在刚安装好的时候会自动启动，不需手动执行<br>ps. 自动启动流媒体服务器的方法：<br>自动运行流媒体服务器序非常简单，把上述命令添加在/etc/rc.d/rc.local脚本中即可。</p>
<p>最后在服务器输入 <code><a href="http://你的IP:1220/" target="_blank" rel="external">http://你的IP:1220/</a></code>来访问web管理<br>默认的媒体文件存放在<code>/usr/local/movies</code><br>你可以在web管理面板修改这个路径。</p>
<h3 id="4、访问自己的流媒体服务"><a href="#4、访问自己的流媒体服务" class="headerlink" title="4、访问自己的流媒体服务"></a>4、访问自己的流媒体服务</h3><p>可以使用VLC media player这个软件，输入<code>rtsp://你的IP/sample_100kbit.mp4</code>来播放默认的测试视频。如果你的网速够给力的话效果还不错 ：)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Debian下安装mythtv]]></title>
      <url>http://zenvv.com/2009/05/12/debian-install-mythtv/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>在debian中安装配置mythtv环境。</p>
<p>一. 环境配置<br>如果是debian或ubuntu系统，可以直接通过以下命令来安装mythtv；</p>
<p>对于debian或ubuntu系统，首先选择源:</p>
<ol>
<li><p>打开/etc/apt/sources.list文件，添加源：（国内）<br>deb <a href="http://debian.ustc.edu.cn/debian" target="_blank" rel="external">http://debian.ustc.edu.cn/debian</a> lenny main<br>deb <a href="http://debian.ustc.edu.cn/debian" target="_blank" rel="external">http://debian.ustc.edu.cn/debian</a> lenny main contrib<br>deb <a href="http://debian.ustc.edu.cn/debian" target="_blank" rel="external">http://debian.ustc.edu.cn/debian</a> lenny main non-free<br>deb <a href="http://www.debian-multimedia.org" target="_blank" rel="external">http://www.debian-multimedia.org</a> lenny main<br>或者：（国外）<br>deb <a href="http://ftp.debian.org/" target="_blank" rel="external">http://ftp.debian.org/</a> lenny main<br>deb <a href="http://ftp.debian.org/debian" target="_blank" rel="external">http://ftp.debian.org/debian</a> lenny main contrib<br>deb <a href="http://ftp.debian.org/debian" target="_blank" rel="external">http://ftp.debian.org/debian</a> lenny main non-free<br>deb <a href="http://www.debian-multimedia.org" target="_blank" rel="external">http://www.debian-multimedia.org</a> lenny main<br>如果以上源都无法连上，可以找其他国内源</p>
</li>
<li><p>添加完保存退出后，使用sudo apt-get update命令更新上面的源，然后开始mythtv的安装</p>
</li>
</ol>
<p>二. 安装使用mythtv  </p>
<p>第一步：mythtv安装</p>
<ol>
<li>Sound安装<br> 1) aptitute install alsa-base alsa-utils libesd-alsa0<br> 2) 配置声卡命令：alsaconf</li>
<li>引入gpg keys<br>命令：aptitute install debian-multimedia-keyring</li>
<li>安装mythtv<br>1) aptitute install mythtv<br>2) mythtv安装过程配置mysql数据库(该数据库可以提前安装:aptitute install mysql-server),该数据库需要在root用户下进入：命令mysql -uroot -p<br>４. 安装mythtv其他组件，如mythvideo, mythmusic,mythphoto等<br>命令：aptitute install 组件名<br>然后重启mythtv，使用mythfrontend命令  </li>
<li>配置mythtv，可以参考：<a href="http://parker1.co.uk/mythtv_ubuntu.php，其中大部分都选择默认方式，需要最好选择英文，如果选hanzi的话就是繁体中文。" target="_blank" rel="external">http://parker1.co.uk/mythtv_ubuntu.php，其中大部分都选择默认方式，需要最好选择英文，如果选hanzi的话就是繁体中文。</a></li>
</ol>
<p>第二步：播放本地视频文件  </p>
<ol>
<li>使用mythfrontend命令启动mythtv</li>
<li>选择Utilities/Setup-&gt;Setup-&gt;Media Settings-&gt;Videos Settings-&gt;General Settings，在Directories that hold videos:一栏输入本地视频存放路径，然后保存设置。返回上一级，进入File Types，在Extension中选择播放的视频后缀，对于想播放的视频文件，其Use default player和Ignore项空起来，而在Command项如果mythtv自身可以播放就会出现Internal，如果为空，就可以输入系统中安装的播放器，如mplayer等。</li>
<li>通过选择Utilities/Setup-&gt;Video Manager可以看到视频目录中存在的文件</li>
<li>返回最上层，选择Media Library-&gt;Watch Videos，就可以看到可以播放的视频文件，任意选择一个，按Enter键显示该文件信息，再次Enter键就可以看到播放内容了</li>
</ol>
<p>第三步：播放流媒体文件</p>
<ol>
<li>使用aptitute install mythstream来安装mythstream组件</li>
<li>安装完后就可以使用流媒体功能了，可以尝试mythstream组件中已有的流媒体文件</li>
<li>使用sudo mythfrontend命令（注意前面使用了sudo）启动mythtv，进入Media Library-&gt;Play online streams后，就可以选择里面的流媒体文件进行播放（需要能够连接国外网站）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell批处理编码转换gbk->utf8]]></title>
      <url>http://zenvv.com/2009/03/24/shell-gbk-to-utf8/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>最近遇到工程里面c/c++代码注释utf8和gbk共存的情况,在服务器上使用vim编辑非常不方便.于是编写了一个shell程序遍历所有文件，并将所有文件中中文gbk编码转化为utf8。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># 定义一个方法</span><br><span class="line">foreachd()&#123;</span><br><span class="line">  	# 遍历参数1</span><br><span class="line">  	for file in $1/*</span><br><span class="line">  	do</span><br><span class="line">        # 如果是目录就打印处理，然后继续遍历，递归调用</span><br><span class="line">        if [ -d $file ]</span><br><span class="line">        then</span><br><span class="line">            # echo $file</span><br><span class="line">            foreachd $file</span><br><span class="line">        else</span><br><span class="line">            if [[ $file =~ &quot;.h&quot; || $file =~ &quot;.cpp&quot; ]]</span><br><span class="line">            then</span><br><span class="line">                echo $file</span><br><span class="line">                tempfile=`echo $file”.5″`</span><br><span class="line">                iconv -f gbk -t utf8 $file &gt; $tempfile</span><br><span class="line">                mv $tempfile $file</span><br><span class="line">            fi</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#执行，如果有参数就遍历指定的目录，否则遍历当前目录</span><br><span class="line">if [ $# -gt 0 ]</span><br><span class="line">then</span><br><span class="line">    foreachd “$1″</span><br><span class="line">else</span><br><span class="line">    foreachd “.”</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex (wiki) 空格处理]]></title>
      <url>http://zenvv.com/2009/03/11/latex-space/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>注意TeX能够自动处理大多数的空格，但是您有时候需要自己来控制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">功能　　　		　语法　　　	　显示　　　　　　备注 </span><br><span class="line">两个quad空格　　　a \qquad b	　a \qquad b　　两个m的宽度</span><br><span class="line">quad空格　　　　　a \quad b	 　a \quad b　　一个m的宽度</span><br><span class="line">大空格　　　　　　a\ b　　　　　　a\ b　　　　　1/3m宽度</span><br><span class="line">中等空格　　　　　a\;b　　　　　　a\;b　　　　　2/7m宽度</span><br><span class="line">小空格　　　　　　a\,b　　　　　　a\,b　　　　　1/6m宽度</span><br><span class="line">没有空格　　　　　ab　　　　　　　ab\,	</span><br><span class="line">紧贴　　　　　　　a\!b　　　　　　a\!b　　　　　缩进1/6m宽度</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改版通用Makefile模板]]></title>
      <url>http://zenvv.com/2009/03/09/general-makefile/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>对一个已有的通用Makefile模板(来自whyglinux)作了部分修改，供自己使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">###############################################################################</span><br><span class="line">#</span><br><span class="line"># Generic Makefile for C/C++ Program</span><br><span class="line">#</span><br><span class="line"># Author: whyglinux (whyglinux AT hotmail DOT com)</span><br><span class="line"># Date: 2006/03/04</span><br><span class="line"># Modified: uskee@hotmail.com at 2009/03/09</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Description:</span><br><span class="line"># The makefile searches in directories for the source files</span><br><span class="line"># with extensions specified in , then compiles the sources</span><br><span class="line"># and finally produces the , the executable file, by linking</span><br><span class="line"># the objectives.</span><br><span class="line"># Usage:</span><br><span class="line"># $ make compile and link the program.</span><br><span class="line"># $ make objs compile only (no linking. Rarely used).</span><br><span class="line"># $ make clean clean the objectives and dependencies.</span><br><span class="line"># $ make cleanall clean the objectives, dependencies and executable.</span><br><span class="line"># $ make rebuild rebuild the program. The same as make clean &amp;&amp; make all.</span><br><span class="line">#==============================================================================</span><br><span class="line">## Customizing Section: adjust the following if necessary.</span><br><span class="line">##=============================================================================</span><br><span class="line"># The generated file name.</span><br><span class="line"># It must be specified.</span><br><span class="line"># PROGRAM := a.out # the generated name</span><br><span class="line">PROGRAM :=</span><br><span class="line"># The directories in which source files reside.</span><br><span class="line"># At least one path should be specified.</span><br><span class="line"># SRCDIRS := . # current directory</span><br><span class="line">SRCDIRS := .</span><br><span class="line"># The source file types (headers excluded).</span><br><span class="line"># At least one type should be specified.</span><br><span class="line"># The valid suffixes are among of .c, .C, .cc, .cpp, .CPP, .c++, .cp, or .cxx.</span><br><span class="line"># SRCEXTS := .c # C program</span><br><span class="line"># SRCEXTS := .cpp # C++ program</span><br><span class="line"># SRCEXTS := .c .cpp # C/C++ program</span><br><span class="line">SRCEXTS := .c .cpp</span><br><span class="line"># The flags used by the cpp (man cpp for more).</span><br><span class="line"># CPPFLAGS := -Wall -Werror # show all warnings and take them as errors</span><br><span class="line">CPPFLAGS := -Wall -Werror -Wno-deprecated</span><br><span class="line"># The compiling flags used only for C.</span><br><span class="line"># If it is a C++ program, no need to set these flags.</span><br><span class="line"># If it is a C and C++ merging program, set these flags for the C parts.</span><br><span class="line">CFLAGS :=</span><br><span class="line">CFLAGS +=</span><br><span class="line"># The compiling flags used only for C++.</span><br><span class="line"># If it is a C program, no need to set these flags.</span><br><span class="line"># If it is a C and C++ merging program, set these flags for the C++ parts.</span><br><span class="line">CXXFLAGS :=</span><br><span class="line">CXXFLAGS +=</span><br><span class="line"># The directories contains all required headers; “-I”</span><br><span class="line">INCLUDES :=</span><br><span class="line">INCLUDES +=</span><br><span class="line"># The library and the link options ( C and C++ common).: “-L” and “-l”</span><br><span class="line"># If for generating dynamic libraries, using “-shared” option, or no.</span><br><span class="line">LDFLAGS :=</span><br><span class="line">LDFLAGS +=</span><br><span class="line">#==============================================================================</span><br><span class="line">## Implict Section: change the following only when necessary.</span><br><span class="line">##=============================================================================</span><br><span class="line"># The C program compiler. Uncomment it to specify yours explicitly.</span><br><span class="line">CC = gcc</span><br><span class="line"># The C++ program compiler. Uncomment it to specify yours explicitly.</span><br><span class="line">CXX = g++</span><br><span class="line"># Uncomment the 2 lines to compile C programs as C++ ones.</span><br><span class="line">#CC = $(CXX)</span><br><span class="line">#CFLAGS = $(CXXFLAGS)</span><br><span class="line"># The command used to generate static library</span><br><span class="line">AR	= ar rcs</span><br><span class="line"># The command used to delete file.</span><br><span class="line">RM	= rm -f</span><br><span class="line">#==============================================================================</span><br><span class="line">## Stable Section: usually no need to be changed. But you can add more.</span><br><span class="line">##=============================================================================</span><br><span class="line">SHELL = /bin/sh</span><br><span class="line">SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))</span><br><span class="line">OBJS = $(foreach x,$(SRCEXTS), \</span><br><span class="line">$(patsubst %$(x),%.o,$(filter %$(x),$(SOURCES))))</span><br><span class="line">DEPS = $(patsubst %.o,%.d,$(OBJS))</span><br><span class="line">.PHONY : all objs clean cleanall rebuild</span><br><span class="line">#—————————————————</span><br><span class="line"># Rules for creating the dependency files (.d).</span><br><span class="line">#—————————————————</span><br><span class="line">all : $(PROGRAM)</span><br><span class="line">%.d : %.c</span><br><span class="line">@$(CC) -MM -MD $(CFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.d : %.cc</span><br><span class="line">@$(CC) -MM -MD $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.d : %.cpp</span><br><span class="line">@$(CC) -MM -MD $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">#---------------------------------------------------</span><br><span class="line"># Rules for producing the objects.</span><br><span class="line">#---------------------------------------------------</span><br><span class="line">objs : $(OBJS)</span><br><span class="line">%.o : %.c</span><br><span class="line">$(CC) -c $(CPPFLAGS) $(CFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.o : %.cc</span><br><span class="line">$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">%.o : %.cpp</span><br><span class="line">$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $&lt;</span><br><span class="line">#---------------------------------------------------</span><br><span class="line"># Rules for producing the executable.</span><br><span class="line">#----------------------------------------------</span><br><span class="line">$(PROGRAM) : $(OBJS)</span><br><span class="line"># This is for generating executal program or dynamic library</span><br><span class="line">ifeq ($(strip $(SRCEXTS)), &quot;.c&quot;) # C file</span><br><span class="line">$(CC) -o $(PROGRAM) $(OBJS) $(LDFLAGS)</span><br><span class="line">else # C++ file</span><br><span class="line">$(CXX) -o $(PROGRAM) $(OBJS) $(LDFLAGS)</span><br><span class="line">endif</span><br><span class="line"># This is for generation static libraries.</span><br><span class="line"># $(AR)	$(PROGRAM)	$(OBJS)</span><br><span class="line">-include $(DEPS)</span><br><span class="line">rebuild: clean all</span><br><span class="line">clean :</span><br><span class="line">@$(RM) *.o *.d</span><br><span class="line">cleanall: clean</span><br><span class="line">@$(RM) $(PROGRAM) $(PROGRAM).a $(PROGRAM).so</span><br><span class="line">### End of the Makefile ## Suggestions are welcome ## All rights reserved ###</span><br><span class="line">###############################################################################</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[debian 5.0安装及配置]]></title>
      <url>http://zenvv.com/2009/03/03/use-debian-5-0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>下面将就debian lenny 5.0在我本子上的具体安装及相关配置作些介绍，以作备份之用。</p>
<p>debian lenny 5.0的启动速度约为10s, 关机速度为5s，比上一个版本确实升级了许多。之前我是从debian etch 4.0 r2升级到5.0，速度较慢(启动20s，关机10-15s)，升级之后gnome经常崩溃以及klog重启，实在经受不了于是昨天整修了下系统，但不小心将splashy给删除了，结果导致系统的许多服务启动不了, 不想将相关修补程序copy到系统下，于是重装了事省心。</p>
<h2 id="1-安装debian-lenny-5-0"><a href="#1-安装debian-lenny-5-0" class="headerlink" title="1. 安装debian lenny 5.0"></a>1. 安装debian lenny 5.0</h2><p>从debian.org官方网站上下载lenny 5.0的cd-image-1即可, 将其刻录成光盘。<br>开始进行安装，区域选择中国，语言选择中文，键盘选择US(一般)，其它默认即可，直到硬盘分区，默认自动分区没有问题，但建议手动分区：<br>(1)设置主分区，<br>(2)设置swap分区，<br>(3)单独分一块作为/home分区(这样能防止系统崩溃时数据不会丢失)。<br>然后开始copy并install系统。整个过程大约30-40分钟。<br>安装完毕后重新启动进入debian X系统，进行如下配置可以更加友好地使用系统。</p>
<h2 id="2-相关配置"><a href="#2-相关配置" class="headerlink" title="2. 相关配置"></a>2. 相关配置</h2><p>(1). 首先将当前帐户设置为sudo用户，先使用root登录，然后执行visudo, 仿照root插入新的一行，具体如下(假设当前用户为test)<br>$su -<br>密码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#visudo</span><br><span class="line"># /etc/sudoers</span><br><span class="line">#</span><br><span class="line"># This file MUST be edited with the &apos;visudo&apos; command as root.</span><br><span class="line">#</span><br><span class="line"># See the man page for details on how to write a sudoers file.</span><br><span class="line">#</span><br><span class="line">Defaults env_reset</span><br><span class="line"># Host alias specification</span><br><span class="line"># User alias specification</span><br><span class="line"># Cmnd alias specification</span><br><span class="line"># User privilege specification</span><br><span class="line">root ALL=(ALL) ALL</span><br><span class="line"># 下面这个是你要添加的</span><br><span class="line">test ALL=(ALL) ALL</span><br><span class="line">#exit</span><br><span class="line">logout</span><br><span class="line">$</span><br></pre></td></tr></table></figure></p>
<p>至此你的用户即为sudo用户，可以使用sudo + command执行root权限所能执行的东西。</p>
<p>(2) 配置apt源<br>编辑/etc/apt/source.list文件，将以下几行加入到其中，并建议将其中cd源那几行注释掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb http://ftp.debian.org/ lenny main</span><br><span class="line">deb http://ftp.debian.org/debian lenny main contrib</span><br><span class="line">deb http://ftp.debian.org/debian lenny main non-free</span><br><span class="line">deb http://www.debian-multimedia.org lenny main</span><br></pre></td></tr></table></figure></p>
<p>后面的那个多媒体源需要去其网站上下载key并安装即可。然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aptitude update</span><br></pre></td></tr></table></figure></p>
<p>(3)安装相关软件<br>debian 5.0默认已经安装好ice-weasel(即是firefox的debian名称)，还需要安装的有以下几个：  </p>
<p>工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install scim scim-chinese scim-pinyin ##安装中文输入法，fcitx也挺好用的</span><br><span class="line">$sudo aptitude install unrar unzip ## 用来解压rar和.zip之类的压缩文件的</span><br><span class="line">$sudo aptitude install pidgin ## 可以用来登录msn, qq等聊天工具</span><br><span class="line">$sudo aptitude install lftp gftp ## lftp是比较好用的shell ftp工具，gftp是GUI工具</span><br><span class="line">$sudo aptitude install qterm ## 用来上bbs的term</span><br></pre></td></tr></table></figure></p>
<p>娱乐类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install vlc ##安装vlc播放器</span><br><span class="line">$sudo aptitude install mplayer smplayer ##安装mplayer播放器，其中smplayer是比较好用的mplayer界面</span><br><span class="line">$sudo aptitude install w32codecs ##安装mplayer相关解码器，可以支持rmvb等多种格式播放</span><br><span class="line">$sudo aptitude install wine ##安装windows程序模拟器wine,可以用来玩魔兽，CS等游戏</span><br></pre></td></tr></table></figure></p>
<p>办公类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install icedove ## 这是邮件客户端mozilla-thunderbird的debian名称。</span><br><span class="line">$sudo aptitude install openoffice.org ##安装办公套装openoffice</span><br><span class="line">$sudo aptitude install stardict ## 安装英汉词典，另外有个qt版本qstardict，感兴趣的可以试试；词典库需要另外下载</span><br></pre></td></tr></table></figure></p>
<p>开发类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install vim ##将vim升级安装，会更加好用，当然需要配置下文件/etc/vim/vimrc</span><br><span class="line">$sudo aptitude install emacs ## 喜欢用emacs可以安装这个编辑器</span><br><span class="line">$sudo aptitude install sun-java6-bin sun-java6-jre sun-java6-jdk ## 安装java库</span><br><span class="line">$sudo aptitude install eclipse ## 安装eclipse开发工具</span><br><span class="line">$sudo aptitude install manpages manpages-dev manpages-posix manpages-posix-dev ## 安装gcc开发文档</span><br><span class="line">## 另外std c++文档直接用aptitude安装后不能使用，需要先下载该文档。</span><br><span class="line">$aptitude download libstdc++6-4.3-doc</span><br><span class="line">## 再解压缩该包将里面man下的文档，copy到/usr/share/man1下面，然后执行</span><br><span class="line">$mandb ## 该命令更新man手册文件</span><br><span class="line">## 对于其它的手册不能使用的均可以采取上述方法。</span><br></pre></td></tr></table></figure></p>
<p>添加新字体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$sudo mkdir /usr/local/share/fonts/simsung</span><br><span class="line">将windows下的simsung.ttf文件</span><br><span class="line">$sudo cp simsung.ttf /usr/local/share/fonts/simsung</span><br><span class="line">$sudo fc-cache</span><br><span class="line">然后即可在“外观首选项”中的“字体”项里面找到宋体和新宋体了。</span><br><span class="line">删除方法如下：</span><br><span class="line">$sudo rm -r /usr/local/share/fonts/simsung</span><br><span class="line">$sudo fc-cache</span><br></pre></td></tr></table></figure></p>
<p>修正debian时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改/etc/timezone文件和/etc/localtime文件:</span><br><span class="line">$sudo echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</span><br><span class="line">$sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">并将文件/etc/default/rcS中的UTC值改为no</span><br><span class="line">通过网络校正本地时间</span><br><span class="line">$sudo aptitude install ntpdate</span><br><span class="line">$sudo ntpdate pool.ntp.org</span><br><span class="line">然后将时间更新到BIOS里面</span><br><span class="line">$sudo hwclock --systohc</span><br></pre></td></tr></table></figure></p>
<p>其它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sudo aptitude install virtualbox ## 比较好用的一款虚拟机，可以玩玩windows xp/vista/7等</span><br><span class="line">$sudo aptitude install freemind ## 随时记录自己的奇思妙想</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sed使用之感想]]></title>
      <url>http://zenvv.com/2008/12/17/sed-usage-feel/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>最近处理大批量的html视频信息网页，从中提取视频图片url、播放url、主演、导演和简介等。不想写代码，于是直接使用shell下sed命令。</p>
<p>sed的正则表达式确实很复杂(类perl的)，花了半个小时才搞定了。但看起来确实很爽，一行就搞定了.<br>下面这个命令是用于预处理信息的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /tmp/mov_html | xargs cat | sed -n ’s/\(.*&lt;dd&gt;.*\”character_.*\)\|\(.*\”list_.*\)\|\(.*leiyancontent.*div\&gt;\).*/\1\2\3\n/p’ &gt; ./temp_mov_info.txt</span><br></pre></td></tr></table></figure></p>
<p>但运行起来确实痛苦，一直占CPU 90%以上，一共运行了近6个小时才完毕。即使通过xargs限制进程数和每次传入参数个数也不管用。<br>一方面是html中只有一小块信息是有效的，而这里是处理文件的所有行，浪费资源；另一方面，正则表达式写的不够完善，匹配很花时间，若在python程序中通过简单的find即可找到需要的块，然后再使用正则表达式匹配即可。<br>基于这两点，之后使用python程序改写了，效率大大提高，大约花了15分钟即可完成。sed一般比较适合少量文件的处理，若文件非常多且处理中无用信息很多，最好先用脚本程序(shell/python/perl)作预处理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于圆内外2n+1个点的分配]]></title>
      <url>http://zenvv.com/2008/12/06/circle-point-allocation/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>假设平面坐标上有2n+1个点，如何作一个圆，使得恰有n个点在圆内，n个在圆外，1个在圆上。  </p>
<p>分析: 假设已经找到这个圆，那么在该圆内任选一条弦，且满足该弦与不在圆上的另外2n个点中的任意一个均不共线，则该弦和这2n个点可以构造2n个三角形。由于在圆外的点与弦所构成的三角形中弦的对角必定小于与该弦同方向的圆周角；同理，在圆内的点与弦所构成的三角形中则呈大于关系；而在圆上的点与弦的关系是或者共线(即0角度)，或者为圆周角。</p>
<p>根据以上分析，可以采用如下方法可以找到这个圆。但直接使用如上方法，非常复杂。下面首先对数据进 行预处理。这2n+1个点向x正向和y正向坐标轴移动(即是从左下向右上移动)，直至最左下的点移动到原点O处，这时另外2n个点要么在x轴正半轴上，要 么在x轴上方。因此过O点可以找到一条直线，使2n个点位于它的同一侧(且不在线上)，在该直线上任取一个点P(与O点不重复)，以OP为边，以线外2n 个点为第三个顶点可以构造出2n个三角形。然后对所有三角形中OP的对角(共2n个)进行排序并判断：若第n个角不等于第n+1个角，则任取一个在区间 (第n,第n+1)这两个角度之间的角度(设为k), 则以OP为弦且同方向圆周角大小为k唯一确定一个圆，该圆即满足条件。若第n个角度与第n+1个相等，则调整P点的位置(在程序里易实现)，重新排序判断 直至求得可行解。</p>
<p>关于该方法的证明和程序后续可能会提供。这里参照了以前一个中学竞赛的题目，以及javaman所提的通过将所有点移动到同一边以简化算法的idea，在此表示感谢。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[等概率随机数的生成方法]]></title>
      <url>http://zenvv.com/2008/12/04/random-generator/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>最近遇到一道关于随机数生成的问题，题目如下:</p>
<p>(1) 假设rand8()只生存[0,7]间的任意实数且属于均匀概率分布，则如何实现一个随机函数rand11()生成0-10之间的任意实数也属于均匀概率分布?<br>(2) 假设rand8()只生存[0,7]间的任意整数且属于均匀概率分布，则如何实现一个随机函数rand11()生成0-10之间的任意整数也属于均匀概率分布?</p>
<p>第一题简单，即是 rand11() = (10.0*rand8()) / (7.0);  </p>
<p>第二题有难度， rand8()只产生0,1,2..7这8个数，如何将其放大到0,1,2..10这11个数。在这里我们可以考虑使用笛卡尔乘积的方法(这里用<strong>表 示)。则rand8() </strong> rand8()一共可一产生64种编码结果，且是等概率的(属于均匀概率分布)。从这64种结果中预先随机选取11种情况分别映射为 0,1,2,…,10这11个整数。<br>然后定义rand11() 如下:  若rand8() <strong> rand*() 产生的编码为预先选取的，则返回其相应的映射值，否则重新执行rand8()</strong>rand8()直至生产为预先选取的。则rand11() 满足需求。<br>这个解决方法是javaman提供的，在此表示感谢!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 在不同层级目录import 模块的方法]]></title>
      <url>http://zenvv.com/2008/11/22/python-import-path/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><font size="1" color="grey"><br>[声明] 很久前在chinaunix hi中分享了几篇blog, 由于其意外关闭导致全部丢失。如今，意外的发现有几篇被很多人转载！同时也感谢那些博主们，让我能够找回这篇旧文。<br></font>


<p>python包含子目录中的模块方法比较简单，关键是能够在sys.path里面找到通向模块文件的路径。</p>
<p>下面将具体介绍几种常用情况:<br>（1）主程序与模块程序在同一目录下<br>如下面程序结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── mod1.py</span><br><span class="line">    └── test1.py</span><br></pre></td></tr></table></figure></p>
<p>若在程序test1.py中导入模块mod1, 则直接使用import mod1或from mod1 import *;</p>
<p>（2）主程序所在目录是模块所在目录的父(或祖辈)目录<br>如下面程序结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── mod1.py</span><br><span class="line">    ├── mod2</span><br><span class="line">    │   └── mod2.py</span><br><span class="line">    └── test1.py</span><br></pre></td></tr></table></figure></p>
<p>若在程序test1.py中导入模块mod2, 需要在mod2文件夹中建立空文件__init__.py文件(也可以在该文件中自定义输出模块接口); 然后使用 from mod2.mod2 import * 或import mod2.mod2.</p>
<p>（3）主程序导入上层目录中模块或其他目录(平级)下的模块<br>如下面程序结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── mod1.py</span><br><span class="line">    ├── mod2</span><br><span class="line">    │   └── mod2.py</span><br><span class="line">    ├── sub</span><br><span class="line">    │   └── test2.py</span><br><span class="line">    └── test1.py</span><br></pre></td></tr></table></figure></p>
<p>若在程序test2.py中导入模块mod1和mod2。<br>首先需要在mod2下建立<strong>init</strong>.py文件(同(2))，src下不必建立该文件;<br>然后调用方式如下.</p>
<p>下面程序执行方式均在程序文件所在目录下执行，如test2.py是在cd sub; 之后执行python test2.py.<br>而test1.py是在cd src;之后执行python test1.py; 不保证在src目录下执行python sub/test2.py成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(”..”)</span><br><span class="line">import mod1</span><br><span class="line">import mod2.mod2</span><br></pre></td></tr></table></figure></p>
<p>从(3)可以看出，导入模块关键是能够根据sys.path环境变量的值，找到具体模块的路径。这里仅介绍上面三种简单情况。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优化playmp3list代码]]></title>
      <url>http://zenvv.com/2008/09/13/optimize-playmp3list/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js"> </script><p>今天修改了播放器playmp3list的部分代码bug。</p>
<p>直接使用aptitude install playmp3list安装上的player存在两个问题：<br>（1）对中文支持不好，<br>（2）cpu消耗太多，也是最大的bug。  </p>
<p>我使用的平台及硬件属性为: debian 2.6.24-1-686 GNU/Linux, Genuine Intel(R) CPU T2050  @ 1.60GHz，cpu占有率平均为80%!!!</p>
<p>首先增加对中文的支持，<br>(1) 需要安装ncursesw开发库，<br>(2) 将playmp3list.h中的宏定义#define NCURSES <ncurses ncurses.h="">修改为#define NCURSES <ncursesw ncurses.h="">，<br>(3)将生成的Makefile中的行LIBS =  -lcurses修改为LIBS =  -lncursesw，<br>(4) 在main.cc中包含#include <locale.h>，并在main()函数的开始处调用setlocale(LC_ALL, “”); 注意不能使用setlocale(LC_ALL, NULL)。<br>之后make; make install即可安装完成, playmp3list yourMusicPath 运行后可以看到正确中文字符了。</locale.h></ncursesw></ncurses></p>
<p>其次，修改高cpu消耗的bug, 实际上这个很简单，只需在主循环里面增加个usleep函数即可，以防止持续高速的屏幕刷新(估计作者在没有测试内存消耗的情况下即提交代码了)。我添加的位置是: 在void play_list(void)函数中的do{}while的循环体起始处添加usleep(300);语句 //这里的睡眠时间只要不影响界面的正常刷新即可。</p>
<p>若发现播放mp3时程序退出，需要修改一个地方重新编译即可。将interface.cc文件中的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">playmp3listWindow::do_refresh()</span><br><span class="line">&#123; /*touchwin(stdscr);</span><br><span class="line">  refresh();*/  // I don’t know why this doesn’t work, so I’m using this instead…</span><br><span class="line">  resize();</span><br><span class="line">&#125; // do_refresh</span><br><span class="line">修改为:</span><br><span class="line">void</span><br><span class="line">playmp3listWindow::do_refresh()</span><br><span class="line">&#123; touchwin(stdscr);</span><br><span class="line">  refresh();  // I don’t know why this doesn’t work, so I’m using this instead…</span><br><span class="line">  //resize();</span><br><span class="line">&#125; // do_refresh</span><br></pre></td></tr></table></figure></p>
<p>关于原因，我想你已经看到的注释了。另外需要安长mpg123解码库才能播放mp3(附件有我improve的代码)。</p>
<p>最后，一个完整的shell下mp3播放器完成了，去体验一下。</p>
<p><a href="http://download.csdn.net/detail/uskee/786855" target="_blank" rel="external">附源代码下载地址</a></p>
]]></content>
    </entry>
    
  
  
</search>
